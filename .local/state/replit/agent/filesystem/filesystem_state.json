{"file_contents":{"bot.py":{"content":"import telebot\nfrom telebot import types\nfrom config import BOT_TOKEN, ADMIN_CODE, ADMIN_CHAT_ID, EMPLOYEES\nfrom handlers.admin_handlers import AdminHandler\nfrom handlers.employee_handlers import EmployeeHandler\nfrom utils.database import init_all_databases\n\n# Initialize bot\nbot = telebot.TeleBot(BOT_TOKEN)\n\n# Initialize databases\ninit_all_databases()\n\n# Initialize handlers\nadmin_handler = AdminHandler(bot)\nemployee_handler = EmployeeHandler(bot)\n\n# User session management\nuser_sessions = {}\n\n@bot.message_handler(commands=['start'])\ndef start_message(message):\n    \"\"\"Handle /start command\"\"\"\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    markup.add(\"üîê Admin\", \"üë§ Xodim\")\n    bot.send_message(message.chat.id, \"Assalomu alaykum!\\nIltimos, rolingizni tanlang:\", reply_markup=markup)\n\n@bot.message_handler(commands=['getid'])\ndef send_chat_id(message):\n    \"\"\"Send user's chat ID\"\"\"\n    bot.reply_to(message, f\"üÜî Sizning chat ID'ingiz: {message.chat.id}\")\n\n@bot.message_handler(func=lambda message: message.text == \"üîê Admin\")\ndef ask_admin_code(message):\n    \"\"\"Ask for admin code\"\"\"\n    msg = bot.send_message(message.chat.id, \"üîë Iltimos, admin kodini kiriting:\")\n    bot.register_next_step_handler(msg, verify_admin_code)\n\ndef verify_admin_code(message):\n    \"\"\"Verify admin code\"\"\"\n    if message.text == ADMIN_CODE:\n        user_sessions[message.chat.id] = \"admin\"\n        bot.send_message(message.chat.id, \"‚úÖ Xush kelibsiz, admin!\")\n        admin_handler.show_admin_panel(message)\n    else:\n        msg = bot.send_message(message.chat.id, \"‚ùå Kod noto'g'ri. Qaytadan urinib ko'ring:\")\n        bot.register_next_step_handler(msg, verify_admin_code)\n\n@bot.message_handler(func=lambda message: message.text == \"üë§ Xodim\")\ndef employee_login(message):\n    \"\"\"Handle employee login\"\"\"\n    chat_id = message.chat.id\n    \n    # Check if user is in employee list\n    if chat_id in EMPLOYEES.values():\n        user_sessions[chat_id] = \"employee\"\n        employee_handler.show_employee_panel(message)\n    else:\n        bot.send_message(chat_id, \"‚ùå Siz hodimlar ro'yxatida yo'qsiz.\\nüÜî Chat ID'ingiz: \" + str(chat_id))\n\n# Admin handlers\n@bot.message_handler(func=lambda message: message.text == \"üìù Topshiriqlar\" and user_sessions.get(message.chat.id) == \"admin\")\ndef handle_admin_tasks(message):\n    admin_handler.start_task_creation(message)\n\n@bot.message_handler(func=lambda message: message.text == \"üìä Qarzdorlik\" and user_sessions.get(message.chat.id) == \"admin\")\ndef handle_admin_debts(message):\n    admin_handler.show_debt_menu(message)\n\n@bot.message_handler(func=lambda message: message.text == \"‚ûï Qarz qo'shish\" and user_sessions.get(message.chat.id) == \"admin\")\ndef handle_add_debt(message):\n    admin_handler.start_add_debt(message)\n\n@bot.message_handler(func=lambda message: message.text == \"üìã Qarzlarni ko'rish\" and user_sessions.get(message.chat.id) == \"admin\")\ndef handle_view_debts(message):\n    admin_handler.show_all_debts(message)\n\n@bot.message_handler(func=lambda message: message.text == \"üí∞ Pul miqdori\" and user_sessions.get(message.chat.id) == \"admin\")\ndef handle_admin_payment(message):\n    admin_handler.ask_payment(message)\n\n@bot.message_handler(func=lambda message: message.text == \"üë• Kerakli hodimlar\" and user_sessions.get(message.chat.id) == \"admin\")\ndef handle_admin_employees(message):\n    admin_handler.choose_employees(message)\n\n# Employee handlers\n@bot.message_handler(func=lambda message: message.text == \"üìã Mening vazifalarim\" and user_sessions.get(message.chat.id) == \"employee\")\ndef handle_my_tasks(message):\n    employee_handler.show_my_tasks(message)\n\n@bot.message_handler(func=lambda message: message.text == \"‚úÖ Bajarilgan vazifalar\" and user_sessions.get(message.chat.id) == \"employee\")\ndef handle_completed_tasks(message):\n    employee_handler.show_completed_tasks(message)\n\n@bot.message_handler(func=lambda message: message.text == \"üìä Hisobot\" and user_sessions.get(message.chat.id) == \"employee\")\ndef handle_employee_reports(message):\n    employee_handler.show_report_menu(message)\n\n@bot.message_handler(func=lambda message: message.text == \"üìÖ 30 kunlik hisobot\" and user_sessions.get(message.chat.id) == \"employee\")\ndef handle_30_day_report(message):\n    employee_handler.report_30_days(message)\n\n@bot.message_handler(func=lambda message: message.text == \"üóì 1 haftalik hisobot\" and user_sessions.get(message.chat.id) == \"employee\")\ndef handle_7_day_report(message):\n    employee_handler.report_7_days(message)\n\n@bot.message_handler(func=lambda message: message.text == \"üì§ Excel faylga chop etish\" and user_sessions.get(message.chat.id) == \"employee\")\ndef handle_excel_export(message):\n    employee_handler.export_excel_report(message)\n\n# Back buttons\n@bot.message_handler(func=lambda message: message.text in [\"‚¨ÖÔ∏è Ortga\", \"üîô Ortga\", \"üîô Orqaga\"])\ndef handle_back_buttons(message):\n    session = user_sessions.get(message.chat.id)\n    if session == \"admin\":\n        admin_handler.show_admin_panel(message)\n    elif session == \"employee\":\n        employee_handler.show_employee_panel(message)\n    else:\n        start_message(message)\n\n# Location handler\n@bot.message_handler(content_types=['location'])\ndef handle_location(message):\n    if user_sessions.get(message.chat.id) == \"admin\":\n        admin_handler.receive_location(message)\n\n# Callback query handler for task status updates\n@bot.callback_query_handler(func=lambda call: True)\ndef handle_callbacks(call):\n    if user_sessions.get(call.message.chat.id) == \"employee\":\n        employee_handler.handle_task_callback(call)\n\n# Error handler\n@bot.message_handler(func=lambda message: True)\ndef handle_unknown_messages(message):\n    chat_id = message.chat.id\n    session = user_sessions.get(chat_id)\n    \n    if session == \"admin\":\n        bot.send_message(chat_id, \"‚ùå Noma'lum buyruq. Admin panelidagi tugmalardan foydalaning.\")\n        admin_handler.show_admin_panel(message)\n    elif session == \"employee\":\n        bot.send_message(chat_id, \"‚ùå Noma'lum buyruq. Hodim panelidagi tugmalardan foydalaning.\")\n        employee_handler.show_employee_panel(message)\n    else:\n        start_message(message)\n\nif __name__ == \"__main__\":\n    print(\"ü§ñ Bot ishga tushdi...\")\n    bot.infinity_polling(none_stop=True)\n","size_bytes":6295},"config.py":{"content":"import os\n\n# Bot configuration\nBOT_TOKEN = os.getenv(\"BOT_TOKEN\")\nADMIN_CODE = os.getenv(\"ADMIN_CODE\", \"1234\")\nADMIN_CHAT_ID = int(os.getenv(\"ADMIN_CHAT_ID\", \"7792775986\"))\n\n# Database configuration\nDATABASE_PATH = \"task_management.db\"\n\n# Employee configuration\nEMPLOYEES = {\n    \"Kamol\": 7442895800,\n    \"Fozil\": 747368650,\n    \"Asomiddin\": 1894259641,\n    \"Farruh\": 1037206796,\n    \"Ozoda\": 826129625,\n    \"Azimjon\": 6763936748,\n    \n    \"Salih\": 7792775986,\n}\n\n# File paths\nREPORTS_DIR = \"reports\"\nMEDIA_DIR = \"media\"\nEXCEL_FILE = \"tasks_report.xlsx\"\n","size_bytes":554},"database.py":{"content":"import sqlite3\nimport os\nimport json\nfrom datetime import datetime\nfrom typing import List, Tuple, Optional, Dict, Any\nfrom config import DATABASE_PATH\n\ndef init_database():\n    \"\"\"Initialize the database with all required tables\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    # Tasks table\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS tasks (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            description TEXT NOT NULL,\n            location_lat REAL,\n            location_lon REAL,\n            location_address TEXT,\n            payment_amount REAL DEFAULT NULL,\n            assigned_to TEXT NOT NULL,\n            assigned_by INTEGER NOT NULL,\n            status TEXT DEFAULT 'pending',\n            created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n            started_at TEXT,\n            completed_at TEXT,\n            completion_report TEXT,\n            completion_media TEXT,\n            received_amount REAL DEFAULT 0\n        )\n    \"\"\")\n    \n    # Debts table\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS debts (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            employee_name TEXT NOT NULL,\n            employee_chat_id INTEGER NOT NULL,\n            task_id INTEGER,\n            amount REAL NOT NULL,\n            reason TEXT NOT NULL,\n            payment_date TEXT NOT NULL,\n            created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n            status TEXT DEFAULT 'unpaid',\n            FOREIGN KEY (task_id) REFERENCES tasks (id)\n        )\n    \"\"\")\n    \n    # Messages table for notifications\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS messages (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            from_chat_id INTEGER NOT NULL,\n            to_chat_id INTEGER NOT NULL,\n            message_text TEXT NOT NULL,\n            message_type TEXT DEFAULT 'general',\n            task_id INTEGER,\n            created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n            FOREIGN KEY (task_id) REFERENCES tasks (id)\n        )\n    \"\"\")\n    \n    # User states table for conversation management\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS user_states (\n            chat_id INTEGER PRIMARY KEY,\n            state TEXT NOT NULL,\n            state_data TEXT,\n            updated_at TEXT DEFAULT CURRENT_TIMESTAMP\n        )\n    \"\"\")\n    \n    # Customer inquiries table for website and bot requests\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS customer_inquiries (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            customer_name TEXT NOT NULL,\n            customer_phone TEXT,\n            customer_username TEXT,\n            chat_id INTEGER,\n            inquiry_text TEXT NOT NULL,\n            inquiry_type TEXT DEFAULT 'bot',\n            location_lat REAL,\n            location_lon REAL,\n            location_address TEXT,\n            status TEXT DEFAULT 'pending',\n            admin_response TEXT,\n            created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n            responded_at TEXT,\n            source TEXT DEFAULT 'telegram'\n        )\n    \"\"\")\n    \n    # Employee locations table for tracking\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS employee_locations (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            employee_name TEXT NOT NULL,\n            employee_chat_id INTEGER NOT NULL,\n            latitude REAL NOT NULL,\n            longitude REAL NOT NULL,\n            location_type TEXT DEFAULT 'manual',\n            created_at TEXT DEFAULT CURRENT_TIMESTAMP,\n            is_live INTEGER DEFAULT 0\n        )\n    \"\"\")\n    \n    conn.commit()\n    conn.close()\n\ndef add_task(description: str, location_lat: float, location_lon: float, \n             location_address: Optional[str], payment_amount: Optional[float], \n             assigned_to: str, assigned_by: int) -> int:\n    \"\"\"Add a new task and return task ID\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    cursor.execute(\"\"\"\n        INSERT INTO tasks (description, location_lat, location_lon, location_address, \n                          payment_amount, assigned_to, assigned_by)\n        VALUES (?, ?, ?, ?, ?, ?, ?)\n    \"\"\", (description, location_lat, location_lon, location_address, \n          payment_amount, assigned_to, assigned_by))\n    \n    task_id = cursor.lastrowid\n    conn.commit()\n    conn.close()\n    return task_id or 0\n\ndef get_employee_tasks(employee_name: str, status: str = None) -> List[Tuple]:\n    \"\"\"Get tasks for a specific employee\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    if status:\n        cursor.execute(\"\"\"\n            SELECT * FROM tasks \n            WHERE assigned_to = ? AND status = ?\n            ORDER BY created_at DESC\n        \"\"\", (employee_name, status))\n    else:\n        cursor.execute(\"\"\"\n            SELECT * FROM tasks \n            WHERE assigned_to = ?\n            ORDER BY created_at DESC\n        \"\"\", (employee_name,))\n    \n    tasks = cursor.fetchall()\n    conn.close()\n    return tasks\n\ndef update_task_status(task_id: int, status: str, completion_report: str = None,\n                      completion_media: str = None, received_amount: float = None):\n    \"\"\"Update task status and completion details\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    update_fields = [\"status = ?\"]\n    values = [status]\n    \n    if status == \"in_progress\":\n        update_fields.append(\"started_at = ?\")\n        values.append(datetime.now().isoformat())\n    elif status == \"completed\":\n        update_fields.append(\"completed_at = ?\")\n        values.append(datetime.now().isoformat())\n        \n        if completion_report:\n            update_fields.append(\"completion_report = ?\")\n            values.append(completion_report)\n        \n        if completion_media:\n            update_fields.append(\"completion_media = ?\")\n            values.append(completion_media)\n        \n        if received_amount is not None:\n            update_fields.append(\"received_amount = ?\")\n            values.append(received_amount)\n    \n    values.append(task_id)\n    \n    query = f\"UPDATE tasks SET {', '.join(update_fields)} WHERE id = ?\"\n    cursor.execute(query, values)\n    \n    conn.commit()\n    conn.close()\n\ndef add_debt(employee_name: str, employee_chat_id: int, task_id: Optional[int],\n            amount: float, reason: str, payment_date: str):\n    \"\"\"Add a debt record\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    cursor.execute(\"\"\"\n        INSERT INTO debts (employee_name, employee_chat_id, task_id, amount, reason, payment_date)\n        VALUES (?, ?, ?, ?, ?, ?)\n    \"\"\", (employee_name, employee_chat_id, task_id, amount, reason, payment_date))\n    \n    conn.commit()\n    conn.close()\n\ndef get_debts(employee_name: str = None) -> List[Tuple]:\n    \"\"\"Get debt records\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    if employee_name:\n        cursor.execute(\"\"\"\n            SELECT * FROM debts \n            WHERE employee_name = ? AND status = 'unpaid'\n            ORDER BY created_at DESC\n        \"\"\", (employee_name,))\n    else:\n        cursor.execute(\"\"\"\n            SELECT * FROM debts \n            WHERE status = 'unpaid'\n            ORDER BY created_at DESC\n        \"\"\")\n    \n    debts = cursor.fetchall()\n    conn.close()\n    return debts\n\ndef add_message(from_chat_id: int, to_chat_id: int, message_text: str,\n               message_type: str = \"general\", task_id: Optional[int] = None):\n    \"\"\"Add a message record\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    cursor.execute(\"\"\"\n        INSERT INTO messages (from_chat_id, to_chat_id, message_text, message_type, task_id)\n        VALUES (?, ?, ?, ?, ?)\n    \"\"\", (from_chat_id, to_chat_id, message_text, message_type, task_id))\n    \n    conn.commit()\n    conn.close()\n\ndef set_user_state(chat_id: int, state: str, state_data: str = None):\n    \"\"\"Set user conversation state\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    cursor.execute(\"\"\"\n        INSERT OR REPLACE INTO user_states (chat_id, state, state_data, updated_at)\n        VALUES (?, ?, ?, ?)\n    \"\"\", (chat_id, state, state_data, datetime.now().isoformat()))\n    \n    conn.commit()\n    conn.close()\n\ndef get_user_state(chat_id: int) -> Tuple[str, str]:\n    \"\"\"Get user conversation state\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    cursor.execute(\"\"\"\n        SELECT state, state_data FROM user_states WHERE chat_id = ?\n    \"\"\", (chat_id,))\n    \n    result = cursor.fetchone()\n    conn.close()\n    \n    if result:\n        return result[0], result[1] or \"\"\n    return \"\", \"\"\n\ndef clear_user_state(chat_id: int):\n    \"\"\"Clear user conversation state\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    cursor.execute(\"DELETE FROM user_states WHERE chat_id = ?\", (chat_id,))\n    \n    conn.commit()\n    conn.close()\n\ndef get_task_statistics() -> Dict[str, Any]:\n    \"\"\"Get task statistics for reporting\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    # Total tasks\n    cursor.execute(\"SELECT COUNT(*) FROM tasks\")\n    total_tasks = cursor.fetchone()[0]\n    \n    # Tasks by status\n    cursor.execute(\"\"\"\n        SELECT status, COUNT(*) FROM tasks GROUP BY status\n    \"\"\")\n    status_counts = dict(cursor.fetchall())\n    \n    # Total payments\n    cursor.execute(\"SELECT SUM(received_amount) FROM tasks WHERE status = 'completed'\")\n    total_payments = cursor.fetchone()[0] or 0\n    \n    # Total debts\n    cursor.execute(\"SELECT SUM(amount) FROM debts WHERE status = 'unpaid'\")\n    total_debts = cursor.fetchone()[0] or 0\n    \n    conn.close()\n    \n    return {\n        \"total_tasks\": total_tasks,\n        \"status_counts\": status_counts,\n        \"total_payments\": total_payments,\n        \"total_debts\": total_debts\n    }\n\ndef add_customer_inquiry(customer_name: str, inquiry_text: str, customer_phone: str = None, \n                        customer_username: str = None, chat_id: int = None, location_lat: float = None, \n                        location_lon: float = None, location_address: str = None, \n                        inquiry_type: str = 'bot', source: str = 'telegram') -> int:\n    \"\"\"Add a new customer inquiry\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        INSERT INTO customer_inquiries \n        (customer_name, customer_phone, customer_username, chat_id, inquiry_text, \n         inquiry_type, location_lat, location_lon, location_address, source)\n        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\n    \"\"\", (customer_name, customer_phone, customer_username, chat_id, inquiry_text,\n          inquiry_type, location_lat, location_lon, location_address, source))\n    inquiry_id = cursor.lastrowid\n    conn.commit()\n    conn.close()\n    return inquiry_id\n\ndef get_customer_inquiries(status: str = None, source: str = None) -> List[Tuple]:\n    \"\"\"Get customer inquiries with optional filtering\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    query = \"SELECT * FROM customer_inquiries\"\n    params = []\n    conditions = []\n    \n    if status:\n        conditions.append(\"status = ?\")\n        params.append(status)\n    \n    if source:\n        conditions.append(\"source = ?\")\n        params.append(source)\n    \n    if conditions:\n        query += \" WHERE \" + \" AND \".join(conditions)\n    \n    query += \" ORDER BY created_at DESC\"\n    \n    cursor.execute(query, params)\n    inquiries = cursor.fetchall()\n    conn.close()\n    return inquiries\n\ndef respond_to_inquiry(inquiry_id: int, admin_response: str) -> Optional[Tuple]:\n    \"\"\"Add admin response to customer inquiry\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        UPDATE customer_inquiries \n        SET admin_response = ?, status = 'responded', responded_at = CURRENT_TIMESTAMP\n        WHERE id = ?\n    \"\"\", (admin_response, inquiry_id))\n    conn.commit()\n    \n    # Get inquiry details for notification\n    cursor.execute(\"\"\"\n        SELECT customer_name, chat_id, inquiry_text, customer_phone, source\n        FROM customer_inquiries WHERE id = ?\n    \"\"\", (inquiry_id,))\n    inquiry_details = cursor.fetchone()\n    conn.close()\n    return inquiry_details\n\ndef get_inquiry_by_id(inquiry_id: int) -> Optional[Tuple]:\n    \"\"\"Get specific inquiry by ID\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT * FROM customer_inquiries WHERE id = ?\", (inquiry_id,))\n    inquiry = cursor.fetchone()\n    conn.close()\n    return inquiry\n\ndef get_task_by_id(task_id: int) -> Optional[Tuple]:\n    \"\"\"Get specific task by ID\"\"\"\n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT * FROM tasks WHERE id = ?\", (task_id,))\n    task = cursor.fetchone()\n    conn.close()\n    return task\n\n# Initialize database on import\nif not os.path.exists(DATABASE_PATH):\n    init_database()","size_bytes":13029},"main.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nEnhanced Telegram Task Management Bot\nA comprehensive bot for managing tasks between admins and employees\nwith location sharing, Excel reporting, debt tracking, and media support.\n\"\"\"\n\nimport telebot\nfrom telebot import types\nimport json\nimport os\nimport sys\nfrom datetime import datetime, timedelta\n\nfrom config import BOT_TOKEN, ADMIN_CODE, ADMIN_CHAT_ID, EMPLOYEES\nfrom database import (\n    init_database, add_task, get_employee_tasks, update_task_status, add_debt, get_debts,\n    add_message, get_user_state, set_user_state, clear_user_state,\n    add_customer_inquiry, get_customer_inquiries, respond_to_inquiry, get_inquiry_by_id, get_task_by_id\n)\nfrom utils import (\n    save_media_file, generate_employee_report, generate_admin_report,\n    format_task_info, parse_json_data, serialize_json_data, ensure_directories\n)\n# Return to employee panel after task completion\n\ndef main():\n    \"\"\"Main function to start the enhanced bot\"\"\"\n    if not BOT_TOKEN:\n        print(\"‚ùå BOT_TOKEN mavjud emas. Iltimos, bot tokenini qo'shing.\")\n        sys.exit(1)\n\n    # Initialize bot\n    bot = telebot.TeleBot(BOT_TOKEN)\n    \n    # Delete webhook to ensure polling works\n    try:\n        bot.delete_webhook()\n    except Exception as e:\n        print(f\"‚ö†Ô∏è Webhook deletion warning: {e}\")\n    \n    # Initialize database and directories\n    init_database()\n    ensure_directories()\n    \n    # Global variables for conversation states\n    admin_data = {}\n\n    @bot.message_handler(commands=['contact', 'sorov', 'murojaat'])\n    def customer_contact(message):\n        \"\"\"Handle customer contact requests\"\"\"\n        # Skip if user is admin or employee\n        if message.chat.id == ADMIN_CHAT_ID or message.chat.id in EMPLOYEES.values():\n            bot.send_message(\n                message.chat.id,\n                \"Admin va xodimlar uchun bu komanda mo'ljallangan emas. /start ni ishlating.\"\n            )\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìû Telefon raqamni ulashish\", \"üìç Joylashuvni ulashish\")\n        markup.add(\"üí¨ So'rov yuborish\", \"üîô Bekor qilish\")\n        \n        set_user_state(message.chat.id, \"customer_contact_start\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üëã Assalomu alaykum!\\n\\n\"\n            \"Biz bilan bog'langaningizdan xursandmiz. So'rovingizni to'liq ko'rib chiqishimiz uchun:\\n\\n\"\n            \"1Ô∏è‚É£ Telefon raqamingizni ulashing\\n\"\n            \"2Ô∏è‚É£ Joylashuvingizni ulashing\\n\"\n            \"3Ô∏è‚É£ So'rovingizni yozing\\n\\n\"\n            \"Qaysi bosqichdan boshlaysiz?\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"customer_contact_start\")\n    def handle_customer_contact_start(message):\n        \"\"\"Handle customer contact start options\"\"\"\n        if message.text == \"üìû Telefon raqamni ulashish\":\n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            contact_button = types.KeyboardButton(\"üìû Telefon raqamni ulashish\", request_contact=True)\n            markup.add(contact_button)\n            markup.add(\"üîô Bekor qilish\")\n            \n            set_user_state(message.chat.id, \"waiting_for_contact\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"üìû Telefon raqamingizni ulash uchun pastdagi tugmani bosing:\",\n                reply_markup=markup\n            )\n            \n        elif message.text == \"üìç Joylashuvni ulashish\":\n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            location_button = types.KeyboardButton(\"üìç Joylashuvni ulashish\", request_location=True)\n            markup.add(location_button)\n            markup.add(\"üîô Bekor qilish\")\n            \n            set_user_state(message.chat.id, \"waiting_for_location\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"üìç Joylashuvingizni ulash uchun pastdagi tugmani bosing:\",\n                reply_markup=markup\n            )\n            \n        elif message.text == \"üí¨ So'rov yuborish\":\n            set_user_state(message.chat.id, \"writing_inquiry\")\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            markup.add(\"üîô Bekor qilish\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"üí¨ So'rovingizni yozing:\\n\\n\"\n                \"Masalan:\\n\"\n                \"- Xizmat haqida ma'lumot olish\\n\"\n                \"- Narxlar haqida savol\\n\"\n                \"- Shikoyat yoki taklif\\n\"\n                \"- Boshqa savollar\",\n                reply_markup=markup\n            )\n            \n        elif message.text == \"üîô Bekor qilish\":\n            clear_user_state(message.chat.id)\n            bot.send_message(\n                message.chat.id,\n                \"‚ùå Bekor qilindi. Yana kerak bo'lsa /contact yozing.\"\n            )\n            \n            # Check if user is an employee and redirect to employee panel  \n            employee_name = None\n            for name, chat_id in EMPLOYEES.items():\n                if chat_id == message.chat.id:\n                    employee_name = name\n                    break\n            \n            if employee_name:\n                show_employee_panel(message, employee_name)\n\n    @bot.message_handler(content_types=['contact'])\n    def handle_customer_contact(message):\n        \"\"\"Handle customer contact sharing\"\"\"\n        if get_user_state(message.chat.id)[0] != \"waiting_for_contact\":\n            return\n        \n        # Store contact info\n        customer_data = {\n            'phone': message.contact.phone_number,\n            'name': message.contact.first_name + (' ' + message.contact.last_name if message.contact.last_name else ''),\n            'username': message.from_user.username\n        }\n        \n        set_user_state(message.chat.id, \"customer_contact_saved\", json.dumps(customer_data))\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        location_button = types.KeyboardButton(\"üìç Joylashuvni ulashish\", request_location=True)\n        markup.add(location_button)\n        markup.add(\"üí¨ So'rov yuborish\", \"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            f\"‚úÖ Telefon raqam saqlandi: {message.contact.phone_number}\\n\\n\"\n            \"Endi joylashuvingizni ham ulashing (ixtiyoriy):\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(content_types=['location'])\n    def handle_all_location(message):\n        \"\"\"Handle all location sharing - customer, admin task assignment, employee\"\"\"\n        state, data = get_user_state(message.chat.id)\n        \n        # Handle admin task assignment location\n        if state == \"assign_task_location\":\n            admin_data[message.chat.id][\"location\"] = {\n                \"latitude\": message.location.latitude,\n                \"longitude\": message.location.longitude\n            }\n            \n            # Show animated location card for task assignment\n            send_animated_location_card(\n                message.chat.id,\n                \"Admin (Vazifa)\",\n                message.location.latitude,\n                message.location.longitude,\n                \"task_location\"\n            )\n            \n            set_user_state(message.chat.id, \"assign_task_payment\")\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            markup.add(\"üí∞ To'lov miqdorini kiriting\")\n            markup.add(\"‚è≠ To'lov belgilanmagan\")\n            markup.add(\"üîô Bekor qilish\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"‚úÖ Vazifa lokatsiyasi belgilandi!\\n\\nüí∞ To'lov miqdorini tanlang:\",\n                reply_markup=markup\n            )\n            print(f\"DEBUG: Payment buttons sent to {message.chat.id}\")\n            return\n        \n        # Handle customer location sharing\n        if state in [\"waiting_for_location\", \"customer_contact_saved\"]:\n            handle_customer_location_data(message, state, data)\n            return\n        \n        # Handle employee location sharing\n        if state == \"employee_location\":\n            handle_employee_location_data(message)\n            return\n    \n    def handle_customer_location_data(message, state, data):\n        \"\"\"Handle customer location sharing\"\"\"\n        \n        # Get existing customer data or create new\n        if data:\n            customer_data = json.loads(data)\n        else:\n            customer_data = {\n                'name': message.from_user.first_name + (' ' + message.from_user.last_name if message.from_user.last_name else ''),\n                'username': message.from_user.username\n            }\n        \n        # Add location data\n        customer_data['location_lat'] = message.location.latitude\n        customer_data['location_lon'] = message.location.longitude\n        \n        # Show animated location card for customer\n        send_animated_location_card(\n            message.chat.id,\n            customer_data.get('name', 'Mijoz'),\n            message.location.latitude,\n            message.location.longitude,\n            \"customer_location\"\n        )\n        \n        set_user_state(message.chat.id, \"customer_location_saved\", json.dumps(customer_data))\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üí¨ So'rov yuborish\")\n        if 'phone' not in customer_data:\n            contact_button = types.KeyboardButton(\"üìû Telefon raqamni ulashish\", request_contact=True)\n            markup.add(contact_button)\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"‚úÖ Joylashuv saqlandi!\\n\\n\"\n            \"Endi so'rovingizni yozing:\",\n            reply_markup=markup\n        )\n    \n    def handle_employee_location_data(message):\n        \"\"\"Handle employee location sharing during task completion\"\"\"\n        # Use the main location sharing handler which includes employee panel redirect\n        handle_location_sharing(message)\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] in [\"writing_inquiry\", \"customer_contact_saved\", \"customer_location_saved\"])\n    def handle_customer_inquiry(message):\n        \"\"\"Handle customer inquiry text\"\"\"\n        if message.text == \"üîô Bekor qilish\":\n            clear_user_state(message.chat.id)\n            bot.send_message(\n                message.chat.id,\n                \"‚ùå Bekor qilindi. Yana kerak bo'lsa /contact yozing.\"\n            )\n            \n            # Check if user is an employee and redirect to employee panel\n            employee_name = None\n            for name, chat_id in EMPLOYEES.items():\n                if chat_id == message.chat.id:\n                    employee_name = name\n                    break\n            \n            if employee_name:\n                show_employee_panel(message, employee_name)\n            return\n        \n        if message.text in [\"üìû Telefon raqamni ulashish\", \"üìç Joylashuvni ulashish\"]:\n            # Handle these separately\n            handle_customer_contact_start(message)\n            return\n        \n        if message.text == \"üí¨ So'rov yuborish\":\n            set_user_state(message.chat.id, \"writing_inquiry_final\")\n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            markup.add(\"üîô Bekor qilish\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"üí¨ So'rovingizni batafsil yozing:\",\n                reply_markup=markup\n            )\n            return\n        \n        # This is the inquiry text\n        state, data = get_user_state(message.chat.id)\n        \n        # Get customer data\n        if data:\n            customer_data = json.loads(data)\n        else:\n            customer_data = {\n                'name': message.from_user.first_name + (' ' + message.from_user.last_name if message.from_user.last_name else ''),\n                'username': message.from_user.username\n            }\n        \n        try:\n            # Save inquiry to database\n            inquiry_id = add_customer_inquiry(\n                customer_name=customer_data.get('name', 'Mijoz'),\n                customer_phone=customer_data.get('phone', ''),\n                customer_username=customer_data.get('username', ''),\n                chat_id=message.chat.id,\n                inquiry_text=message.text,\n                location_lat=customer_data.get('location_lat', 0.0),\n                location_lon=customer_data.get('location_lon', 0.0),\n                inquiry_type='customer_request',\n                source='telegram'\n            )\n            \n            # Send confirmation to customer\n            bot.send_message(\n                message.chat.id,\n                f\"‚úÖ **So'rovingiz qabul qilindi!**\\n\\n\"\n                f\"üìã So'rov raqami: #{inquiry_id}\\n\"\n                f\"üë§ Ism: {customer_data.get('name', 'Mijoz')}\\n\"\n                f\"üìû Telefon: {customer_data.get('phone', 'Kiritilmagan')}\\n\"\n                f\"üí¨ So'rov: {message.text}\\n\\n\"\n                f\"üïê Tez orada javob beramiz!\\n\"\n                f\"üìû Shoshilinch hollar uchun: +998 xx xxx xx xx\"\n            )\n            \n            # Notify admin\n            if ADMIN_CHAT_ID:\n                admin_message = f\"\"\"\nüîî **YANGI MIJOZ SO'ROVI**\n\nüìã So'rov ID: #{inquiry_id}\nüë§ Mijoz: {customer_data.get('name', 'Mijoz')}\nüìû Telefon: {customer_data.get('phone', 'Kiritilmagan')}\nüë§ Username: @{customer_data.get('username', 'mavjud emas')}\nüì± Chat ID: {message.chat.id}\n\nüí¨ **So'rov:**\n{message.text}\n\nüìÖ Vaqt: {datetime.now().strftime('%Y-%m-%d %H:%M')}\n\nüí° Javob berish: üë• Mijozlar so'rovlari ‚Üí ü§ñ Botdan kelgan so'rovlar\n\"\"\"\n                \n                try:\n                    bot.send_message(ADMIN_CHAT_ID, admin_message)\n                    \n                    # Send location if available\n                    if customer_data.get('location_lat') and customer_data.get('location_lon'):\n                        bot.send_location(\n                            ADMIN_CHAT_ID, \n                            customer_data['location_lat'], \n                            customer_data['location_lon']\n                        )\n                        bot.send_message(\n                            ADMIN_CHAT_ID,\n                            f\"üìç Mijoz joylashuvi (So'rov #{inquiry_id})\"\n                        )\n                except Exception as admin_error:\n                    print(f\"Admin notification error: {admin_error}\")\n            \n        except Exception as e:\n            bot.send_message(\n                message.chat.id,\n                f\"‚ùå So'rovni saqlashda xatolik yuz berdi. Iltimos, qayta urinib ko'ring.\\n\"\n                f\"Xatolik: {str(e)}\"\n            )\n        \n        clear_user_state(message.chat.id)\n        \n        # Check if user is an employee and redirect to employee panel\n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if employee_name:\n            # User is an employee, show employee panel\n            show_employee_panel(message, employee_name)\n        else:\n            # User is a customer, show start menu\n            start_message(message)\n\n    @bot.message_handler(commands=['start'])\n    def start_message(message):\n        \"\"\"Handle /start command\"\"\"\n        clear_user_state(message.chat.id)\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üîê Admin\", \"üë§ Xodim\")\n        markup.add(\"üë• Mijoz\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"ü§ñ Vazifa boshqaruv botiga xush kelibsiz!\\n\\n\"\n            \"Iltimos, rolingizni tanlang:\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(commands=['getid'])\n    def send_chat_id(message):\n        \"\"\"Get user's chat ID\"\"\"\n        bot.reply_to(message, f\"üÜî Sizning chat ID'ingiz: `{message.chat.id}`\", parse_mode='Markdown')\n\n    # ADMIN SECTION\n    @bot.message_handler(func=lambda message: message.text == \"üîê Admin\")\n    def admin_login(message):\n        \"\"\"Admin login process\"\"\"\n        set_user_state(message.chat.id, \"admin_login\")\n        \n        markup = types.ReplyKeyboardRemove()\n        msg = bot.send_message(\n            message.chat.id,\n            \"üîë Admin kodini kiriting:\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"admin_login\")\n    def verify_admin_code(message):\n        \"\"\"Verify admin code\"\"\"\n        if message.text == ADMIN_CODE:\n            clear_user_state(message.chat.id)\n            bot.send_message(message.chat.id, \"‚úÖ Muvaffaqiyatli kirildi!\")\n            show_admin_panel(message)\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Noto'g'ri kod. Qaytadan urinib ko'ring:\")\n\n    def show_admin_panel(message):\n        \"\"\"Show admin panel\"\"\"\n        print(f\"DEBUG: Admin panel ko'rsatilmoqda. Chat ID: {message.chat.id}\")\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        markup.add(\"‚ûï Yangi xodim qo'shish\", \"üì§ Vazifa berish\")\n        markup.add(\"üìç Xodimlarni kuzatish\", \"üë• Mijozlar so'rovlari\")\n        markup.add(\"üí∏ Qarzlar\", \"üìä Ma'lumotlar\")\n        markup.add(\"üîô Ortga\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üõ† Admin paneli\\n\\nKerakli bo'limni tanlang:\",\n            reply_markup=markup\n        )\n        print(f\"DEBUG: Admin paneli yuborildi\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üì§ Vazifa berish\")\n    def start_task_assignment(message):\n        \"\"\"Start task assignment process\"\"\"\n        print(f\"DEBUG: Vazifa berish tugmasi bosildi. Chat ID: {message.chat.id}\")\n        \n        if message.chat.id != ADMIN_CHAT_ID:\n            bot.send_message(message.chat.id, \"‚ùå Bu funksiya faqat admin uchun!\")\n            return\n            \n        if len(EMPLOYEES) == 0:\n            bot.send_message(message.chat.id, \"‚ùå Hech qanday xodim topilmadi!\")\n            return\n        \n        set_user_state(message.chat.id, \"assign_task_description\")\n        admin_data[message.chat.id] = {}\n        \n        markup = types.ReplyKeyboardRemove()\n        bot.send_message(\n            message.chat.id,\n            \"üìù Vazifa tavsifini kiriting:\",\n            reply_markup=markup\n        )\n        print(f\"DEBUG: Admin'ga vazifa tavsifi so'raldi\")\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"assign_task_description\")\n    def get_task_description(message):\n        \"\"\"Get task description\"\"\"\n        # Ensure admin_data exists for this user\n        if message.chat.id not in admin_data:\n            admin_data[message.chat.id] = {}\n            \n        admin_data[message.chat.id][\"description\"] = message.text\n        set_user_state(message.chat.id, \"assign_task_location\")\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        location_btn = types.KeyboardButton(\"üìç Lokatsiyani yuborish\", request_location=True)\n        markup.add(location_btn)\n        \n        bot.send_message(\n            message.chat.id,\n            \"üìç Vazifa uchun lokatsiyani yuboring:\",\n            reply_markup=markup\n        )\n\n\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"assign_task_payment\")\n    def get_task_payment(message):\n        \"\"\"Handle task payment selection\"\"\"\n        if message.text == \"üîô Bekor qilish\":\n            clear_user_state(message.chat.id)\n            show_admin_panel(message)\n            return\n        \n        if message.text == \"üí∞ To'lov miqdorini kiriting\":\n            set_user_state(message.chat.id, \"assign_task_payment_amount\")\n            markup = types.ReplyKeyboardRemove()\n            bot.send_message(\n                message.chat.id,\n                \"üí∞ To'lov miqdorini kiriting (so'mda):\",\n                reply_markup=markup\n            )\n        elif message.text == \"‚è≠ To'lov belgilanmagan\":\n            # Ensure admin_data exists for this user\n            if message.chat.id not in admin_data:\n                admin_data[message.chat.id] = {}\n                \n            admin_data[message.chat.id][\"payment\"] = None\n            proceed_to_employee_selection(message)\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Iltimos, tugmalardan birini tanlang!\")\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"assign_task_payment_amount\")\n    def get_task_payment_amount(message):\n        \"\"\"Get specific payment amount\"\"\"\n        try:\n            payment = float(message.text.replace(\" \", \"\").replace(\",\", \"\"))\n            \n            # Ensure admin_data exists for this user\n            if message.chat.id not in admin_data:\n                admin_data[message.chat.id] = {}\n                \n            admin_data[message.chat.id][\"payment\"] = payment\n            proceed_to_employee_selection(message)\n            \n        except ValueError:\n            bot.send_message(message.chat.id, \"‚ùå Noto'g'ri format. Raqam kiriting (masalan: 50000):\")\n\n    def proceed_to_employee_selection(message):\n        \"\"\"Proceed to employee selection step\"\"\"\n        set_user_state(message.chat.id, \"assign_task_employee\")\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        for employee_name in EMPLOYEES.keys():\n            markup.add(employee_name)\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üë• Vazifani bajaradigan xodimni tanlang:\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"assign_task_employee\")\n    def select_task_employee(message):\n        \"\"\"Select employee for task\"\"\"\n        if message.text == \"üîô Bekor qilish\":\n            clear_user_state(message.chat.id)\n            show_admin_panel(message)\n            return\n        \n        if message.text in EMPLOYEES:\n            # Ensure admin_data exists for this user\n            if message.chat.id not in admin_data:\n                admin_data[message.chat.id] = {}\n                \n            admin_data[message.chat.id][\"employee\"] = message.text\n            \n            # Create task in database\n            data = admin_data[message.chat.id]\n            task_id = add_task(\n                description=data[\"description\"],\n                location_lat=data[\"location\"][\"latitude\"],\n                location_lon=data[\"location\"][\"longitude\"],\n                location_address=None,\n                payment_amount=data[\"payment\"],\n                assigned_to=data[\"employee\"],\n                assigned_by=message.chat.id\n            )\n            \n            # Send task to employee\n            employee_chat_id = EMPLOYEES[data[\"employee\"]]\n            \n            # Format payment info\n            if data[\"payment\"] is not None:\n                payment_text = f\"üí∞ To'lov: {data['payment']} so'm\"\n            else:\n                payment_text = \"üí∞ To'lov: Belgilanmagan\"\n            \n            task_text = f\"\"\"\nüîî Sizga yangi vazifa tayinlandi!\n\nüìù Vazifa: {data['description']}\n{payment_text}\nüìÖ Vaqt: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\nVazifani boshlash uchun \"üë§ Xodim\" tugmasini bosing va vazifalar ro'yxatini ko'ring.\n\"\"\"\n            \n            try:\n                bot.send_message(employee_chat_id, task_text)\n                bot.send_location(\n                    employee_chat_id,\n                    data[\"location\"][\"latitude\"],\n                    data[\"location\"][\"longitude\"]\n                )\n                \n                bot.send_message(\n                    message.chat.id,\n                    f\"‚úÖ Vazifa muvaffaqiyatli yuborildi!\\n\\n\"\n                    f\"üë§ Xodim: {data['employee']}\\n\"\n                    f\"üÜî Vazifa ID: {task_id}\"\n                )\n                \n            except Exception as e:\n                bot.send_message(\n                    message.chat.id,\n                    f\"‚ùå Xodimga vazifa yetkazib berishda xatolik:\\n{str(e)}\"\n                )\n            \n            clear_user_state(message.chat.id)\n            admin_data.pop(message.chat.id, None)\n            show_admin_panel(message)\n            \n        else:\n            bot.send_message(message.chat.id, \"‚ùå Iltimos, ro'yxatdan xodim tanlang!\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üìä Ma'lumotlar\")\n    def show_data_menu(message):\n        \"\"\"Show comprehensive data management menu\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n            \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        markup.add(\"üëÅ Barcha ma'lumotlar\", \"üìä Statistika\")\n        markup.add(\"‚ûï Ma'lumot qo'shish\", \"‚úèÔ∏è Ma'lumot tahrirlash\")\n        markup.add(\"üóë Ma'lumot o'chirish\", \"üìã Batafsil ko'rish\")\n        markup.add(\"üì§ Ma'lumot eksport\", \"üîÑ Ma'lumot import\")\n        markup.add(\"üßπ Ma'lumot tozalash\", \"üîç Ma'lumot qidirish\")\n        markup.add(\"üì• Excel yuklab olish\", \"üìà Umumiy hisobot\")\n        markup.add(\"üîô Ortga\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üìä To'liq Ma'lumotlar Boshqaruv Tizimi\\n\\n\"\n            \"üîπ Barcha jadvallardan ma'lumotlarni ko'rish\\n\"\n            \"üîπ To'liq CRUD operatsiyalari (Create, Read, Update, Delete)\\n\"\n            \"üîπ Professional Excel eksport/import\\n\"\n            \"üîπ Real-time statistika va tahlil\\n\"\n            \"üîπ Ma'lumotlarni qidirish va filtrlash\\n\\n\"\n            \"Kerakli amaliyotni tanlang:\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üì• Excel yuklab olish\")\n    def generate_excel_report(message):\n        \"\"\"Generate and send Excel report\"\"\"\n        bot.send_message(message.chat.id, \"üìä Hisobot tayyorlanmoqda...\")\n        \n        try:\n            filepath = generate_admin_report()\n            if filepath and os.path.exists(filepath):\n                with open(filepath, 'rb') as f:\n                    bot.send_document(\n                        message.chat.id,\n                        f,\n                        caption=\"üìä Umumiy hisobot Excel fayli\"\n                    )\n                # Clean up file\n                os.remove(filepath)\n            else:\n                bot.send_message(message.chat.id, \"‚ùå Hisobot yaratishda xatolik yuz berdi.\")\n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üí∏ Qarzlar\")\n    def show_debts_menu(message):\n        \"\"\"Show debts menu\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n            \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üëÅ Qarzlarni ko'rish\", \"‚ûï Qarz qo'shish\")\n        markup.add(\"‚úÖ Qarzni to'lash\", \"‚ùå Qarzni o'chirish\")\n        markup.add(\"üìä Qarzlar hisoboti\", \"üîô Ortga\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üí∏ Qarzlar bo'limi:\\n\\nKerakli amalni tanlang:\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üëÅ Qarzlarni ko'rish\")\n    def view_all_debts(message):\n        \"\"\"View all debts\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n            \n        try:\n            debts = get_debts()\n            \n            if not debts:\n                bot.send_message(message.chat.id, \"‚úÖ Hech qanday qarz mavjud emas!\")\n                return\n            \n            debt_text = \"üí∏ Barcha qarzlar:\\n\\n\"\n            total_debt = 0\n            \n            for i, debt in enumerate(debts, 1):\n                debt_id, employee_name, employee_chat_id, task_id, amount, reason, payment_date, created_at, status = debt\n                total_debt += amount\n                \n                debt_text += f\"{i}. üë§ {employee_name} (ID: {debt_id})\\n\"\n                debt_text += f\"   üí∞ {amount:,.0f} so'm\\n\"\n                debt_text += f\"   üìù {reason}\\n\"\n                debt_text += f\"   üìÖ To'lov sanasi: {payment_date}\\n\"\n                status_text = \"To'lanmagan\" if status == 'unpaid' else \"To'langan\"\n                debt_text += f\"   üìä Holat: {status_text}\\n\\n\"\n            \n            debt_text += f\"üí∏ Jami qarz: {total_debt} so'm\"\n            \n            # Split long messages\n            if len(debt_text) > 4000:\n                parts = [debt_text[i:i+4000] for i in range(0, len(debt_text), 4000)]\n                for part in parts:\n                    bot.send_message(message.chat.id, part)\n            else:\n                bot.send_message(message.chat.id, debt_text)\n                \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"‚ûï Yangi xodim qo'shish\")  \n    def start_add_employee(message):\n        \"\"\"Start adding new employee process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        set_user_state(message.chat.id, \"add_employee_name\")\n        admin_data[message.chat.id] = {}\n        \n        markup = types.ReplyKeyboardRemove()\n        bot.send_message(\n            message.chat.id,\n            \"üë§ Yangi xodimning ismini kiriting:\",\n            reply_markup=markup\n        )\n    \n    @bot.message_handler(func=lambda message: message.text == \"üë• Mijozlar so'rovlari\")\n    def show_customer_requests(message):\n        \"\"\"Show customer requests menu\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n            \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üåê Website dan kelgan so'rovlar\", \"ü§ñ Botdan kelgan so'rovlar\")\n        markup.add(\"üìã Barcha so'rovlar\", \"üìä So'rovlar statistikasi\")\n        markup.add(\"üîô Ortga\")\n        \n        # Get inquiry counts\n        try:\n            website_inquiries = len(get_customer_inquiries(source='website'))\n            bot_inquiries = len(get_customer_inquiries(source='telegram'))\n            pending_inquiries = len(get_customer_inquiries(status='pending'))\n        except:\n            website_inquiries = bot_inquiries = pending_inquiries = 0\n        \n        bot.send_message(\n            message.chat.id,\n            f\"üë• **Mijozlar so'rovlari bo'limi**\\n\\n\"\n            f\"üåê Website so'rovlari: {website_inquiries} ta\\n\"\n            f\"ü§ñ Bot so'rovlari: {bot_inquiries} ta\\n\"\n            f\"‚è≥ Javob kutayotgan: {pending_inquiries} ta\\n\\n\"\n            f\"Kerakli bo'limni tanlang:\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üåê Website dan kelgan so'rovlar\")\n    def show_website_inquiries(message):\n        \"\"\"Show website inquiries\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            inquiries = get_customer_inquiries(source='website')\n            \n            if not inquiries:\n                bot.send_message(\n                    message.chat.id,\n                    \"üåê **Website so'rovlari**\\n\\n\"\n                    \"Hozircha website dan so'rov kelmagan.\\n\\n\"\n                    \"Website integrasiyasi orqali mijozlar so'rovlari bu yerda ko'rinadi.\"\n                )\n                return\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            response_text = \"üåê **Website dan kelgan so'rovlar:**\\n\\n\"\n            \n            for inquiry in inquiries[:10]:  # Show first 10\n                inquiry_id, customer_name, customer_phone, customer_username, chat_id, inquiry_text, inquiry_type, location_lat, location_lon, location_address, status, admin_response, created_at, responded_at, source = inquiry\n                \n                status_emoji = \"‚è≥\" if status == \"pending\" else \"‚úÖ\"\n                response_text += f\"{status_emoji} **ID{inquiry_id}** - {customer_name}\\n\"\n                response_text += f\"üìß {inquiry_text[:50]}{'...' if len(inquiry_text) > 50 else ''}\\n\"\n                response_text += f\"üìÖ {created_at}\\n\\n\"\n                \n                markup.add(f\"üìã ID{inquiry_id} - Ko'rish va javob berish\")\n            \n            markup.add(\"üîÑ Yangilash\", \"üîô Ortga\")\n            \n            bot.send_message(message.chat.id, response_text, reply_markup=markup)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"ü§ñ Botdan kelgan so'rovlar\")\n    def show_bot_inquiries(message):\n        \"\"\"Show bot inquiries\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            inquiries = get_customer_inquiries(source='telegram')\n            \n            if not inquiries:\n                bot.send_message(\n                    message.chat.id,\n                    \"ü§ñ **Bot so'rovlari**\\n\\n\"\n                    \"Hozircha bot orqali so'rov kelmagan.\\n\\n\"\n                    \"Mijozlar botga yozganda ularning so'rovlari bu yerda ko'rinadi.\"\n                )\n                return\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            response_text = \"ü§ñ **Botdan kelgan so'rovlar:**\\n\\n\"\n            \n            for inquiry in inquiries[:10]:  # Show first 10\n                inquiry_id, customer_name, customer_phone, customer_username, chat_id, inquiry_text, inquiry_type, location_lat, location_lon, location_address, status, admin_response, created_at, responded_at, source = inquiry\n                \n                status_emoji = \"‚è≥\" if status == \"pending\" else \"‚úÖ\"\n                response_text += f\"{status_emoji} **ID{inquiry_id}** - {customer_name}\\n\"\n                if customer_username:\n                    response_text += f\"üë§ @{customer_username}\\n\"\n                response_text += f\"üìß {inquiry_text[:50]}{'...' if len(inquiry_text) > 50 else ''}\\n\"\n                response_text += f\"üìÖ {created_at}\\n\\n\"\n                \n                markup.add(f\"üìã ID{inquiry_id} - Ko'rish va javob berish\")\n            \n            markup.add(\"üîÑ Yangilash\", \"üîô Ortga\")\n            \n            bot.send_message(message.chat.id, response_text, reply_markup=markup)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üìã Barcha so'rovlar\")\n    def show_all_inquiries(message):\n        \"\"\"Show all inquiries\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            inquiries = get_customer_inquiries()\n            \n            if not inquiries:\n                bot.send_message(\n                    message.chat.id,\n                    \"üìã **Barcha so'rovlar**\\n\\n\"\n                    \"Hozircha hech qanday so'rov yo'q.\"\n                )\n                return\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            response_text = \"üìã **Barcha mijoz so'rovlari:**\\n\\n\"\n            \n            for inquiry in inquiries[:15]:  # Show first 15\n                inquiry_id, customer_name, customer_phone, customer_username, chat_id, inquiry_text, inquiry_type, location_lat, location_lon, location_address, status, admin_response, created_at, responded_at, source = inquiry\n                \n                status_emoji = \"‚è≥\" if status == \"pending\" else \"‚úÖ\"\n                source_emoji = \"üåê\" if source == \"website\" else \"ü§ñ\"\n                \n                response_text += f\"{status_emoji}{source_emoji} **ID{inquiry_id}** - {customer_name}\\n\"\n                response_text += f\"üìß {inquiry_text[:40]}{'...' if len(inquiry_text) > 40 else ''}\\n\"\n                response_text += f\"üìÖ {created_at}\\n\\n\"\n                \n                markup.add(f\"üìã ID{inquiry_id} - Ko'rish\")\n            \n            markup.add(\"üîÑ Yangilash\", \"üîô Ortga\")\n            \n            bot.send_message(message.chat.id, response_text, reply_markup=markup)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: \"ID\" in message.text and \"Ko'rish\" in message.text)\n    def view_inquiry_details(message):\n        \"\"\"View inquiry details and respond\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            # Extract inquiry ID\n            inquiry_id = int(message.text.split(\"ID\")[1].split(\" \")[0])\n            inquiry = get_inquiry_by_id(inquiry_id)\n            \n            if not inquiry:\n                bot.send_message(message.chat.id, \"‚ùå So'rov topilmadi.\")\n                return\n            \n            inquiry_id, customer_name, customer_phone, customer_username, chat_id, inquiry_text, inquiry_type, location_lat, location_lon, location_address, status, admin_response, created_at, responded_at, source = inquiry\n            \n            # Format inquiry details\n            source_name = \"Website\" if source == \"website\" else \"Telegram Bot\"\n            status_name = \"Javob berilgan\" if status == \"responded\" else \"Javob kutmoqda\"\n            \n            details_text = f\"\"\"\nüîç **So'rov tafsilotlari**\n\nüÜî ID: {inquiry_id}\nüë§ Mijoz: {customer_name}\nüìû Telefon: {customer_phone or 'Kiritilmagan'}\nüë§ Username: @{customer_username or 'Mavjud emas'}\nüì± Chat ID: {chat_id or 'Mavjud emas'}\nüåê Manba: {source_name}\nüìã Status: {status_name}\nüìÖ Kelgan vaqt: {created_at}\n\nüìù **So'rov matni:**\n{inquiry_text}\n\"\"\"\n            \n            if location_lat and location_lon:\n                details_text += f\"\\nüìç **Joylashuv:** {location_address or 'Mavjud'}\"\n            \n            if admin_response:\n                details_text += f\"\\n\\n‚úÖ **Admin javobi:**\\n{admin_response}\\nüìÖ Javob vaqti: {responded_at}\"\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            \n            if status == \"pending\":\n                markup.add(f\"üí¨ ID{inquiry_id}ga javob berish\")\n            \n            if source == \"telegram\" and chat_id:\n                markup.add(f\"üìû ID{inquiry_id}ga bevosita xabar yuborish\")\n            \n            markup.add(\"üîô Ortga\")\n            \n            # Store inquiry ID for response\n            set_user_state(message.chat.id, \"viewing_inquiry\", str(inquiry_id))\n            \n            bot.send_message(message.chat.id, details_text, reply_markup=markup)\n            \n            # Show location if available\n            if location_lat and location_lon:\n                bot.send_location(message.chat.id, location_lat, location_lon)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: \"javob berish\" in message.text and \"ID\" in message.text)\n    def start_inquiry_response(message):\n        \"\"\"Start responding to inquiry\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            # Extract inquiry ID\n            inquiry_id = int(message.text.split(\"ID\")[1].split(\"ga\")[0])\n            \n            set_user_state(message.chat.id, \"responding_to_inquiry\", str(inquiry_id))\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            markup.add(\"üîô Bekor qilish\")\n            \n            bot.send_message(\n                message.chat.id, \n                f\"üí¨ **ID{inquiry_id} so'roviga javob**\\n\\n\"\n                \"Mijozga jo'natmoqchi bo'lgan javobingizni yozing:\",\n                reply_markup=markup\n            )\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"responding_to_inquiry\")\n    def send_inquiry_response(message):\n        \"\"\"Send response to inquiry\"\"\"\n        if message.text == \"üîô Bekor qilish\":\n            clear_user_state(message.chat.id)\n            show_customer_requests(message)\n            return\n        \n        try:\n            state, inquiry_id = get_user_state(message.chat.id)\n            inquiry_id = int(inquiry_id)\n            \n            # Save response to database\n            inquiry_details = respond_to_inquiry(inquiry_id, message.text)\n            \n            if inquiry_details:\n                customer_name, chat_id, inquiry_text, customer_phone, source = inquiry_details\n                \n                # Send notification to customer if from Telegram\n                if source == \"telegram\" and chat_id:\n                    try:\n                        response_message = f\"\"\"\nüëã Assalomu alaykum {customer_name}!\n\nüí¨ **So'rovingizga javob:**\n{message.text}\n\nüìã **Sizning so'rovingiz:**\n{inquiry_text[:100]}{'...' if len(inquiry_text) > 100 else ''}\n\nü§ù Boshqa savollaringiz bo'lsa, bemalol yozing!\n\"\"\"\n                        bot.send_message(chat_id, response_message)\n                        notification = \"‚úÖ Mijozga Telegram orqali javob yuborildi!\"\n                    except:\n                        notification = \"‚ö†Ô∏è Javob saqlandi, lekin mijozga yuborib bo'lmadi.\"\n                else:\n                    notification = f\"‚úÖ Javob saqlandi! ({source} so'rovi)\"\n                \n                bot.send_message(\n                    message.chat.id,\n                    f\"‚úÖ **Javob muvaffaqiyatli yuborildi!**\\n\\n\"\n                    f\"üìã So'rov ID: {inquiry_id}\\n\"\n                    f\"üë§ Mijoz: {customer_name}\\n\"\n                    f\"üí¨ Javob: {message.text}\\n\\n\"\n                    f\"{notification}\"\n                )\n            else:\n                bot.send_message(message.chat.id, \"‚ùå So'rov topilmadi.\")\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n        \n        clear_user_state(message.chat.id)\n        show_customer_requests(message)\n    \n    @bot.message_handler(func=lambda message: message.text == \"üîÑ Yangilash\")\n    def refresh_current_menu(message):\n        \"\"\"Refresh current menu based on context\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            # Determine which menu to refresh based on recent messages\n            bot.send_message(message.chat.id, \"üîÑ Yangilanmoqda...\")\n            \n            # Always refresh the main customer requests menu\n            show_customer_requests(message)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Yangilashda xatolik: {str(e)}\")\n            show_customer_requests(message)\n\n    @bot.message_handler(func=lambda message: message.text == \"üîÑ Website yangilash\")\n    def refresh_website_inquiries(message):\n        \"\"\"Refresh website inquiries specifically\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            bot.send_message(message.chat.id, \"üîÑ Website so'rovlari yangilanmoqda...\")\n            show_website_inquiries(message)\n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üîÑ Bot yangilash\")\n    def refresh_bot_inquiries(message):\n        \"\"\"Refresh bot inquiries specifically\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            bot.send_message(message.chat.id, \"üîÑ Bot so'rovlari yangilanmoqda...\")\n            show_bot_inquiries(message)\n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üìã Faol suhbatlar\")\n    def show_active_chats(message):\n        \"\"\"Show active customer chats\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        # Get active customer chats from database\n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            # Get users in customer_chat state\n            cursor.execute(\"\"\"\n                SELECT chat_id, updated_at FROM user_states \n                WHERE state = 'customer_chat'\n                ORDER BY updated_at DESC\n            \"\"\")\n            \n            active_chats = cursor.fetchall()\n            conn.close()\n            \n            if not active_chats:\n                bot.send_message(message.chat.id, \"üì≠ Hozirda faol mijoz suhbatlari yo'q.\")\n                return\n            \n            chat_text = \"üìã Faol mijoz suhbatlari:\\n\\n\"\n            \n            for i, (chat_id, updated_at) in enumerate(active_chats, 1):\n                try:\n                    # Try to get user info\n                    user_info = bot.get_chat(chat_id)\n                    name = user_info.first_name or \"Noma'lum\"\n                    username = f\"@{user_info.username}\" if user_info.username else \"Username yo'q\"\n                except:\n                    name = \"Noma'lum mijoz\"\n                    username = \"\"\n                \n                chat_text += f\"{i}. üë§ {name} {username}\\n\"\n                chat_text += f\"   üÜî Chat ID: {chat_id}\\n\"\n                chat_text += f\"   üïê Oxirgi faollik: {updated_at[:16]}\\n\"\n                chat_text += f\"   üí¨ Javob: /reply {chat_id} [xabar]\\n\\n\"\n            \n            bot.send_message(message.chat.id, chat_text)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üìã Mijozning So'rovlari\")\n    def show_customer_calls(message):\n        \"\"\"Show customer requests history\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            # Get recent customer messages (last 24 hours)\n            yesterday = (datetime.now() - timedelta(days=1)).isoformat()\n            \n            cursor.execute(\"\"\"\n                SELECT from_chat_id, message_text, created_at FROM messages \n                WHERE to_chat_id = ? AND message_type IN ('customer_message', 'customer_start')\n                AND created_at > ?\n                ORDER BY created_at DESC\n                LIMIT 20\n            \"\"\", (ADMIN_CHAT_ID, yesterday))\n            \n            recent_messages = cursor.fetchall()\n            conn.close()\n            \n            if not recent_messages:\n                bot.send_message(message.chat.id, \"üì≠ So'nggi 24 soatda mijoz so'rovlari yo'q.\")\n                return\n            \n            calls_text = \"üìã So'nggi mijoz so'rovlari (24 soat):\\n\\n\"\n            \n            for i, (chat_id, message_text, created_at) in enumerate(recent_messages, 1):\n                try:\n                    # Try to get user info\n                    user_info = bot.get_chat(chat_id)\n                    name = user_info.first_name or \"Noma'lum\"\n                except:\n                    name = \"Noma'lum mijoz\"\n                \n                try:\n                    time_str = datetime.fromisoformat(created_at).strftime(\"%d.%m %H:%M\")\n                except:\n                    time_str = created_at[:16]\n                \n                calls_text += f\"{i}. üë§ {name} ({chat_id})\\n\"\n                calls_text += f\"   üïê {time_str}\\n\"\n                calls_text += f\"   üí¨ {message_text[:50]}{'...' if len(message_text) > 50 else ''}\\n\\n\"\n            \n            if len(calls_text) > 4000:\n                # Split long messages\n                parts = [calls_text[i:i+4000] for i in range(0, len(calls_text), 4000)]\n                for part in parts:\n                    bot.send_message(message.chat.id, part)\n            else:\n                bot.send_message(message.chat.id, calls_text)\n                \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n    \n    @bot.message_handler(func=lambda message: message.text == \"üìä Mijozlar statistikasi\")\n    def show_customer_stats(message):\n        \"\"\"Show customer statistics\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            # Get total customer messages\n            cursor.execute(\"\"\"\n                SELECT COUNT(*) FROM messages \n                WHERE to_chat_id = ? AND message_type = 'general'\n            \"\"\", (ADMIN_CHAT_ID,))\n            \n            total_messages = cursor.fetchone()[0]\n            \n            # Get active chats today\n            today = datetime.now().strftime('%Y-%m-%d')\n            cursor.execute(\"\"\"\n                SELECT COUNT(*) FROM user_states \n                WHERE state = 'customer_chat' AND updated_at LIKE ?\n            \"\"\", (f\"{today}%\",))\n            \n            today_chats = cursor.fetchone()[0]\n            \n            conn.close()\n            \n            stats_text = f\"\"\"\nüìä Mijozlar statistikasi\n\nüì© Jami xabarlar: {total_messages}\nüë• Bugungi suhbatlar: {today_chats}\nüïê Oxirgi yangilanish: {datetime.now().strftime('%H:%M')}\n\nüí° Barcha faol suhbatlarni ko'rish uchun \"üìã Faol suhbatlar\" tugmasini bosing.\n\"\"\"\n            \n            bot.send_message(message.chat.id, stats_text)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Statistika olishda xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"‚ûï Qarz qo'shish\")\n    def start_manual_debt_add(message):\n        \"\"\"Start manual debt addition process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        for employee_name in EMPLOYEES.keys():\n            markup.add(employee_name)\n        markup.add(\"üë• Boshqalar\")\n        markup.add(\"üîô Bekor qilish\")\n        \n        set_user_state(message.chat.id, \"select_debt_employee\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üë• Kimga qarz qo'shmoqchisiz?\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"select_debt_employee\")\n    def select_debt_employee(message):\n        \"\"\"Select employee for debt\"\"\"\n        if message.text == \"üîô Bekor qilish\":\n            clear_user_state(message.chat.id)\n            show_debts_menu(message)\n            return\n        \n        if message.text in EMPLOYEES:\n            admin_data[message.chat.id] = {\"employee\": message.text, \"employee_type\": \"staff\"}\n            set_user_state(message.chat.id, \"manual_debt_amount\")\n            \n            markup = types.ReplyKeyboardRemove()\n            bot.send_message(\n                message.chat.id,\n                \"üí∞ Qarz miqdorini kiriting (so'mda):\",\n                reply_markup=markup\n            )\n        elif message.text == \"üë• Boshqalar\":\n            admin_data[message.chat.id] = {\"employee_type\": \"other\"}\n            set_user_state(message.chat.id, \"other_debt_name\")\n            \n            markup = types.ReplyKeyboardRemove()\n            bot.send_message(\n                message.chat.id,\n                \"üë§ Qarzdorning ismini kiriting:\",\n                reply_markup=markup\n            )\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Iltimos, ro'yxatdan variant tanlang!\")\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"manual_debt_amount\")\n    def get_manual_debt_amount(message):\n        \"\"\"Get manual debt amount\"\"\"\n        try:\n            amount = float(message.text.replace(\" \", \"\").replace(\",\", \"\"))\n            \n            # Ensure admin_data exists for this user\n            if message.chat.id not in admin_data:\n                admin_data[message.chat.id] = {}\n            \n            admin_data[message.chat.id][\"amount\"] = amount\n            set_user_state(message.chat.id, \"manual_debt_reason\")\n            \n            bot.send_message(message.chat.id, \"üìù Qarz sababini kiriting:\")\n            \n        except ValueError:\n            bot.send_message(message.chat.id, \"‚ùå Noto'g'ri format. Raqam kiriting:\")\n        except KeyError:\n            bot.send_message(message.chat.id, \"‚ùå Sessiya tugagan. Qaytadan boshlang.\")\n            clear_user_state(message.chat.id)\n            show_debts_menu(message)\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"manual_debt_reason\")\n    def get_manual_debt_reason(message):\n        \"\"\"Get manual debt reason\"\"\"\n        try:\n            # Ensure admin_data exists for this user\n            if message.chat.id not in admin_data:\n                admin_data[message.chat.id] = {}\n            \n            admin_data[message.chat.id][\"reason\"] = message.text\n            set_user_state(message.chat.id, \"manual_debt_date\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"üìÖ To'lov sanasini kiriting (masalan: 2025-01-15):\"\n            )\n        except KeyError:\n            bot.send_message(message.chat.id, \"‚ùå Sessiya tugagan. Qaytadan boshlang.\")\n            clear_user_state(message.chat.id)\n            show_debts_menu(message)\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"manual_debt_date\")\n    def get_manual_debt_date(message):\n        \"\"\"Get manual debt date and create debt\"\"\"\n        try:\n            # Ensure admin_data exists for this user\n            if message.chat.id not in admin_data:\n                bot.send_message(message.chat.id, \"‚ùå Sessiya tugagan. Qaytadan boshlang.\")\n                clear_user_state(message.chat.id)\n                show_debts_menu(message)\n                return\n            \n            data = admin_data[message.chat.id]\n            employee_name = data[\"employee\"]\n        \n            # Handle different employee types\n            if data[\"employee_type\"] == \"staff\":\n                employee_chat_id = EMPLOYEES[employee_name]\n            else:\n                employee_chat_id = 0  # For non-employees\n        \n            # Add debt record\n            add_debt(\n                employee_name=employee_name,\n                employee_chat_id=employee_chat_id,\n                task_id=None,\n                amount=data[\"amount\"],\n                reason=data[\"reason\"],\n                payment_date=message.text\n            )\n            \n            bot.send_message(\n                message.chat.id,\n                f\"‚úÖ Qarz qo'shildi!\\n\\n\"\n                f\"üë§ Xodim: {employee_name}\\n\"\n                f\"üí∞ Miqdor: {data['amount']} so'm\\n\"\n                f\"üìù Sabab: {data['reason']}\\n\"\n                f\"üìÖ To'lov sanasi: {message.text}\"\n            )\n            \n            # Notify employee (only if it's a staff member)\n            if data[\"employee_type\"] == \"staff\":\n                try:\n                    bot.send_message(\n                        employee_chat_id,\n                        f\"‚ö†Ô∏è Sizga yangi qarz qo'shildi:\\n\\n\"\n                        f\"üí∞ Miqdor: {data['amount']} so'm\\n\"\n                        f\"üìù Sabab: {data['reason']}\\n\"\n                        f\"üìÖ To'lov sanasi: {message.text}\"\n                    )\n                except:\n                    pass\n        \n            clear_user_state(message.chat.id)\n            admin_data.pop(message.chat.id, None)\n            show_debts_menu(message)\n        \n        except KeyError as e:\n            bot.send_message(message.chat.id, f\"‚ùå Sessiya xatoligi: {str(e)}\")\n            clear_user_state(message.chat.id)\n            show_debts_menu(message)\n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n            clear_user_state(message.chat.id)\n            show_debts_menu(message)\n\n    @bot.message_handler(func=lambda message: message.text == \"‚úÖ Qarzni to'lash\")\n    def start_pay_debt(message):\n        \"\"\"Start debt payment process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            debts = get_debts()\n            \n            if not debts:\n                bot.send_message(message.chat.id, \"‚úÖ To'lanadigan qarzlar yo'q!\")\n                return\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            \n            for debt in debts[:10]:  # Show first 10 debts\n                debt_id, employee_name, employee_chat_id, task_id, amount, reason, payment_date, created_at, status = debt\n                markup.add(f\"üí∏ ID:{debt_id} - {employee_name} ({amount} so'm)\")\n            \n            markup.add(\"üîô Bekor qilish\")\n            \n            set_user_state(message.chat.id, \"select_debt_to_pay\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"‚úÖ Qaysi qarzni to'langanini belgilaysiz?\",\n                reply_markup=markup\n            )\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"select_debt_to_pay\")\n    def pay_selected_debt(message):\n        \"\"\"Pay selected debt\"\"\"\n        if message.text == \"üîô Bekor qilish\":\n            clear_user_state(message.chat.id)\n            show_debts_menu(message)\n            return\n        \n        try:\n            # Extract debt ID from message\n            if \"ID:\" in message.text:\n                debt_id = int(message.text.split(\"ID:\")[1].split(\" \")[0])\n                \n                # Update debt status to paid\n                from database import DATABASE_PATH\n                import sqlite3\n                \n                conn = sqlite3.connect(DATABASE_PATH)\n                cursor = conn.cursor()\n                \n                cursor.execute(\"\"\"\n                    UPDATE debts SET status = 'paid' WHERE id = ?\n                \"\"\", (debt_id,))\n                \n                # Get debt info\n                cursor.execute(\"\"\"\n                    SELECT employee_name, employee_chat_id, amount, reason \n                    FROM debts WHERE id = ?\n                \"\"\", (debt_id,))\n                \n                debt_info = cursor.fetchone()\n                conn.commit()\n                conn.close()\n                \n                if debt_info:\n                    employee_name, employee_chat_id, amount, reason = debt_info\n                    \n                    bot.send_message(\n                        message.chat.id,\n                        f\"‚úÖ Qarz to'langanini belgilandi!\\n\\n\"\n                        f\"üÜî Qarz ID: {debt_id}\\n\"\n                        f\"üë§ Xodim: {employee_name}\\n\"\n                        f\"üí∞ Miqdor: {amount} so'm\\n\"\n                        f\"üìù Sabab: {reason}\"\n                    )\n                    \n                    # Notify employee\n                    try:\n                        bot.send_message(\n                            employee_chat_id,\n                            f\"‚úÖ Sizning qarzingiz to'langanini belgilandi:\\n\\n\"\n                            f\"üí∞ Miqdor: {amount} so'm\\n\"\n                            f\"üìù Sabab: {reason}\"\n                        )\n                    except:\n                        pass\n                else:\n                    bot.send_message(message.chat.id, \"‚ùå Qarz topilmadi.\")\n            else:\n                bot.send_message(message.chat.id, \"‚ùå Noto'g'ri format.\")\n                \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n        \n        clear_user_state(message.chat.id)\n        show_debts_menu(message)\n\n    @bot.message_handler(func=lambda message: message.text == \"‚ùå Qarzni o'chirish\")\n    def start_delete_debt(message):\n        \"\"\"Start debt deletion process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            debts = get_debts()\n            \n            if not debts:\n                bot.send_message(message.chat.id, \"‚úÖ O'chiriladigan qarzlar yo'q!\")\n                return\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            \n            for debt in debts[:10]:  # Show first 10 debts\n                debt_id, employee_name, employee_chat_id, task_id, amount, reason, payment_date, created_at, status = debt\n                markup.add(f\"üóë ID:{debt_id} - {employee_name} ({amount} so'm)\")\n            \n            markup.add(\"üîô Bekor qilish\")\n            \n            set_user_state(message.chat.id, \"select_debt_to_delete\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"üóë Qaysi qarzni o'chirmoqchisiz?\",\n                reply_markup=markup\n            )\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"select_debt_to_delete\")\n    def delete_selected_debt(message):\n        \"\"\"Delete selected debt\"\"\"\n        if message.text == \"üîô Bekor qilish\":\n            clear_user_state(message.chat.id)\n            show_debts_menu(message)\n            return\n        \n        try:\n            # Extract debt ID from message\n            if \"ID:\" in message.text:\n                debt_id = int(message.text.split(\"ID:\")[1].split(\" \")[0])\n                \n                # Delete debt\n                from database import DATABASE_PATH\n                import sqlite3\n                \n                conn = sqlite3.connect(DATABASE_PATH)\n                cursor = conn.cursor()\n                \n                # Get debt info before deleting\n                cursor.execute(\"\"\"\n                    SELECT employee_name, amount, reason \n                    FROM debts WHERE id = ?\n                \"\"\", (debt_id,))\n                \n                debt_info = cursor.fetchone()\n                \n                if debt_info:\n                    cursor.execute(\"DELETE FROM debts WHERE id = ?\", (debt_id,))\n                    conn.commit()\n                    \n                    employee_name, amount, reason = debt_info\n                    \n                    bot.send_message(\n                        message.chat.id,\n                        f\"üóë Qarz o'chirildi!\\n\\n\"\n                        f\"üÜî Qarz ID: {debt_id}\\n\"\n                        f\"üë§ Xodim: {employee_name}\\n\"\n                        f\"üí∞ Miqdor: {amount} so'm\\n\"\n                        f\"üìù Sabab: {reason}\"\n                    )\n                else:\n                    bot.send_message(message.chat.id, \"‚ùå Qarz topilmadi.\")\n                \n                conn.close()\n            else:\n                bot.send_message(message.chat.id, \"‚ùå Noto'g'ri format.\")\n                \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n        \n        clear_user_state(message.chat.id)\n        show_debts_menu(message)\n\n    @bot.message_handler(func=lambda message: message.text == \"üìä Qarzlar hisoboti\")\n    def generate_debts_report(message):\n        \"\"\"Generate debts Excel report\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        bot.send_message(message.chat.id, \"üìä Qarzlar hisoboti tayyorlanmoqda...\")\n        \n        try:\n            from utils import generate_debts_report_excel\n            filepath = generate_debts_report_excel()\n            \n            if filepath and os.path.exists(filepath):\n                with open(filepath, 'rb') as f:\n                    bot.send_document(\n                        message.chat.id,\n                        f,\n                        caption=\"üìä Qarzlar hisoboti (Excel)\"\n                    )\n                # Clean up file\n                os.remove(filepath)\n            else:\n                bot.send_message(message.chat.id, \"‚ùå Hisobot yaratishda xatolik yuz berdi.\")\n                \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    # NEW EMPLOYEE ADDITION HANDLERS\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"add_employee_name\")\n    def get_employee_name(message):\n        \"\"\"Get new employee name\"\"\"\n        admin_data[message.chat.id][\"name\"] = message.text\n        set_user_state(message.chat.id, \"add_employee_id\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üÜî Xodimning Telegram ID sini kiriting:\"\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"add_employee_id\")\n    def get_employee_id(message):\n        \"\"\"Get new employee Telegram ID and add to system\"\"\"\n        try:\n            chat_id = int(message.text)\n            name = admin_data[message.chat.id][\"name\"]\n            \n            # Update config file\n            import config\n            \n            # Read current config\n            with open('config.py', 'r', encoding='utf-8') as f:\n                config_content = f.read()\n            \n            # Find EMPLOYEES dictionary and add new employee\n            if \"EMPLOYEES = {\" in config_content:\n                # Add new employee to the dictionary\n                new_employee_line = f'    \"{name}\": {chat_id},'\n                \n                # Find the closing brace of EMPLOYEES\n                employees_start = config_content.find(\"EMPLOYEES = {\")\n                employees_end = config_content.find(\"}\", employees_start)\n                \n                # Insert new employee before closing brace\n                new_config = (config_content[:employees_end] + \n                             new_employee_line + \"\\n\" + \n                             config_content[employees_end:])\n                \n                # Write updated config\n                with open('config.py', 'w', encoding='utf-8') as f:\n                    f.write(new_config)\n                \n                # Update runtime EMPLOYEES dictionary and reload config\n                EMPLOYEES[name] = chat_id\n                \n                # Reload the config module to get updated EMPLOYEES\n                import importlib\n                import config\n                importlib.reload(config)\n                \n                bot.send_message(\n                    message.chat.id,\n                    f\"‚úÖ Yangi xodim qo'shildi!\\n\\n\"\n                    f\"üë§ Ism: {name}\\n\"\n                    f\"üÜî Telegram ID: {chat_id}\\n\\n\"\n                    f\"‚ö†Ô∏è O'zgarishlar darhol kuchga kiradi.\"\n                )\n                \n                # Notify new employee\n                try:\n                    bot.send_message(\n                        chat_id,\n                        f\"üéâ Salom {name}!\\n\\n\"\n                        f\"Siz tizimga xodim sifatida qo'shildingiz.\\n\"\n                        f\"Botdan foydalanish uchun 'üë§ Xodim' tugmasini bosing.\"\n                    )\n                except:\n                    bot.send_message(\n                        message.chat.id,\n                        f\"‚ö†Ô∏è Xodim qo'shildi, lekin xodimga xabar yuborib bo'lmadi.\"\n                    )\n            else:\n                bot.send_message(message.chat.id, \"‚ùå Config faylidagi EMPLOYEES bo'limini o'qib bo'lmadi.\")\n                \n        except ValueError:\n            bot.send_message(message.chat.id, \"‚ùå Noto'g'ri ID format. Raqam kiriting:\")\n            return\n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n        \n        clear_user_state(message.chat.id)\n        admin_data.pop(message.chat.id, None)\n        show_admin_panel(message)\n\n    # OTHER DEBT HANDLERS\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"other_debt_name\")\n    def get_other_debt_name(message):\n        \"\"\"Get name for non-employee debt\"\"\"\n        admin_data[message.chat.id][\"employee\"] = message.text\n        set_user_state(message.chat.id, \"manual_debt_amount\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üí∞ Qarz miqdorini kiriting (so'mda):\"\n        )\n\n    # DATA MANAGEMENT HANDLERS\n    @bot.message_handler(func=lambda message: message.text == \"‚ûï Ma'lumot qo'shish\")\n    def start_add_data(message):\n        \"\"\"Start adding new data process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìù Vazifa qo'shish\", \"üë§ Xodim qo'shish\")\n        markup.add(\"üí∏ Qarz qo'shish\", \"üí¨ Xabar qo'shish\")\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"‚ûï Qanday ma'lumot qo'shmoqchisiz?\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üëÅ Barcha ma'lumotlar\")\n    def show_all_data(message):\n        \"\"\"Show all data summary\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            # Get tasks count\n            cursor.execute(\"SELECT COUNT(*) FROM tasks\")\n            tasks_count = cursor.fetchone()[0]\n            \n            # Get debts count\n            cursor.execute(\"SELECT COUNT(*) FROM debts\")\n            debts_count = cursor.fetchone()[0]\n            \n            # Get messages count\n            cursor.execute(\"SELECT COUNT(*) FROM messages\")\n            messages_count = cursor.fetchone()[0]\n            \n            # Get user states count\n            cursor.execute(\"SELECT COUNT(*) FROM user_states\")\n            states_count = cursor.fetchone()[0]\n            \n            conn.close()\n            \n            data_summary = f\"\"\"\nüìä Barcha ma'lumotlar statistikasi\n\nüìù Vazifalar: {tasks_count}\nüí∏ Qarzlar: {debts_count}\nüí¨ Xabarlar: {messages_count}\nüë• Xodimlar: {len(EMPLOYEES)}\nüîÑ Faol sessiyalar: {states_count}\n\nüïê Oxirgi yangilanish: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\"\"\"\n            \n            bot.send_message(message.chat.id, data_summary)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Ma'lumotlarni olishda xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üìä Statistika\")\n    def show_detailed_statistics(message):\n        \"\"\"Show detailed system statistics\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            # Tasks statistics\n            cursor.execute(\"SELECT status, COUNT(*) FROM tasks GROUP BY status\")\n            task_stats = cursor.fetchall()\n            \n            cursor.execute(\"SELECT SUM(payment_amount) FROM tasks WHERE payment_amount IS NOT NULL\")\n            total_payments = cursor.fetchone()[0] or 0\n            \n            cursor.execute(\"SELECT SUM(received_amount) FROM tasks WHERE received_amount IS NOT NULL\")\n            total_received = cursor.fetchone()[0] or 0\n            \n            # Debts statistics\n            cursor.execute(\"SELECT COUNT(*), SUM(amount) FROM debts\")\n            debt_count, total_debt = cursor.fetchone()\n            total_debt = total_debt or 0\n            \n            # Employee locations statistics\n            cursor.execute(\"SELECT COUNT(*) FROM employee_locations WHERE created_at > datetime('now', '-24 hours')\")\n            recent_locations = cursor.fetchone()[0]\n            \n            # Top employees by completed tasks\n            cursor.execute(\"\"\"\n                SELECT assigned_to, COUNT(*) as completed_count \n                FROM tasks \n                WHERE status = 'completed' \n                GROUP BY assigned_to \n                ORDER BY completed_count DESC \n                LIMIT 5\n            \"\"\")\n            top_employees = cursor.fetchall()\n            \n            conn.close()\n            \n            # Format task statistics\n            task_status_text = \"\"\n            for status, count in task_stats:\n                emoji = {\"pending\": \"‚è≥\", \"in_progress\": \"üîÑ\", \"completed\": \"‚úÖ\"}.get(status, \"‚ùì\")\n                task_status_text += f\"{emoji} {status.title()}: {count}\\n\"\n            \n            # Format top employees\n            top_emp_text = \"\"\n            for i, (emp_name, count) in enumerate(top_employees, 1):\n                top_emp_text += f\"{i}. {emp_name}: {count} ta\\n\"\n            \n            stats_text = f\"\"\"\nüìä Batafsil Tizim Statistikasi\n\nüìù VAZIFALAR:\n{task_status_text}\nüí∞ Umumiy to'lov: {total_payments:,.0f} so'm\nüíµ Olingan to'lov: {total_received:,.0f} so'm\nüí∏ To'lanmagan: {total_payments - total_received:,.0f} so'm\n\nüí≥ QARZLAR:\nüî¢ Umumiy qarzlar: {debt_count} ta\nüí∞ Umumiy qarz miqdori: {total_debt:,.0f} so'm\n\nüìç LOKATSIYA KUZATUVI:\nüìä So'nggi 24 soat: {recent_locations} ta lokatsiya\n\nüèÜ ENG FAOL XODIMLAR:\n{top_emp_text}\n\nüë• Ro'yxatdagi xodimlar: {len(EMPLOYEES)} ta\n\nüïê Hisoblangan vaqt: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\"\"\"\n            \n            bot.send_message(message.chat.id, stats_text)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Statistika olishda xatolik: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"‚úèÔ∏è Ma'lumot tahrirlash\")\n    def start_edit_data(message):\n        \"\"\"Start data editing process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìù Vazifa tahrirlash\", \"üë§ Xodim ma'lumotlari\")\n        markup.add(\"üí∏ Qarz tahrirlash\", \"üí¨ Xabar tahrirlash\")\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"‚úèÔ∏è Qanday ma'lumotni tahrirlashni xohlaysiz?\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üì§ Ma'lumot eksport\")\n    def start_data_export(message):\n        \"\"\"Start data export process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìä Barcha ma'lumotlar\", \"üìù Faqat vazifalar\")\n        markup.add(\"üí∏ Faqat qarzlar\", \"üìç Lokatsiya tarixi\")\n        markup.add(\"üë• Xodimlar ma'lumoti\", \"üí¨ Xabarlar tarixi\")\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üì§ Qanday ma'lumotlarni eksport qilmoqchisiz?\\n\\n\"\n            \"Excel formatida professional hisobot tayyorlanadi.\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üîÑ Ma'lumot import\")\n    def start_data_import(message):\n        \"\"\"Start data import process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìù Vazifalar import\", \"üë§ Xodimlar import\")\n        markup.add(\"üí∏ Qarzlar import\", \"üìã Template yuklab olish\")\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üîÑ Ma'lumot Import Tizimi\\n\\n\"\n            \"Excel fayldan ma'lumotlarni import qilish uchun:\\n\"\n            \"1. Template faylni yuklab oling\\n\"  \n            \"2. Ma'lumotlarni to'ldiring\\n\"\n            \"3. Faylni yuklang\\n\\n\"\n            \"Qanday ma'lumot import qilmoqchisiz?\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üßπ Ma'lumot tozalash\")\n    def start_data_cleanup(message):\n        \"\"\"Start data cleanup process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üóë Eski vazifalarni o'chirish\", \"üí∏ Yopilgan qarzlarni tozalash\")\n        markup.add(\"üìç Eski lokatsiyalarni o'chirish\", \"üí¨ Eski xabarlarni o'chirish\")\n        markup.add(\"üîÑ Nofaol sessiyalarni tozalash\", \"‚ö†Ô∏è Barcha ma'lumotlarni o'chirish\")\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üßπ Ma'lumot Tozalash Tizimi\\n\\n\"\n            \"‚ö†Ô∏è DIQQAT: Bu amallar qaytarib bo'lmaydi!\\n\\n\"\n            \"Qanday ma'lumotlarni tozalamoqchisiz?\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üîç Ma'lumot qidirish\")\n    def start_data_search(message):\n        \"\"\"Start data search process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üîç Vazifa qidirish\", \"üë§ Xodim qidirish\")\n        markup.add(\"üí∏ Qarz qidirish\", \"üìÖ Sana bo'yicha qidirish\")\n        markup.add(\"üí∞ Summa bo'yicha qidirish\", \"üìç Lokatsiya qidirish\")\n        markup.add(\"üîô Bekor qilish\")\n        \n        set_user_state(message.chat.id, \"search_data_type\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üîç Ma'lumot Qidirish Tizimi\\n\\n\"\n            \"Qanday ma'lumot qidirmoqchisiz?\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"search_data_type\")\n    def handle_search_type_selection(message):\n        \"\"\"Handle data search type selection\"\"\"\n        if message.text == \"üîô Bekor qilish\":\n            clear_user_state(message.chat.id)\n            show_data_menu(message)\n            return\n        \n        search_types = {\n            \"üîç Vazifa qidirish\": \"task_search\",\n            \"üë§ Xodim qidirish\": \"employee_search\", \n            \"üí∏ Qarz qidirish\": \"debt_search\",\n            \"üìÖ Sana bo'yicha qidirish\": \"date_search\",\n            \"üí∞ Summa bo'yicha qidirish\": \"amount_search\",\n            \"üìç Lokatsiya qidirish\": \"location_search\"\n        }\n        \n        if message.text in search_types:\n            search_type = search_types[message.text]\n            set_user_state(message.chat.id, f\"search_{search_type}\")\n            \n            prompts = {\n                \"task_search\": \"üîç Vazifa ID, tavsif yoki xodim nomini kiriting:\",\n                \"employee_search\": \"üë§ Xodim nomini kiriting:\",\n                \"debt_search\": \"üí∏ Xodim nomi yoki qarz sababini kiriting:\",\n                \"date_search\": \"üìÖ Sanani kiriting (DD.MM.YYYY formatida):\",\n                \"amount_search\": \"üí∞ Summani kiriting (so'mda):\",\n                \"location_search\": \"üìç Joylashuv ma'lumotini kiriting:\"\n            }\n            \n            bot.send_message(\n                message.chat.id,\n                prompts[search_type],\n                reply_markup=types.ReplyKeyboardRemove()\n            )\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Noto'g'ri tanlov. Qaytadan tanlang.\")\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0].startswith(\"search_\"))\n    def handle_search_query(message):\n        \"\"\"Handle search queries\"\"\"\n        state = get_user_state(message.chat.id)[0]\n        query = message.text.strip()\n        \n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            results = []\n            \n            if state == \"search_task_search\":\n                cursor.execute(\"\"\"\n                    SELECT id, description, assigned_to, status, created_at, payment_amount\n                    FROM tasks \n                    WHERE id LIKE ? OR description LIKE ? OR assigned_to LIKE ?\n                \"\"\", (f\"%{query}%\", f\"%{query}%\", f\"%{query}%\"))\n                results = cursor.fetchall()\n                \n                if results:\n                    result_text = \"üîç Vazifa qidiruv natijalari:\\n\\n\"\n                    for task_id, desc, assigned_to, status, created_at, payment in results:\n                        emoji = {\"pending\": \"‚è≥\", \"in_progress\": \"üîÑ\", \"completed\": \"‚úÖ\"}.get(status, \"‚ùì\")\n                        result_text += f\"{emoji} ID: {task_id}\\n\"\n                        result_text += f\"üìù {desc[:50]}{'...' if len(desc) > 50 else ''}\\n\"\n                        result_text += f\"üë§ {assigned_to} | üí∞ {payment or 0:,.0f} so'm\\n\\n\"\n                else:\n                    result_text = \"‚ùå Hech qanday vazifa topilmadi.\"\n            \n            elif state == \"search_employee_search\":\n                cursor.execute(\"\"\"\n                    SELECT COUNT(*) as task_count, \n                           SUM(CASE WHEN status='completed' THEN 1 ELSE 0 END) as completed,\n                           SUM(payment_amount) as total_payment\n                    FROM tasks \n                    WHERE assigned_to LIKE ?\n                \"\"\", (f\"%{query}%\",))\n                emp_stats = cursor.fetchone()\n                \n                if emp_stats and emp_stats[0] > 0:\n                    task_count, completed, total_payment = emp_stats\n                    result_text = f\"üë§ {query} xodimi haqida ma'lumot:\\n\\n\"\n                    result_text += f\"üìù Umumiy vazifalar: {task_count}\\n\"\n                    result_text += f\"‚úÖ Bajarilgan: {completed}\\n\"\n                    result_text += f\"üí∞ Umumiy to'lov: {total_payment or 0:,.0f} so'm\"\n                else:\n                    result_text = \"‚ùå Bunday xodim topilmadi.\"\n            \n            elif state == \"search_debt_search\":\n                cursor.execute(\"\"\"\n                    SELECT employee_name, amount, reason, payment_date, created_at\n                    FROM debts \n                    WHERE employee_name LIKE ? OR reason LIKE ?\n                \"\"\", (f\"%{query}%\", f\"%{query}%\"))\n                results = cursor.fetchall()\n                \n                if results:\n                    result_text = \"üí∏ Qarz qidiruv natijalari:\\n\\n\"\n                    for emp_name, amount, reason, pay_date, created in results:\n                        result_text += f\"üë§ {emp_name}\\n\"\n                        result_text += f\"üí∞ {amount:,.0f} so'm\\n\"\n                        result_text += f\"üìù {reason}\\n\"\n                        result_text += f\"üìÖ {pay_date}\\n\\n\"\n                else:\n                    result_text = \"‚ùå Hech qanday qarz topilmadi.\"\n            else:\n                result_text = \"‚ùå Qidiruv turi tanilmadi.\"\n            \n            conn.close()\n            \n            if len(result_text) > 4000:\n                parts = [result_text[i:i+4000] for i in range(0, len(result_text), 4000)]\n                for part in parts:\n                    bot.send_message(message.chat.id, part)\n            else:\n                bot.send_message(message.chat.id, result_text)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Qidirishda xatolik: {str(e)}\")\n        \n        clear_user_state(message.chat.id)\n        show_data_menu(message)\n\n    # EXPORT HANDLERS\n    @bot.message_handler(func=lambda message: message.text in [\n        \"üìä Barcha ma'lumotlar\", \"üìù Faqat vazifalar\", \"üí∏ Faqat qarzlar\", \n        \"üìç Lokatsiya tarixi\", \"üë• Xodimlar ma'lumoti\", \"üí¨ Xabarlar tarixi\"\n    ])\n    def handle_data_export(message):\n        \"\"\"Handle data export requests\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        export_type = message.text\n        \n        bot.send_message(message.chat.id, f\"üì§ {export_type} eksport qilinmoqda...\")\n        \n        try:\n            from utils import generate_custom_export\n            filepath = generate_custom_export(export_type)\n            \n            if filepath and os.path.exists(filepath):\n                with open(filepath, 'rb') as f:\n                    bot.send_document(\n                        message.chat.id,\n                        f,\n                        caption=f\"üìä {export_type} - Excel hisobot\"\n                    )\n                # Clean up file\n                os.remove(filepath)\n                bot.send_message(message.chat.id, \"‚úÖ Eksport muvaffaqiyatli yakunlandi!\")\n            else:\n                bot.send_message(message.chat.id, \"‚ùå Eksport qilishda xatolik yuz berdi.\")\n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Eksport xatoligi: {str(e)}\")\n        \n        show_data_menu(message)\n\n    # EMPLOYEE TRACKING HANDLERS\n    @bot.message_handler(func=lambda message: message.text == \"üìç Xodimlarni kuzatish\")\n    def start_employee_tracking(message):\n        \"\"\"Start employee tracking process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        # Reload config to get latest employee list\n        import importlib\n        import config\n        importlib.reload(config)\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        for employee_name in config.EMPLOYEES.keys():\n            markup.add(employee_name)\n        markup.add(\"üåç Barchani kuzatish\", \"üìä Kuzatuv tarixi\")\n        markup.add(\"üîô Ortga\")\n        \n        set_user_state(message.chat.id, \"select_employee_track\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üìç Xodimlarni kuzatish tizimi\\n\\n\"\n            \"üë§ Xodim tanlash - aynan bir xodimni kuzatish\\n\"\n            \"üåç Barchani kuzatish - barcha xodimlardan lokatsiya so'rash\\n\"\n            \"üìä Kuzatuv tarixi - oxirgi lokatsiyalarni ko'rish\\n\\n\"\n            \"‚ö†Ô∏è Xodimlar bu so'rovdan habardor bo'lmaydi\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"select_employee_track\")\n    def handle_employee_tracking_selection(message):\n        \"\"\"Handle employee tracking selection\"\"\"\n        if message.text == \"üîô Ortga\":\n            clear_user_state(message.chat.id)\n            show_admin_panel(message)\n            return\n        \n        # Reload config to get latest employee list\n        import importlib\n        import config\n        importlib.reload(config)\n        \n        if message.text == \"üåç Barchani kuzatish\":\n            # Request location from all employees\n            success_count = 0\n            total_count = len(config.EMPLOYEES)\n            \n            for employee_name, employee_chat_id in config.EMPLOYEES.items():\n                try:\n                    # Send silent location request\n                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)\n                    location_btn = types.KeyboardButton(\"üìç Joriy joylashuvim\", request_location=True)\n                    markup.add(location_btn)\n                    \n                    bot.send_message(\n                        employee_chat_id,\n                        \"üìç Vazifa uchun joriy joylashuvingizni yuboring:\",\n                        reply_markup=markup\n                    )\n                    success_count += 1\n                except:\n                    pass\n            \n            bot.send_message(\n                message.chat.id,\n                f\"üìç Lokatsiya so'rovi yuborildi!\\n\\n\"\n                f\"‚úÖ Muvaffaqiyatli: {success_count}/{total_count} xodim\\n\"\n                f\"‚è± Javoblar kutilmoqda...\"\n            )\n            \n        elif message.text == \"üìä Kuzatuv tarixi\":\n            show_location_history(message)\n            \n        elif message.text in config.EMPLOYEES:\n            # Request location from specific employee\n            employee_chat_id = config.EMPLOYEES[message.text]\n            \n            try:\n                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)\n                location_btn = types.KeyboardButton(\"üìç Joriy joylashuvim\", request_location=True)\n                markup.add(location_btn)\n                \n                bot.send_message(\n                    employee_chat_id,\n                    \"üìç Vazifa uchun joriy joylashuvingizni yuboring:\",\n                    reply_markup=markup\n                )\n                \n                bot.send_message(\n                    message.chat.id,\n                    f\"üìç {message.text} xodimiga lokatsiya so'rovi yuborildi!\\n\"\n                    f\"‚è± Javob kutilmoqda...\"\n                )\n                \n            except Exception as e:\n                bot.send_message(\n                    message.chat.id,\n                    f\"‚ùå {message.text} xodimiga xabar yuborishda xatolik: {str(e)}\"\n                )\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Noto'g'ri tanlov. Qaytadan tanlang.\")\n            return\n        \n        clear_user_state(message.chat.id)\n        show_admin_panel(message)\n\n    def show_location_history(message):\n        \"\"\"Show recent employee locations\"\"\"\n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            # Get recent locations (last 24 hours)\n            cursor.execute(\"\"\"\n                SELECT employee_name, latitude, longitude, created_at, location_type\n                FROM employee_locations \n                WHERE created_at > datetime('now', '-1 day')\n                ORDER BY created_at DESC\n                LIMIT 20\n            \"\"\")\n            \n            locations = cursor.fetchall()\n            conn.close()\n            \n            if not locations:\n                bot.send_message(message.chat.id, \"üìç So'nggi 24 soatda lokatsiya ma'lumotlari topilmadi.\")\n                return\n            \n            history_text = \"üìä So'nggi 24 soat lokatsiya tarixi:\\n\\n\"\n            \n            for i, (emp_name, lat, lon, created_at, loc_type) in enumerate(locations, 1):\n                try:\n                    time_str = datetime.fromisoformat(created_at).strftime(\"%d.%m %H:%M\")\n                except:\n                    time_str = created_at\n                \n                history_text += f\"{i}. üë§ {emp_name}\\n\"\n                history_text += f\"   üìç {lat:.6f}, {lon:.6f}\\n\"\n                history_text += f\"   üïê {time_str}\\n\\n\"\n            \n            # Send Google Maps links for recent locations\n            if locations:\n                latest_locations = {}\n                for emp_name, lat, lon, created_at, loc_type in locations:\n                    if emp_name not in latest_locations:\n                        latest_locations[emp_name] = (lat, lon)\n                \n                history_text += \"üó∫ Google Maps havolalar:\\n\"\n                for emp_name, (lat, lon) in latest_locations.items():\n                    maps_url = f\"https://maps.google.com/?q={lat},{lon}\"\n                    history_text += f\"üìç {emp_name}: {maps_url}\\n\"\n            \n            if len(history_text) > 4000:\n                parts = [history_text[i:i+4000] for i in range(0, len(history_text), 4000)]\n                for part in parts:\n                    bot.send_message(message.chat.id, part)\n            else:\n                bot.send_message(message.chat.id, history_text)\n                \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    def send_animated_location_card(chat_id, sender_name, latitude, longitude, location_type=\"general\"):\n        \"\"\"Send animated location sharing card with interactive Google Maps preview\"\"\"\n        import time\n        \n        # Create different card styles based on location type\n        if location_type == \"employee_location\":\n            card_title = \"üë§ Xodim Lokatsiyasi\"\n            card_icon = \"üìç\"\n            card_color = \"üü¢\"\n        elif location_type == \"task_location\":\n            card_title = \"üéØ Vazifa Lokatsiyasi\"\n            card_icon = \"üö©\"\n            card_color = \"üîµ\"\n        elif location_type == \"customer_location\":\n            card_title = \"üë• Mijoz Lokatsiyasi\"\n            card_icon = \"üìå\"\n            card_color = \"üü°\"\n        else:\n            card_title = \"üìç Lokatsiya Ma'lumoti\"\n            card_icon = \"üìç\"\n            card_color = \"‚ö™\"\n        \n        # Generate interactive map URLs\n        google_maps_url = f\"https://maps.google.com/?q={latitude},{longitude}\"\n        google_maps_embed = f\"https://maps.google.com/maps?q={latitude},{longitude}&output=embed\"\n        yandex_maps_url = f\"https://yandex.ru/maps/?ll={longitude},{latitude}&z=16&l=map\"\n        \n        # Send animated loading message first\n        loading_msg = bot.send_message(\n            chat_id,\n            f\"üîÑ Lokatsiya kartasi tayyorlanmoqda...\\n‚è≥ Biroz kuting...\"\n        )\n        \n        time.sleep(1)  # Animation delay\n        \n        # Delete loading message and send main card\n        try:\n            bot.delete_message(chat_id, loading_msg.message_id)\n        except:\n            pass\n        \n        # Create animated location card with rich formatting\n        current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')\n        \n        location_card = f\"\"\"\n{card_color} **{card_title}** {card_color}\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ  {card_icon} **{sender_name}**\n‚îÇ  üåç Joylashuv ma'lumotlari\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\nüìä **Koordinatalar:**\n‚Ä¢ üåê Kenglik: `{latitude:.6f}`\n‚Ä¢ üåê Uzunlik: `{longitude:.6f}`\n\nüó∫ **Interaktiv Xaritalar:**\n‚Ä¢ [üìç Google Maps]({google_maps_url})\n‚Ä¢ [üó∫ Yandex Maps]({yandex_maps_url})\n\n‚è∞ **Vaqt:** {current_time}\nüì° **Status:** ‚úÖ Faol\n\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ   üéØ Tezkor Amallar:    ‚îÇ\n‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n‚îÇ üß≠ Navigatsiya          ‚îÇ\n‚îÇ üìè Masofa hisoblash     ‚îÇ\n‚îÇ üì± Telefondan ochish    ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\"\"\"\n        \n        # Send the main location card\n        bot.send_message(\n            chat_id,\n            location_card,\n            parse_mode='Markdown',\n            disable_web_page_preview=False\n        )\n        \n        # Send actual location pin for precise mapping\n        bot.send_location(\n            chat_id,\n            latitude,\n            longitude\n        )\n        \n        # Send interactive inline keyboard for additional actions\n        keyboard = types.InlineKeyboardMarkup(row_width=2)\n        keyboard.add(\n            types.InlineKeyboardButton(\"üß≠ Navigatsiya\", url=google_maps_url),\n            types.InlineKeyboardButton(\"üì± Telefondan ochish\", url=f\"geo:{latitude},{longitude}\")\n        )\n        keyboard.add(\n            types.InlineKeyboardButton(\"üìè Masofa hisoblash\", callback_data=f\"calc_distance_{latitude}_{longitude}\"),\n            types.InlineKeyboardButton(\"üîÑ Yangilash\", callback_data=f\"refresh_location_{latitude}_{longitude}\")\n        )\n        keyboard.add(\n            types.InlineKeyboardButton(\"üìä Atrofdagi joylar\", callback_data=f\"nearby_places_{latitude}_{longitude}\")\n        )\n        \n        bot.send_message(\n            chat_id,\n            f\"üéÆ **Interaktiv Amallar** - {sender_name}\\n\\n\"\n            f\"Quyidagi tugmalar orqali lokatsiya bilan ishlashingiz mumkin:\",\n            reply_markup=keyboard,\n            parse_mode='Markdown'\n        )\n\n    def handle_location_sharing(message):\n        \"\"\"Handle location sharing from employees\"\"\"\n        # Find employee name\n        employee_name = None\n        \n        # Reload config to get latest employee list  \n        import importlib\n        import config\n        importlib.reload(config)\n        \n        for name, chat_id in config.EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if employee_name:\n            # Save location to database\n            try:\n                from database import DATABASE_PATH\n                import sqlite3\n                \n                conn = sqlite3.connect(DATABASE_PATH)\n                cursor = conn.cursor()\n                \n                cursor.execute(\"\"\"\n                    INSERT INTO employee_locations \n                    (employee_name, employee_chat_id, latitude, longitude, location_type)\n                    VALUES (?, ?, ?, ?, ?)\n                \"\"\", (employee_name, message.chat.id, message.location.latitude, \n                      message.location.longitude, 'requested'))\n                \n                conn.commit()\n                conn.close()\n                \n                # Confirm to employee and show main menu\n                bot.send_message(\n                    message.chat.id,\n                    \"‚úÖ Lokatsiya qabul qilindi. Rahmat!\"\n                )\n                \n                # Show employee panel after location sharing\n                show_employee_panel(message, employee_name)\n                \n                # Send animated location sharing card with interactive map preview\n                send_animated_location_card(\n                    ADMIN_CHAT_ID, \n                    employee_name, \n                    message.location.latitude, \n                    message.location.longitude,\n                    \"employee_location\"\n                )\n                \n            except Exception as e:\n                bot.send_message(\n                    message.chat.id,\n                    \"‚ùå Lokatsiya saqlashda xatolik yuz berdi.\"\n                )\n\n    @bot.message_handler(func=lambda message: message.text == \"üóë Ma'lumot o'chirish\")\n    def start_delete_data(message):\n        \"\"\"Start data deletion process\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üóë Vazifani o'chirish\", \"üóë Qarzni o'chirish\")\n        markup.add(\"üóë Xabarni o'chirish\", \"üóë Sessiyani o'chirish\")\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üóë Qanday ma'lumotni o'chirmoqchisiz?\",\n            reply_markup=markup\n        )\n\n    # EMPLOYEE SECTION\n    @bot.message_handler(func=lambda message: message.text == \"üë§ Xodim\")\n    def employee_login(message):\n        \"\"\"Employee panel access\"\"\"\n        # Reload config to get latest employee list\n        import importlib\n        import config\n        importlib.reload(config)\n        \n        # Check if user is in employee list from updated config\n        employee_name = None\n        for name, chat_id in config.EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if not employee_name:\n            bot.send_message(\n                message.chat.id,\n                \"‚ùå Sizning profilingiz topilmadi.\\n\"\n                \"Admin bilan bog'laning yoki 'üéØ Mijoz' bo'limidan foydalaning.\"\n            )\n            return\n        \n        show_employee_panel(message, employee_name)\n\n    @bot.message_handler(func=lambda message: message.text == \"üîô Ortga\" and message.chat.id in EMPLOYEES.values())\n    def employee_back_handler(message):\n        \"\"\"Handle back button for employees\"\"\"\n        # Clear any active state\n        clear_user_state(message.chat.id)\n        \n        # Check if user is an employee \n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if employee_name:\n            # Send them back to employee panel\n            show_employee_panel(message)\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Tushunmadim. Iltimos, menyudan tanlang yoki /start bosing.\")\n\n    def show_employee_panel(message, employee_name=None):\n        \"\"\"Show employee panel\"\"\"\n        if not employee_name:\n            # Reload config to get latest employee list\n            import importlib\n            import config\n            importlib.reload(config)\n            \n            for name, chat_id in config.EMPLOYEES.items():\n                if chat_id == message.chat.id:\n                    employee_name = name\n                    break\n        \n        if not employee_name:\n            bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìå Mening vazifalarim\", \"üìÇ Vazifalar tarixi\")\n        markup.add(\"üìä Hisobotlar\")\n        markup.add(\"üîô Ortga\")\n        \n        bot.send_message(\n            message.chat.id,\n            f\"üë§ Xodim paneli\\n\\nSalom, {employee_name}!\\n\\nKerakli bo'limni tanlang:\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üìå Mening vazifalarim\")\n    def show_employee_tasks(message):\n        \"\"\"Show employee's current tasks\"\"\"\n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if not employee_name:\n            bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n            return\n        \n        # Get pending and in-progress tasks\n        pending_tasks = get_employee_tasks(employee_name, \"pending\")\n        active_tasks = get_employee_tasks(employee_name, \"in_progress\")\n        \n        if not pending_tasks and not active_tasks:\n            bot.send_message(message.chat.id, \"üì≠ Sizda hozircha vazifa yo'q.\")\n            return\n        \n        # Show pending tasks\n        if pending_tasks:\n            bot.send_message(message.chat.id, \"‚è≥ Kutilayotgan vazifalar:\")\n            for task in pending_tasks:\n                task_info = format_task_info(task)\n                \n                markup = types.InlineKeyboardMarkup()\n                markup.add(types.InlineKeyboardButton(\"‚ñ∂Ô∏è Boshlash\", callback_data=f\"start_task_{task[0]}\"))\n                \n                bot.send_message(message.chat.id, task_info, reply_markup=markup)\n        \n        # Show active tasks\n        if active_tasks:\n            bot.send_message(message.chat.id, \"üîÑ Bajarilayotgan vazifalar:\")\n            for task in active_tasks:\n                task_info = format_task_info(task)\n                \n                markup = types.InlineKeyboardMarkup()\n                markup.add(types.InlineKeyboardButton(\"‚úÖ Yakunlash\", callback_data=f\"complete_task_{task[0]}\"))\n                \n                bot.send_message(message.chat.id, task_info, reply_markup=markup)\n\n    @bot.message_handler(func=lambda message: message.text == \"üìÇ Vazifalar tarixi\")\n    def show_employee_task_history(message):\n        \"\"\"Show employee's task history with interactive options\"\"\"\n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if not employee_name:\n            bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n            return\n        \n        # Show options for history view\n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìä Umumiy tarix\", \"üìÖ So'nggi 7 kun\")\n        markup.add(\"üìÜ So'nggi 30 kun\", \"üí∞ Faqat to'lovli vazifalar\")\n        markup.add(\"üîô Ortga\")\n        \n        set_user_state(message.chat.id, \"task_history_menu\")\n        \n        bot.send_message(\n            message.chat.id,\n            f\"üìÇ **{employee_name}** - Vazifalar tarixi\\n\\n\"\n            \"Qaysi ko'rinishni tanlaysiz?\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"task_history_menu\")\n    def handle_task_history_menu(message):\n        \"\"\"Handle task history menu selections\"\"\"\n        if message.text == \"üîô Ortga\":\n            clear_user_state(message.chat.id)\n            show_employee_panel(message)\n            return\n        \n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if not employee_name:\n            bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n            return\n        \n        if message.text == \"üìä Umumiy tarix\":\n            show_complete_task_history(message, employee_name, \"all\")\n        elif message.text == \"üìÖ So'nggi 7 kun\":\n            show_complete_task_history(message, employee_name, \"week\")\n        elif message.text == \"üìÜ So'nggi 30 kun\":\n            show_complete_task_history(message, employee_name, \"month\")\n        elif message.text == \"üí∞ Faqat to'lovli vazifalar\":\n            show_complete_task_history(message, employee_name, \"paid\")\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Noto'g'ri tanlov.\")\n\n    def show_complete_task_history(message, employee_name, period_type):\n        \"\"\"Show detailed task history based on period\"\"\"\n        \n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            from datetime import datetime, timedelta\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            # Build query based on period type\n            base_query = \"\"\"\n                SELECT id, title, description, status, created_at, completion_report, \n                       received_amount, completion_media\n                FROM tasks \n                WHERE assigned_to = ? AND status = 'completed'\n            \"\"\"\n            \n            params = [employee_name]\n            \n            if period_type == \"week\":\n                week_ago = (datetime.now() - timedelta(days=7)).isoformat()\n                base_query += \" AND created_at >= ?\"\n                params.append(week_ago)\n                limit = 50\n            elif period_type == \"month\":\n                month_ago = (datetime.now() - timedelta(days=30)).isoformat()\n                base_query += \" AND created_at >= ?\"\n                params.append(month_ago)\n                limit = 100\n            elif period_type == \"paid\":\n                base_query += \" AND received_amount > 0\"\n                limit = 50\n            else:  # all\n                limit = 30\n            \n            base_query += f\" ORDER BY created_at DESC LIMIT {limit}\"\n            \n            cursor.execute(base_query, params)\n            \n            completed_tasks = cursor.fetchall()\n            conn.close()\n            \n            if not completed_tasks:\n                period_text = {\n                    \"week\": \"so'nggi 7 kun\",\n                    \"month\": \"so'nggi 30 kun\", \n                    \"paid\": \"to'lovli\",\n                    \"all\": \"barcha\"\n                }.get(period_type, \"\")\n                \n                bot.send_message(message.chat.id, f\"üì≠ {period_text} davrdagi bajarilgan vazifalar topilmadi.\")\n                clear_user_state(message.chat.id)\n                show_employee_panel(message)\n                return\n            \n            # Period title\n            period_titles = {\n                \"week\": \"So'nggi 7 kun\",\n                \"month\": \"So'nggi 30 kun\",\n                \"paid\": \"To'lovli vazifalar\",\n                \"all\": \"Barcha vazifalar\"\n            }\n            \n            period_title = period_titles.get(period_type, \"Vazifalar tarixi\")\n            history_text = f\"üìÇ **{employee_name}** - {period_title}\\n\\n\"\n            total_earned = 0\n            total_tasks = len(completed_tasks)\n            \n            for i, task in enumerate(completed_tasks, 1):\n                task_id, title, description, status, created_at, completion_report, received_amount, completion_media = task\n                \n                try:\n                    date_str = datetime.fromisoformat(created_at).strftime(\"%d.%m.%Y %H:%M\")\n                except:\n                    date_str = created_at[:16] if created_at else \"Noma'lum\"\n                \n                amount_text = f\"{received_amount:,.0f} so'm\" if received_amount else \"To'lov belgilanmagan\"\n                if received_amount:\n                    total_earned += received_amount\n                \n                history_text += f\"{i}. üìã **{title}**\\n\"\n                history_text += f\"   üìÖ {date_str}\\n\"\n                history_text += f\"   üí∞ {amount_text}\\n\"\n                if completion_report:\n                    report_preview = completion_report[:50] + \"...\" if len(completion_report) > 50 else completion_report\n                    history_text += f\"   üìù {report_preview}\\n\"\n                history_text += \"\\n\"\n            \n            # Summary statistics\n            avg_earning = total_earned / total_tasks if total_tasks > 0 else 0\n            \n            history_text += f\"üìä **Statistika:**\\n\"\n            history_text += f\"üî¢ Jami vazifalar: {total_tasks} ta\\n\"\n            history_text += f\"üí∞ Jami daromad: {total_earned:,.0f} so'm\\n\"\n            history_text += f\"üìà O'rtacha to'lov: {avg_earning:,.0f} so'm\\n\\n\"\n            \n            # Performance indicators\n            if total_earned > 0:\n                if avg_earning >= 100000:\n                    history_text += \"üèÜ A'lo natija! Yuqori to'lovli vazifalar!\\n\"\n                elif avg_earning >= 50000:\n                    history_text += \"‚≠êÔ∏è Yaxshi natija! Davom eting!\\n\"\n                else:\n                    history_text += \"üí™ Yaxshi ish! Yanada yuqoriga!\\n\"\n            \n            # Send in chunks if too long\n            if len(history_text) > 4000:\n                parts = [history_text[i:i+4000] for i in range(0, len(history_text), 4000)]\n                for part in parts:\n                    bot.send_message(message.chat.id, part)\n            else:\n                bot.send_message(message.chat.id, history_text)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Vazifalar tarixi yuklanmadi: {str(e)}\")\n        \n        clear_user_state(message.chat.id)\n        show_employee_panel(message)\n\n\n\n\n\n\n\n    @bot.message_handler(func=lambda message: message.text == \"üìä Hisobotlar\")\n    def show_employee_reports_menu(message):\n        \"\"\"Show employee reports menu\"\"\"\n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if not employee_name:\n            bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n            return\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìÖ Haftalik hisobot\", \"üìÜ Oylik hisobot\")\n        markup.add(\"üìà Umumiy statistika\", \"üì§ Excel hisobot\")\n        markup.add(\"üîô Ortga\")\n        \n        bot.send_message(\n            message.chat.id,\n            f\"üìä **{employee_name}** - Hisobotlar bo'limi\\n\\n\"\n            \"Kerakli hisobot turini tanlang:\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üìÖ Haftalik hisobot\")\n    def show_weekly_report(message):\n        \"\"\"Show weekly report for employee\"\"\"\n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if not employee_name:\n            bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n            return\n        \n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            from datetime import datetime, timedelta\n            \n            # Calculate date range (last 7 days)\n            end_date = datetime.now()\n            start_date = end_date - timedelta(days=7)\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            # Get completed tasks in last 7 days\n            cursor.execute(\"\"\"\n                SELECT id, title, created_at, received_amount\n                FROM tasks \n                WHERE assigned_to = ? AND status = 'completed'\n                AND datetime(created_at) >= datetime(?)\n                ORDER BY created_at DESC\n            \"\"\", (employee_name, start_date.isoformat()))\n            \n            weekly_tasks = cursor.fetchall()\n            conn.close()\n            \n            if not weekly_tasks:\n                bot.send_message(\n                    message.chat.id, \n                    f\"üìÖ **Haftalik hisobot**\\n\\n\"\n                    f\"üë§ Xodim: {employee_name}\\n\"\n                    f\"üìÖ Davr: {start_date.strftime('%d.%m')} - {end_date.strftime('%d.%m.%Y')}\\n\\n\"\n                    f\"üì≠ Oxirgi 7 kunda bajarilgan vazifalar yo'q.\"\n                )\n                return\n            \n            total_earned = sum(task[3] for task in weekly_tasks if task[3])\n            \n            report_text = f\"üìÖ **Haftalik hisobot**\\n\\n\"\n            report_text += f\"üë§ Xodim: {employee_name}\\n\"\n            report_text += f\"üìÖ Davr: {start_date.strftime('%d.%m')} - {end_date.strftime('%d.%m.%Y')}\\n\\n\"\n            report_text += f\"‚úÖ Bajarilgan vazifalar: {len(weekly_tasks)} ta\\n\"\n            report_text += f\"üí∞ Jami ishlab topilgan: {total_earned:,.0f} so'm\\n\\n\"\n            \n            if len(weekly_tasks) <= 10:\n                report_text += \"üìã **Vazifalar ro'yxati:**\\n\\n\"\n                for i, task in enumerate(weekly_tasks, 1):\n                    task_id, title, created_at, amount = task\n                    try:\n                        date_str = datetime.fromisoformat(created_at).strftime(\"%d.%m %H:%M\")\n                    except:\n                        date_str = created_at[:10] if created_at else \"Noma'lum\"\n                    \n                    amount_text = f\"{amount:,.0f} so'm\" if amount else \"To'lov yo'q\"\n                    report_text += f\"{i}. {title}\\n\"\n                    report_text += f\"   üìÖ {date_str} | üí∞ {amount_text}\\n\\n\"\n            \n            bot.send_message(message.chat.id, report_text)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Haftalik hisobot yuklanmadi: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üìÜ Oylik hisobot\")\n    def show_monthly_report(message):\n        \"\"\"Show monthly report for employee\"\"\"\n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if not employee_name:\n            bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n            return\n        \n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            from datetime import datetime, timedelta\n            \n            # Calculate date range (last 30 days)\n            end_date = datetime.now()\n            start_date = end_date - timedelta(days=30)\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            # Get completed tasks in last 30 days\n            cursor.execute(\"\"\"\n                SELECT id, title, created_at, received_amount\n                FROM tasks \n                WHERE assigned_to = ? AND status = 'completed'\n                AND datetime(created_at) >= datetime(?)\n                ORDER BY created_at DESC\n            \"\"\", (employee_name, start_date.isoformat()))\n            \n            monthly_tasks = cursor.fetchall()\n            conn.close()\n            \n            if not monthly_tasks:\n                bot.send_message(\n                    message.chat.id, \n                    f\"üìÜ **Oylik hisobot**\\n\\n\"\n                    f\"üë§ Xodim: {employee_name}\\n\"\n                    f\"üìÖ Davr: {start_date.strftime('%d.%m')} - {end_date.strftime('%d.%m.%Y')}\\n\\n\"\n                    f\"üì≠ Oxirgi 30 kunda bajarilgan vazifalar yo'q.\"\n                )\n                return\n            \n            total_earned = sum(task[3] for task in monthly_tasks if task[3])\n            avg_per_task = total_earned / len(monthly_tasks) if monthly_tasks else 0\n            \n            report_text = f\"üìÜ **Oylik hisobot**\\n\\n\"\n            report_text += f\"üë§ Xodim: {employee_name}\\n\"\n            report_text += f\"üìÖ Davr: {start_date.strftime('%d.%m')} - {end_date.strftime('%d.%m.%Y')}\\n\\n\"\n            report_text += f\"‚úÖ Bajarilgan vazifalar: {len(monthly_tasks)} ta\\n\"\n            report_text += f\"üí∞ Jami ishlab topilgan: {total_earned:,.0f} so'm\\n\"\n            report_text += f\"üìä O'rtacha vazifa uchun: {avg_per_task:,.0f} so'm\\n\\n\"\n            \n            # Group by weeks\n            weeks_data = {}\n            for task in monthly_tasks:\n                try:\n                    task_date = datetime.fromisoformat(task[2])\n                    week_start = task_date - timedelta(days=task_date.weekday())\n                    week_key = week_start.strftime(\"%d.%m\")\n                    \n                    if week_key not in weeks_data:\n                        weeks_data[week_key] = {\"count\": 0, \"amount\": 0}\n                    \n                    weeks_data[week_key][\"count\"] += 1\n                    if task[3]:\n                        weeks_data[week_key][\"amount\"] += task[3]\n                except:\n                    pass\n            \n            if weeks_data:\n                report_text += \"üìà **Haftalik taqsimot:**\\n\\n\"\n                for week, data in weeks_data.items():\n                    report_text += f\"üìÖ {week} haftasi: {data['count']} vazifa | {data['amount']:,.0f} so'm\\n\"\n            \n            bot.send_message(message.chat.id, report_text)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Oylik hisobot yuklanmadi: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üìà Umumiy statistika\")\n    def show_employee_statistics(message):\n        \"\"\"Show overall employee statistics\"\"\"\n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if not employee_name:\n            bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n            return\n        \n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            from datetime import datetime\n            \n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            # Get all task statistics\n            cursor.execute(\"\"\"\n                SELECT status, COUNT(*), COALESCE(SUM(received_amount), 0)\n                FROM tasks \n                WHERE assigned_to = ?\n                GROUP BY status\n            \"\"\", (employee_name,))\n            \n            status_stats = cursor.fetchall()\n            \n            # Get first task date\n            cursor.execute(\"\"\"\n                SELECT MIN(created_at) FROM tasks WHERE assigned_to = ?\n            \"\"\", (employee_name,))\n            \n            first_task_date = cursor.fetchone()[0]\n            conn.close()\n            \n            # Calculate statistics\n            stats = {\n                'pending': {'count': 0, 'amount': 0},\n                'in_progress': {'count': 0, 'amount': 0},\n                'completed': {'count': 0, 'amount': 0}\n            }\n            \n            total_tasks = 0\n            total_earned = 0\n            \n            for status, count, amount in status_stats:\n                if status in stats:\n                    stats[status] = {'count': count, 'amount': amount}\n                    total_tasks += count\n                    if status == 'completed':\n                        total_earned += amount\n            \n            try:\n                start_date = datetime.fromisoformat(first_task_date).strftime(\"%d.%m.%Y\") if first_task_date else \"Noma'lum\"\n            except:\n                start_date = \"Noma'lum\"\n            \n            completion_rate = (stats['completed']['count'] / total_tasks * 100) if total_tasks > 0 else 0\n            \n            stats_text = f\"üìà **{employee_name}** - Umumiy statistika\\n\\n\"\n            stats_text += f\"üìÖ Birinchi vazifa: {start_date}\\n\"\n            stats_text += f\"üìä Jami vazifalar: {total_tasks} ta\\n\"\n            stats_text += f\"üìà Bajarish foizi: {completion_rate:.1f}%\\n\\n\"\n            \n            stats_text += f\"‚è≥ Kutilayotgan: {stats['pending']['count']} ta\\n\"\n            stats_text += f\"üîÑ Jarayonda: {stats['in_progress']['count']} ta\\n\"\n            stats_text += f\"‚úÖ Bajarilgan: {stats['completed']['count']} ta\\n\\n\"\n            \n            stats_text += f\"üí∞ **Jami ishlab topilgan:** {total_earned:,.0f} so'm\\n\"\n            \n            if stats['completed']['count'] > 0:\n                avg_per_task = total_earned / stats['completed']['count']\n                stats_text += f\"üìä O'rtacha vazifa uchun: {avg_per_task:,.0f} so'm\"\n            \n            bot.send_message(message.chat.id, stats_text)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Statistika yuklanmadi: {str(e)}\")\n\n    @bot.message_handler(func=lambda message: message.text == \"üì§ Excel hisobot\")\n    def generate_employee_excel_report(message):\n        \"\"\"Generate Excel report for employee\"\"\"\n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        if not employee_name:\n            bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n            return\n        \n        bot.send_message(message.chat.id, \"üì§ Excel hisobot tayyorlanyapti...\")\n        \n        try:\n            from database import DATABASE_PATH\n            import sqlite3\n            from datetime import datetime\n            import os\n            \n            # Get all tasks for employee\n            conn = sqlite3.connect(DATABASE_PATH)\n            cursor = conn.cursor()\n            \n            cursor.execute(\"\"\"\n                SELECT id, title, description, status, created_at, \n                       completion_report, received_amount\n                FROM tasks \n                WHERE assigned_to = ?\n                ORDER BY created_at DESC\n            \"\"\", (employee_name,))\n            \n            tasks = cursor.fetchall()\n            conn.close()\n            \n            if not tasks:\n                bot.send_message(message.chat.id, \"üì≠ Hisobot uchun vazifalar topilmadi.\")\n                return\n            \n            # Create text report\n            report_text = f\"üì§ **{employee_name}** - To'liq hisobot\\n\"\n            report_text += f\"üìÖ Yaratilgan: {datetime.now().strftime('%d.%m.%Y %H:%M')}\\n\\n\"\n            \n            total_tasks = len(tasks)\n            completed_tasks = sum(1 for task in tasks if task[3] == 'completed')\n            total_earned = sum(task[6] for task in tasks if task[6])\n            \n            report_text += f\"üìä **UMUMIY STATISTIKA:**\\n\"\n            report_text += f\"üî¢ Jami vazifalar: {total_tasks} ta\\n\"\n            report_text += f\"‚úÖ Bajarilgan: {completed_tasks} ta\\n\"\n            report_text += f\"üìà Bajarish foizi: {(completed_tasks/total_tasks*100):.1f}%\\n\"\n            report_text += f\"üí∞ Jami daromad: {total_earned:,.0f} so'm\\n\\n\"\n            \n            report_text += f\"üìã **VAZIFALAR RO'YXATI:**\\n\\n\"\n            \n            for i, task in enumerate(tasks, 1):\n                task_id, title, description, status, created_at, completion_report, received_amount = task\n                \n                try:\n                    created_date = datetime.fromisoformat(created_at).strftime(\"%d.%m.%Y %H:%M\")\n                except:\n                    created_date = created_at[:16] if created_at else \"Noma'lum\"\n                \n                status_uz = {\n                    'pending': '‚è≥ Kutilmoqda',\n                    'in_progress': 'üîÑ Bajarilmoqda', \n                    'completed': '‚úÖ Tugallangan'\n                }.get(status, status)\n                \n                amount_text = f\"{received_amount:,.0f} so'm\" if received_amount else \"To'lov yo'q\"\n                \n                report_text += f\"{i}. **{title}**\\n\"\n                report_text += f\"   üÜî ID: {task_id}\\n\"\n                report_text += f\"   üìä Holat: {status_uz}\\n\"\n                report_text += f\"   üìÖ Sana: {created_date}\\n\"\n                report_text += f\"   üí∞ To'lov: {amount_text}\\n\"\n                if description:\n                    desc_preview = description[:100] + \"...\" if len(description) > 100 else description\n                    report_text += f\"   üìù Tavsif: {desc_preview}\\n\"\n                if completion_report:\n                    report_preview = completion_report[:100] + \"...\" if len(completion_report) > 100 else completion_report\n                    report_text += f\"   üìã Hisobot: {report_preview}\\n\"\n                report_text += \"\\n\"\n            \n            # Create reports directory\n            os.makedirs(\"reports\", exist_ok=True)\n            \n            # Save to text file\n            filename = f\"reports/{employee_name}_hisobot_{datetime.now().strftime('%Y%m%d_%H%M%S')}.txt\"\n            with open(filename, 'w', encoding='utf-8') as f:\n                f.write(report_text)\n            \n            filepath = filename\n            \n            if filepath and os.path.exists(filepath):\n                with open(filepath, 'rb') as f:\n                    bot.send_document(\n                        message.chat.id,\n                        f,\n                        caption=f\"üì§ {employee_name} - Excel hisobot\"\n                    )\n                # Clean up file\n                os.remove(filepath)\n                bot.send_message(message.chat.id, \"‚úÖ Excel hisobot yuborildi!\")\n            else:\n                bot.send_message(message.chat.id, \"‚ùå Excel hisobot yaratishda xatolik yuz berdi.\")\n                \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Excel hisobot xatoligi: {str(e)}\")\n\n    @bot.callback_query_handler(func=lambda call: call.data.startswith(\"start_task_\"))\n    def start_task(call):\n        \"\"\"Start a task\"\"\"\n        task_id = int(call.data.split(\"_\")[-1])\n        \n        try:\n            # Get task details including location\n            task = get_task_by_id(task_id)\n            if not task:\n                bot.answer_callback_query(call.id, \"‚ùå Vazifa topilmadi!\")\n                return\n            \n            update_task_status(task_id, \"in_progress\")\n            \n            bot.edit_message_reply_markup(\n                call.message.chat.id,\n                call.message.message_id,\n                reply_markup=None\n            )\n            \n            # Prepare task start message\n            start_message = \"‚úÖ Vazifa boshlandi!\\n\\n\"\n            start_message += f\"üìù Vazifa: {task[1]}\\n\\n\"  # description\n            start_message += \"Vazifani yakunlash uchun 'üìå Mening vazifalarim' bo'limiga o'ting.\"\n            \n            bot.send_message(call.message.chat.id, start_message)\n            \n            # Send location if coordinates are available\n            if task[2] and task[3]:\n                bot.send_location(call.message.chat.id, task[2], task[3])\n                bot.send_message(call.message.chat.id, \"üìç Vazifa joylashuvi yuqorida ko'rsatilgan.\")\n            \n            # Notify admin\n            add_message(\n                call.from_user.id,\n                ADMIN_CHAT_ID,\n                f\"Vazifa #{task_id} boshlandi\",\n                \"task_started\",\n                task_id\n            )\n            \n            user_name = call.from_user.first_name or \"Noma'lum\"\n            bot.send_message(\n                ADMIN_CHAT_ID,\n                f\"üîî Vazifa #{task_id} boshlandi\\n\"\n                f\"üë§ Xodim: {user_name}\"\n            )\n            \n        except Exception as e:\n            bot.send_message(call.message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.callback_query_handler(func=lambda call: call.data.startswith(\"complete_task_\"))\n    def complete_task_start(call):\n        \"\"\"Start task completion process\"\"\"\n        task_id = int(call.data.split(\"_\")[-1])\n        \n        set_user_state(call.message.chat.id, \"complete_task_report\", str(task_id))\n        \n        markup = types.ReplyKeyboardRemove()\n        bot.send_message(\n            call.message.chat.id,\n            \"üìù Vazifa qanday bajarilganini tavsiflab bering:\\n\\n\"\n            \"(Matn yoki ovozli xabar yuborishingiz mumkin)\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"complete_task_report\")\n    def get_completion_report(message):\n        \"\"\"Get task completion report\"\"\"\n        state, task_id = get_user_state(message.chat.id)\n        \n        # Save report (text or voice)\n        report_text = \"\"\n        if message.content_type == 'text':\n            report_text = message.text\n        elif message.content_type == 'voice':\n            # Save voice file\n            file_info = bot.get_file(message.voice.file_id)\n            voice_path = save_media_file(file_info, bot, \"voice\")\n            report_text = f\"Ovozli hisobot: {voice_path}\"\n        \n        # Store report temporarily\n        temp_data = {\n            \"task_id\": int(task_id) if task_id else 0,\n            \"report\": report_text\n        }\n        set_user_state(message.chat.id, \"complete_task_media\", serialize_json_data(temp_data))\n        \n        bot.send_message(\n            message.chat.id,\n            \"üì∏ Endi vazifa bajarilganligini tasdiqlovchi rasm yoki video yuboring:\"\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"complete_task_media\", \n                        content_types=['photo', 'video'])\n    def get_completion_media(message):\n        \"\"\"Get task completion media\"\"\"\n        state, data_str = get_user_state(message.chat.id)\n        temp_data = parse_json_data(data_str)\n        \n        # Save media file\n        media_path = None\n        if message.content_type == 'photo':\n            file_info = bot.get_file(message.photo[-1].file_id)\n            media_path = save_media_file(file_info, bot, \"photo\")\n        elif message.content_type == 'video':\n            file_info = bot.get_file(message.video.file_id)\n            media_path = save_media_file(file_info, bot, \"video\")\n        \n        temp_data[\"media\"] = media_path\n        set_user_state(message.chat.id, \"complete_task_payment\", serialize_json_data(temp_data))\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)\n        markup.add(\"üí≥ Karta orqali olindi\")\n        markup.add(\"üíµ Naqd pul olindi\") \n        markup.add(\"üí∏ Qarzga qo'yildi\")\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üí∞ To'lov qanday olingan?\\n\\n\"\n            \"Kerakli variantni tanlang:\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"complete_task_payment\")\n    def get_payment_method(message):\n        \"\"\"Get payment method selection\"\"\"\n        state, data_str = get_user_state(message.chat.id)\n        temp_data = parse_json_data(data_str)\n        \n        if message.text == \"üîô Bekor qilish\":\n            clear_user_state(message.chat.id)\n            show_employee_panel(message)\n            return\n        \n        if message.text == \"üí≥ Karta orqali olindi\":\n            # Card payment process\n            temp_data[\"payment_method\"] = \"card\"\n            set_user_state(message.chat.id, \"card_payment_amount\", serialize_json_data(temp_data))\n            \n            markup = types.ReplyKeyboardRemove()\n            bot.send_message(\n                message.chat.id,\n                \"üí≥ Karta orqali qabul qilingan pul miqdorini kiriting (so'mda):\",\n                reply_markup=markup\n            )\n            \n        elif message.text == \"üíµ Naqd pul olindi\":\n            # Cash payment process\n            temp_data[\"payment_method\"] = \"cash\"  \n            set_user_state(message.chat.id, \"cash_payment_amount\", serialize_json_data(temp_data))\n            \n            markup = types.ReplyKeyboardRemove()\n            bot.send_message(\n                message.chat.id,\n                \"üíµ Naqd olingan pul miqdorini kiriting (so'mda):\",\n                reply_markup=markup\n            )\n            \n        elif message.text == \"üí∏ Qarzga qo'yildi\":\n            # Debt process\n            temp_data[\"payment_method\"] = \"debt\"\n            set_user_state(message.chat.id, \"debt_person_name\", serialize_json_data(temp_data))\n            \n            markup = types.ReplyKeyboardRemove() \n            bot.send_message(\n                message.chat.id,\n                \"üí∏ Kimning zimmasi qarzga qo'yildi?\\n\\n\"\n                \"Ism va familiyasini kiriting:\",\n                reply_markup=markup\n            )\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Iltimos, variantlardan birini tanlang.\")\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"card_payment_amount\")\n    def process_card_payment(message):\n        \"\"\"Process card payment completion\"\"\"\n        state, data_str = get_user_state(message.chat.id)\n        temp_data = parse_json_data(data_str)\n        \n        try:\n            received_amount = float(message.text.replace(\" \", \"\").replace(\",\", \"\"))\n            \n            # Complete the task\n            update_task_status(\n                temp_data[\"task_id\"],\n                \"completed\",\n                completion_report=temp_data[\"report\"],\n                completion_media=temp_data.get(\"media\") or \"\",\n                received_amount=received_amount\n            )\n            \n            # Get employee name\n            employee_name = None\n            for name, chat_id in EMPLOYEES.items():\n                if chat_id == message.chat.id:\n                    employee_name = name\n                    break\n            \n            # Success message to employee\n            success_msg = f\"\"\"\n‚úÖ Vazifa muvaffaqiyatli yakunlandi!\n\nüí≥ To'lov usuli: Karta orqali\nüí∞ Miqdor: {received_amount:,.0f} so'm  \nüìù Status: Karta orqali to'lov qabul qilindi va hisobga tushirildi\n\nRahmat!\n\"\"\"\n            bot.send_message(message.chat.id, success_msg)\n            \n            # Return to employee panel after task completion\n            # Task completed successfully\n            \n            # Admin notification\n            admin_message = f\"\"\"\n‚úÖ Vazifa yakunlandi!\n\nüÜî Vazifa ID: {temp_data[\"task_id\"]}\nüë§ Xodim: {employee_name or \"Noma'lum\"}\nüí≥ To'lov usuli: Karta orqali  \nüí∞ Olingan to'lov: {received_amount:,.0f} so'm\nüìä Status: Kartaga o'tkazildi, hisobga tushirildi\n\nüìù Hisobot: {temp_data[\"report\"]}\n\"\"\"\n            \n            bot.send_message(ADMIN_CHAT_ID, admin_message)\n            send_completion_media(temp_data)\n            \n        except ValueError:\n            bot.send_message(message.chat.id, \"‚ùå Iltimos, to'g'ri raqam kiriting!\")\n            return\n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n            return\n        \n        clear_user_state(message.chat.id)\n        show_employee_panel(message)\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"cash_payment_amount\")\n    def process_cash_payment(message):\n        \"\"\"Process cash payment completion\"\"\"\n        state, data_str = get_user_state(message.chat.id)\n        temp_data = parse_json_data(data_str)\n        \n        try:\n            received_amount = float(message.text.replace(\" \", \"\").replace(\",\", \"\"))\n            \n            # Complete the task\n            update_task_status(\n                temp_data[\"task_id\"],\n                \"completed\", \n                completion_report=temp_data[\"report\"],\n                completion_media=temp_data.get(\"media\") or \"\",\n                received_amount=received_amount\n            )\n            \n            # Get employee name\n            employee_name = None\n            for name, chat_id in EMPLOYEES.items():\n                if chat_id == message.chat.id:\n                    employee_name = name\n                    break\n            \n            # Success message to employee\n            success_msg = f\"\"\"\n‚úÖ Vazifa muvaffaqiyatli yakunlandi!\n\nüíµ To'lov usuli: Naqd pul\nüí∞ Miqdor: {received_amount:,.0f} so'm\nüìù Status: Naqd pul qabul qilindi\n\nRahmat!\n\"\"\"\n            bot.send_message(message.chat.id, success_msg)\n            \n            # Return to employee panel after task completion\n            # Task completed successfully\n            \n            # Admin notification\n            admin_message = f\"\"\"\n‚úÖ Vazifa yakunlandi!\n\nüÜî Vazifa ID: {temp_data[\"task_id\"]}\nüë§ Xodim: {employee_name or \"Noma'lum\"}\nüíµ To'lov usuli: Naqd pul\nüí∞ Olingan to'lov: {received_amount:,.0f} so'm\nüìä Status: Naqd pul olingan\n\nüìù Hisobot: {temp_data[\"report\"]}\n\"\"\"\n            \n            bot.send_message(ADMIN_CHAT_ID, admin_message)\n            send_completion_media(temp_data)\n            \n        except ValueError:\n            bot.send_message(message.chat.id, \"‚ùå Iltimos, to'g'ri raqam kiriting!\")\n            return\n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n            return\n        \n        clear_user_state(message.chat.id)  \n        show_employee_panel(message)\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"debt_person_name\")\n    def get_debt_person_name(message):\n        \"\"\"Get the name of person who owes money\"\"\"\n        state, data_str = get_user_state(message.chat.id)\n        temp_data = parse_json_data(data_str)\n        \n        temp_data[\"debt_person\"] = message.text.strip()\n        set_user_state(message.chat.id, \"debt_amount\", serialize_json_data(temp_data))\n        \n        bot.send_message(\n            message.chat.id,\n            f\"üí∏ {message.text} zimmasi qancha pul qo'yildi?\\n\\n\"\n            \"Miqdorini kiriting (so'mda):\"\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"debt_amount\")\n    def get_debt_amount(message):\n        \"\"\"Get debt amount\"\"\"\n        state, data_str = get_user_state(message.chat.id)\n        temp_data = parse_json_data(data_str)\n        \n        try:\n            debt_amount = float(message.text.replace(\" \", \"\").replace(\",\", \"\"))\n            temp_data[\"debt_amount\"] = debt_amount\n            set_user_state(message.chat.id, \"debt_reason\", serialize_json_data(temp_data))\n            \n            bot.send_message(\n                message.chat.id,\n                f\"üìù {temp_data['debt_person']} zimmasi {debt_amount:,.0f} so'm qarzga qo'yildi.\\n\\n\"\n                \"Qarz sababi nima? (masalan: 'Vazifa uchun oldindan to'lov'):\"\n            )\n            \n        except ValueError:\n            bot.send_message(message.chat.id, \"‚ùå Iltimos, to'g'ri raqam kiriting!\")\n            return\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"debt_reason\")\n    def get_debt_reason(message):\n        \"\"\"Get debt reason\"\"\"\n        state, data_str = get_user_state(message.chat.id)\n        temp_data = parse_json_data(data_str)\n        \n        temp_data[\"debt_reason\"] = message.text.strip()\n        set_user_state(message.chat.id, \"debt_payment_date\", serialize_json_data(temp_data))\n        \n        bot.send_message(\n            message.chat.id,\n            f\"üìÖ {temp_data['debt_person']} qarzni qachon qaytarishi kerak?\\n\\n\"\n            \"To'lov sanasini kiriting (masalan: 01.01.2024):\"\n        )\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"debt_payment_date\")\n    def complete_debt_process(message):\n        \"\"\"Complete debt process and finish task\"\"\"\n        state, data_str = get_user_state(message.chat.id)\n        temp_data = parse_json_data(data_str)\n        \n        payment_date = message.text.strip()\n        \n        try:\n            # Complete the task with debt\n            update_task_status(\n                temp_data[\"task_id\"],\n                \"completed\",\n                completion_report=temp_data[\"report\"],\n                completion_media=temp_data.get(\"media\") or \"\",\n                received_amount=0  # No money received, it's debt\n            )\n            \n            # Add debt record\n            add_debt(\n                employee_name=temp_data[\"debt_person\"],\n                employee_chat_id=0,  # Unknown chat ID for external person\n                task_id=temp_data[\"task_id\"],\n                amount=temp_data[\"debt_amount\"],\n                reason=temp_data[\"debt_reason\"],\n                payment_date=payment_date\n            )\n            \n            # Get employee name\n            employee_name = None\n            for name, chat_id in EMPLOYEES.items():\n                if chat_id == message.chat.id:\n                    employee_name = name\n                    break\n            \n            # Success message to employee\n            success_msg = f\"\"\"\n‚úÖ Vazifa muvaffaqiyatli yakunlandi!\n\nüí∏ To'lov usuli: Qarzga qo'yildi\nüë§ Qarzdor: {temp_data[\"debt_person\"]}\nüí∞ Miqdor: {temp_data[\"debt_amount\"]:,.0f} so'm\nüìù Sabab: {temp_data[\"debt_reason\"]}\nüìÖ To'lov sanasi: {payment_date}\n\nQarz ma'lumotlari saqlandi. Rahmat!\n\"\"\"\n            bot.send_message(message.chat.id, success_msg)\n            \n            # Return to employee panel after task completion\n            # Task completed successfully\n            \n            # Admin notification with full debt details\n            admin_message = f\"\"\"\n‚úÖ Vazifa yakunlandi!\n\nüÜî Vazifa ID: {temp_data[\"task_id\"]}\nüë§ Xodim: {employee_name or \"Noma'lum\"}\nüí∏ To'lov usuli: Qarzga qo'yildi\n\nüìä QARZ MA'LUMOTLARI:\nüë§ Qarzdor: {temp_data[\"debt_person\"]}\nüí∞ Miqdor: {temp_data[\"debt_amount\"]:,.0f} so'm\nüìù Sabab: {temp_data[\"debt_reason\"]}\nüìÖ To'lov sanasi: {payment_date}\nüïê Yaratilgan: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\nüìù Vazifa hisoboti: {temp_data[\"report\"]}\n\"\"\"\n            \n            bot.send_message(ADMIN_CHAT_ID, admin_message)\n            send_completion_media(temp_data)\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n            return\n        \n        clear_user_state(message.chat.id)\n        show_employee_panel(message)\n\n    def send_completion_media(temp_data):\n        \"\"\"Send task completion media to admin\"\"\"\n        if temp_data.get(\"media\") and os.path.exists(temp_data[\"media\"]):\n            try:\n                with open(temp_data[\"media\"], 'rb') as f:\n                    if \"photo\" in temp_data[\"media\"]:\n                        bot.send_photo(ADMIN_CHAT_ID, f, caption=\"üì∏ Vazifa rasmi\")\n                    elif \"video\" in temp_data[\"media\"]:\n                        bot.send_video(ADMIN_CHAT_ID, f, caption=\"üé• Vazifa videosi\")\n                    elif \"voice\" in temp_data[\"media\"]:\n                        bot.send_voice(ADMIN_CHAT_ID, f, caption=\"üé§ Ovozli hisobot\")\n            except Exception as e:\n                print(f\"Error sending media to admin: {e}\")\n\n    # CUSTOMER SECTION\n    @bot.message_handler(func=lambda message: message.text == \"üë• Mijoz\")\n    def customer_panel(message):\n        \"\"\"Customer panel access\"\"\"\n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üí¨ Admin bilan bog'lanish\")\n        markup.add(\"üîô Ortga\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üë• Mijoz paneli\\n\\n\"\n            \"Salom! Admin bilan bog'lanish uchun tugmani bosing:\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(func=lambda message: message.text == \"üí¨ Admin bilan bog'lanish\")\n    def start_customer_chat(message):\n        \"\"\"Start customer chat with admin - first collect phone number\"\"\"\n        set_user_state(message.chat.id, \"customer_phone\")\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)\n        phone_btn = types.KeyboardButton(\"üì± Telefon raqamini yuborish\", request_contact=True)\n        markup.add(phone_btn)\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üì± Admin bilan bog'lanish uchun telefon raqamingizni yuboring:\\n\\n\"\n            \"Telefon raqami admin uchun zarur.\",\n            reply_markup=markup\n        )\n\n    @bot.message_handler(content_types=['contact'], func=lambda message: get_user_state(message.chat.id)[0] == \"customer_phone\")\n    def get_customer_phone(message):\n        \"\"\"Get customer phone number\"\"\"\n        if message.contact:\n            phone_number = message.contact.phone_number\n            temp_data = {\"phone\": phone_number, \"name\": message.from_user.first_name or \"Anonim\"}\n            set_user_state(message.chat.id, \"customer_location\", serialize_json_data(temp_data))\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)\n            location_btn = types.KeyboardButton(\"üìç Joylashuvni yuborish\", request_location=True)\n            markup.add(location_btn)\n            markup.add(\"üîô Bekor qilish\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"üìç Endi joylashuvingizni yuboring:\\n\\n\"\n                \"Bu admin uchun zarur ma'lumot.\",\n                reply_markup=markup\n            )\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Telefon raqamini yuborishda xatolik. Qayta urinib ko'ring.\")\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"customer_phone\" and message.text == \"üîô Bekor qilish\")\n    def cancel_customer_phone(message):\n        \"\"\"Cancel customer phone input\"\"\"\n        clear_user_state(message.chat.id)\n        customer_panel(message)\n\n    @bot.message_handler(content_types=['location'], func=lambda message: get_user_state(message.chat.id)[0] == \"customer_location\")\n    def get_customer_location(message):\n        \"\"\"Get customer location and start chat\"\"\"\n        state, data_str = get_user_state(message.chat.id)\n        temp_data = parse_json_data(data_str)\n        \n        if message.location:\n            latitude = message.location.latitude\n            longitude = message.location.longitude\n            \n            # Save customer info with location\n            temp_data.update({\n                \"latitude\": latitude,\n                \"longitude\": longitude,\n                \"chat_id\": message.chat.id,\n                \"username\": message.from_user.username or \"\"\n            })\n            \n            set_user_state(message.chat.id, \"customer_chat\", serialize_json_data(temp_data))\n            \n            # Notify admin about new customer\n            customer_info = f\"\"\"\nüë§ Yangi mijoz bog'landi!\n\nüì± Ism: {temp_data['name']}\nüìû Telefon: {temp_data['phone']}\nüÜî Chat ID: {message.chat.id}\nüë§ Username: @{temp_data['username']} \nüìç Lokatsiya: {latitude}, {longitude}\nüïê Vaqt: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\nMijoz admindan javob kutmoqda.\n\"\"\"\n            \n            bot.send_message(ADMIN_CHAT_ID, customer_info)\n            bot.send_location(ADMIN_CHAT_ID, latitude, longitude)\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            markup.add(\"‚ùå Suhbatni tugatish\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"‚úÖ Ma'lumotlaringiz adminga yuborildi!\\n\\n\"\n                \"üí¨ Endi xabaringizni yozing. Admin sizga javob beradi.\\n\"\n                \"Suhbatni tugatish uchun tugmani bosing.\",\n                reply_markup=markup\n            )\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Joylashuvni yuborishda xatolik. Qayta urinib ko'ring.\")\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"customer_location\" and message.text == \"üîô Bekor qilish\")\n    def cancel_customer_location(message):\n        \"\"\"Cancel customer location input\"\"\"\n        clear_user_state(message.chat.id)\n        customer_panel(message)\n\n    @bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"customer_chat\")\n    def handle_customer_message(message):\n        \"\"\"Handle customer messages to admin\"\"\"\n        if message.text == \"‚ùå Suhbatni tugatish\":\n            clear_user_state(message.chat.id)\n            bot.send_message(\n                message.chat.id,\n                \"‚úÖ Suhbat tugatildi.\\n\\n\"\n                \"Yana bog'lanish kerak bo'lsa, admin bilan bog'lanish tugmasini bosing.\",\n                reply_markup=types.ReplyKeyboardRemove()\n            )\n            customer_panel(message)\n            return\n        \n        # Get customer data\n        state, data_str = get_user_state(message.chat.id)\n        customer_data = parse_json_data(data_str)\n        \n        # Forward message to admin with customer info\n        customer_info = f\"\"\"\nüë§ Mijoz: {customer_data.get('name', 'Anonim')}\nüìû Telefon: {customer_data.get('phone', \"Noma'lum\")}\nüÜî Chat ID: {message.chat.id}\nüë§ Username: @{customer_data.get('username', \"yo'q\")}\n\"\"\"\n        \n        forwarded_message = f\"üí¨ Mijoz xabari:\\n\\n{customer_info}\\nüìù Xabar: {message.text}\"\n        \n        bot.send_message(ADMIN_CHAT_ID, forwarded_message)\n        \n        bot.send_message(\n            message.chat.id,\n            \"‚úÖ Xabaringiz adminga yuborildi!\\n\\n\"\n            \"Admin tez orada javob beradi.\"\n        )\n\n    @bot.message_handler(commands=['reply'])\n    def admin_reply_to_customer(message):\n        \"\"\"Admin reply to customer\"\"\"\n        if message.chat.id != ADMIN_CHAT_ID:\n            return\n        \n        try:\n            # Parse command: /reply chat_id message\n            parts = message.text.split(' ', 2)\n            if len(parts) < 3:\n                bot.send_message(\n                    message.chat.id,\n                    \"‚ùå Noto'g'ri format. Ishlatish: /reply [chat_id] [xabar]\"\n                )\n                return\n            \n            customer_chat_id = int(parts[1])\n            reply_message = parts[2]\n            \n            # Send reply to customer\n            bot.send_message(\n                customer_chat_id,\n                f\"üëë Admin javobi:\\n\\n{reply_message}\"\n            )\n            \n            # Confirm to admin\n            bot.send_message(\n                message.chat.id,\n                f\"‚úÖ Javob yuborildi (Chat ID: {customer_chat_id})\"\n            )\n            \n        except ValueError:\n            bot.send_message(\n                message.chat.id,\n                \"‚ùå Noto'g'ri chat ID. Raqam kiriting.\"\n            )\n        except Exception as e:\n            bot.send_message(\n                message.chat.id,\n                f\"‚ùå Xatolik: {str(e)}\"\n            )\n\n\n\n    # COMMON HANDLERS\n    @bot.message_handler(func=lambda message: message.text == \"üîô Ortga\" and message.chat.id != ADMIN_CHAT_ID)\n    def go_back(message):\n        \"\"\"Go back to main menu for non-admin users\"\"\"\n        clear_user_state(message.chat.id)\n        start_message(message)\n    \n    @bot.message_handler(func=lambda message: message.text == \"üîô Ortga\" and message.chat.id == ADMIN_CHAT_ID)\n    def admin_go_back(message):\n        \"\"\"Go back to admin panel\"\"\"\n        clear_user_state(message.chat.id)\n        start_message(message)\n\n\n    # =============================================================================\n    # ENTERTAINMENT SYSTEM REMOVED PER USER REQUEST\n    # =============================================================================\n\n    # Callback query handlers for interactive location cards\n\n    # Callback query handlers for interactive location cards\n    @bot.callback_query_handler(func=lambda call: call.data.startswith('calc_distance_'))\n    def handle_distance_calculation(call):\n        \"\"\"Handle distance calculation from location\"\"\"\n        try:\n            _, _, lat, lon = call.data.split('_')\n            latitude = float(lat)\n            longitude = float(lon)\n            \n            # Create inline keyboard for distance calculation options\n            keyboard = types.InlineKeyboardMarkup()\n            keyboard.add(\n                types.InlineKeyboardButton(\"üìç Toshkent markazidan\", callback_data=f\"dist_tashkent_{lat}_{lon}\"),\n                types.InlineKeyboardButton(\"üè¢ Ofisdan\", callback_data=f\"dist_office_{lat}_{lon}\")\n            )\n            keyboard.add(\n                types.InlineKeyboardButton(\"üîô Orqaga\", callback_data=f\"back_location_{lat}_{lon}\")\n            )\n            \n            bot.edit_message_text(\n                \"üìè **Masofa Hisoblash**\\n\\n\"\n                \"Qaysi joydan masofani hisoblashni xohlaysiz?\",\n                call.message.chat.id,\n                call.message.message_id,\n                reply_markup=keyboard,\n                parse_mode='Markdown'\n            )\n            \n        except Exception as e:\n            bot.answer_callback_query(call.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.callback_query_handler(func=lambda call: call.data.startswith('dist_'))\n    def handle_specific_distance(call):\n        \"\"\"Calculate specific distance\"\"\"\n        try:\n            parts = call.data.split('_')\n            location_type = parts[1]\n            lat = float(parts[2])\n            lon = float(parts[3])\n            \n            # Define reference points\n            reference_points = {\n                'tashkent': (41.2995, 69.2401, \"Toshkent markaziga\"),\n                'office': (41.3111, 69.2797, \"Ofisga\")  # Example office coordinates\n            }\n            \n            if location_type in reference_points:\n                ref_lat, ref_lon, location_name = reference_points[location_type]\n                \n                # Calculate distance using Haversine formula\n                import math\n                \n                def haversine_distance(lat1, lon1, lat2, lon2):\n                    R = 6371  # Earth's radius in kilometers\n                    \n                    lat1_rad = math.radians(lat1)\n                    lon1_rad = math.radians(lon1)\n                    lat2_rad = math.radians(lat2)\n                    lon2_rad = math.radians(lon2)\n                    \n                    dlat = lat2_rad - lat1_rad\n                    dlon = lon2_rad - lon1_rad\n                    \n                    a = math.sin(dlat/2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon/2)**2\n                    c = 2 * math.asin(math.sqrt(a))\n                    \n                    return R * c\n                \n                distance = haversine_distance(ref_lat, ref_lon, lat, lon)\n                \n                # Create result message\n                result_text = f\"\"\"\nüìè **Masofa Hisoboti**\n\nüìç **Manzil:** {location_name}\nüéØ **Belgilangan joy:** {lat:.6f}, {lon:.6f}\n\nüìê **Masofa:** {distance:.2f} km\n‚è± **Taxminiy vaqt:**\n‚Ä¢ üöó Avtomobil: {int(distance * 2)} daqiqa\n‚Ä¢ üö∂ Piyoda: {int(distance * 12)} daqiqa\n\nüó∫ **Navigatsiya:**\n‚Ä¢ [Google Maps Yo'l](https://maps.google.com/maps?saddr={ref_lat},{ref_lon}&daddr={lat},{lon})\n\"\"\"\n                \n                keyboard = types.InlineKeyboardMarkup()\n                keyboard.add(\n                    types.InlineKeyboardButton(\"üó∫ Navigatsiya\", url=f\"https://maps.google.com/maps?saddr={ref_lat},{ref_lon}&daddr={lat},{lon}\"),\n                    types.InlineKeyboardButton(\"üîô Orqaga\", callback_data=f\"back_location_{lat}_{lon}\")\n                )\n                \n                bot.edit_message_text(\n                    result_text,\n                    call.message.chat.id,\n                    call.message.message_id,\n                    reply_markup=keyboard,\n                    parse_mode='Markdown'\n                )\n            \n        except Exception as e:\n            bot.answer_callback_query(call.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.callback_query_handler(func=lambda call: call.data.startswith('nearby_places_'))\n    def handle_nearby_places(call):\n        \"\"\"Show nearby places\"\"\"\n        try:\n            _, _, lat, lon = call.data.split('_')\n            latitude = float(lat)\n            longitude = float(lon)\n            \n            # Simulated nearby places (in real implementation, you would use Google Places API)\n            nearby_info = f\"\"\"\nüìä **Atrofdagi Joylar**\n\nüìç **Koordinatalar:** {latitude:.6f}, {longitude:.6f}\n\nüè¢ **Yaqin ob'yektlar:**\n‚Ä¢ üè™ Do'konlar va supermarketlar\n‚Ä¢ ‚õΩ Yoqilg'i quyish shoxobchalari  \n‚Ä¢ üè• Tibbiyot muassasalari\n‚Ä¢ üçΩ Restoranlar va kafelar\n‚Ä¢ üèß ATM va banklar\n\nüì± **Qo'shimcha ma'lumot:**\nBu joyni quyidagi xizmatlar orqali o'rganishingiz mumkin:\n\"\"\"\n            \n            keyboard = types.InlineKeyboardMarkup()\n            keyboard.add(\n                types.InlineKeyboardButton(\"üó∫ Google Maps\", url=f\"https://maps.google.com/?q={latitude},{longitude}\"),\n                types.InlineKeyboardButton(\"üîç Yandex\", url=f\"https://yandex.ru/maps/?ll={longitude},{latitude}&z=16\")\n            )\n            keyboard.add(\n                types.InlineKeyboardButton(\"üîô Orqaga\", callback_data=f\"back_location_{lat}_{lon}\")\n            )\n            \n            bot.edit_message_text(\n                nearby_info,\n                call.message.chat.id,\n                call.message.message_id,\n                reply_markup=keyboard,\n                parse_mode='Markdown'\n            )\n            \n        except Exception as e:\n            bot.answer_callback_query(call.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.callback_query_handler(func=lambda call: call.data.startswith('refresh_location_'))\n    def handle_location_refresh(call):\n        \"\"\"Refresh location information\"\"\"\n        try:\n            _, _, lat, lon = call.data.split('_')\n            latitude = float(lat)\n            longitude = float(lon)\n            \n            current_time = datetime.now().strftime('%d.%m.%Y %H:%M:%S')\n            \n            refresh_text = f\"\"\"\nüîÑ **Lokatsiya Yangilandi**\n\nüìç **Koordinatalar:** {latitude:.6f}, {longitude:.6f}\n‚è∞ **Yangilangan vaqt:** {current_time}\nüì° **Status:** ‚úÖ Faol va aniq\n\nüéØ **Yangilangan ma'lumotlar:**\n‚Ä¢ GPS signali: Kuchli\n‚Ä¢ Aniqlik: Yuqori\n‚Ä¢ Oxirgi yangilanish: Hozir\n\"\"\"\n            \n            keyboard = types.InlineKeyboardMarkup(row_width=2)\n            keyboard.add(\n                types.InlineKeyboardButton(\"üß≠ Navigatsiya\", url=f\"https://maps.google.com/?q={latitude},{longitude}\"),\n                types.InlineKeyboardButton(\"üì± Telefondan ochish\", url=f\"geo:{latitude},{longitude}\")\n            )\n            keyboard.add(\n                types.InlineKeyboardButton(\"üìè Masofa hisoblash\", callback_data=f\"calc_distance_{latitude}_{longitude}\"),\n                types.InlineKeyboardButton(\"üìä Atrofdagi joylar\", callback_data=f\"nearby_places_{latitude}_{longitude}\")\n            )\n            \n            bot.edit_message_text(\n                refresh_text,\n                call.message.chat.id,\n                call.message.message_id,\n                reply_markup=keyboard,\n                parse_mode='Markdown'\n            )\n            \n            bot.answer_callback_query(call.id, \"üîÑ Ma'lumotlar yangilandi!\")\n            \n        except Exception as e:\n            bot.answer_callback_query(call.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    @bot.callback_query_handler(func=lambda call: call.data.startswith('back_location_'))\n    def handle_back_to_location(call):\n        \"\"\"Return to main location view\"\"\"\n        try:\n            _, _, lat, lon = call.data.split('_')\n            latitude = float(lat)\n            longitude = float(lon)\n            \n            # Recreate the main location interface\n            keyboard = types.InlineKeyboardMarkup(row_width=2)\n            keyboard.add(\n                types.InlineKeyboardButton(\"üß≠ Navigatsiya\", url=f\"https://maps.google.com/?q={latitude},{longitude}\"),\n                types.InlineKeyboardButton(\"üì± Telefondan ochish\", url=f\"geo:{latitude},{longitude}\")\n            )\n            keyboard.add(\n                types.InlineKeyboardButton(\"üìè Masofa hisoblash\", callback_data=f\"calc_distance_{latitude}_{longitude}\"),\n                types.InlineKeyboardButton(\"üîÑ Yangilash\", callback_data=f\"refresh_location_{latitude}_{longitude}\")\n            )\n            keyboard.add(\n                types.InlineKeyboardButton(\"üìä Atrofdagi joylar\", callback_data=f\"nearby_places_{latitude}_{longitude}\")\n            )\n            \n            bot.edit_message_text(\n                f\"üéÆ **Interaktiv Amallar**\\n\\n\"\n                f\"Lokatsiya bilan ishlash uchun tugmalarni bosing:\",\n                call.message.chat.id,\n                call.message.message_id,\n                reply_markup=keyboard,\n                parse_mode='Markdown'\n            )\n            \n        except Exception as e:\n            bot.answer_callback_query(call.id, f\"‚ùå Xatolik: {str(e)}\")\n\n    # Error handler\n    @bot.message_handler(func=lambda message: True)\n    def handle_unknown(message):\n        \"\"\"Handle unknown messages\"\"\"\n        bot.send_message(\n            message.chat.id,\n            \"‚ùì Tushunmadim. Iltimos, menyudan tanlang yoki /start bosing.\"\n        )\n\n    # Start the bot with enhanced error handling for production\n    try:\n        print(\"üöÄ Enhanced Telegram Task Management Bot ishga tushmoqda...\")\n        print(f\"üîë Bot Token: {'‚úÖ Mavjud' if BOT_TOKEN else '‚ùå Mavjud emas'}\")\n        print(f\"üëë Admin chat ID: {ADMIN_CHAT_ID}\")\n        print(f\"üë• Xodimlar soni: {len(EMPLOYEES)}\")\n        print(\"üìä Ma'lumotlar bazasi tayyorlandi\")\n        print(\"‚úÖ Bot muvaffaqiyatli ishga tushdi!\")\n        print(\"üì± Bot Telegram orqali foydalanishga tayyor\")\n        print(\"üõë Botni to'xtatish uchun Ctrl+C bosing\")\n        \n        # Enhanced polling with better error handling for production\n        while True:\n            try:\n                print(\"üîÑ Bot doimiy ishlash rejimida...\")\n                bot.infinity_polling(none_stop=True, interval=1, timeout=20, long_polling_timeout=60)\n            except Exception as e:\n                print(f\"‚ö†Ô∏è Bot ulanishida xatolik: {e}\")\n                print(\"üîÑ 10 soniyadan keyin avtomatik qayta ulanish...\")\n                import time\n                time.sleep(10)\n                print(\"üöÄ Bot qayta ishga tushirilmoqda...\")\n                continue\n        \n    except KeyboardInterrupt:\n        print(\"\\nüõë Bot to'xtatildi.\")\n        sys.exit(0)\n    except Exception as e:\n        print(f\"‚ùå Jiddiy bot xatosi: {e}\")\n        print(\"üö® Bot avtomatik qayta ishga tushirilmoqda...\")\n        import time\n        time.sleep(15)\n        print(\"üîÑ Qayta ulanish...\")\n        # Recursive restart to ensure bot never stops\n        try:\n            main()  # Restart the entire main function\n        except Exception as restart_error:\n            print(f\"‚ùå Qayta ishga tushirishda xatolik: {restart_error}\")\n            print(\"‚è≥ 30 soniya kutib, yana urinish...\")\n            time.sleep(30)\n            main()  # Try again\n\nif __name__ == \"__main__\":\n    main()\n","size_bytes":165303},"models.py":{"content":"import sqlite3\nfrom datetime import datetime\nfrom typing import List, Dict, Optional\nimport os\n\nclass DatabaseModel:\n    def __init__(self, db_path: str):\n        self.db_path = db_path\n        self.init_database()\n    \n    def init_database(self):\n        \"\"\"Initialize database tables\"\"\"\n        pass\n    \n    def get_connection(self):\n        \"\"\"Get database connection\"\"\"\n        return sqlite3.connect(self.db_path)\n\nclass TaskModel(DatabaseModel):\n    def __init__(self, db_path: str = \"tasks.db\"):\n        super().__init__(db_path)\n    \n    def init_database(self):\n        \"\"\"Initialize tasks database\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS tasks (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                vazifa TEXT NOT NULL,\n                manzil TEXT NOT NULL,\n                xodim TEXT NOT NULL,\n                summa REAL NOT NULL,\n                telefon TEXT,\n                status TEXT DEFAULT 'Davom etmoqda',\n                sana TEXT NOT NULL,\n                vaqt TEXT NOT NULL\n            )\n        \"\"\")\n        conn.commit()\n        conn.close()\n    \n    def add_task(self, description: str, location: str, employee: str, \n                 amount: float, phone: str = \"Telefon yo'q\") -> bool:\n        \"\"\"Add new task to database\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            now = datetime.now()\n            cursor.execute(\"\"\"\n                INSERT INTO tasks (vazifa, manzil, xodim, summa, telefon, status, sana, vaqt)\n                VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n            \"\"\", (description, location, employee, amount, phone, \"‚è≥ Davom etmoqda\", \n                  now.strftime(\"%Y-%m-%d\"), now.strftime(\"%H:%M:%S\")))\n            conn.commit()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Task qo'shishda xato: {e}\")\n            return False\n    \n    def get_tasks_by_employee(self, employee: str, status: str = None) -> List[Dict]:\n        \"\"\"Get tasks for specific employee\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n        if status:\n            cursor.execute(\"\"\"\n                SELECT id, vazifa, manzil, summa, telefon, status, sana, vaqt \n                FROM tasks WHERE xodim = ? AND status = ?\n            \"\"\", (employee, status))\n        else:\n            cursor.execute(\"\"\"\n                SELECT id, vazifa, manzil, summa, telefon, status, sana, vaqt \n                FROM tasks WHERE xodim = ?\n            \"\"\", (employee,))\n        \n        rows = cursor.fetchall()\n        conn.close()\n        \n        tasks = []\n        for row in rows:\n            tasks.append({\n                'id': row[0],\n                'description': row[1],\n                'location': row[2],\n                'amount': row[3],\n                'phone': row[4],\n                'status': row[5],\n                'date': row[6],\n                'time': row[7]\n            })\n        return tasks\n    \n    def update_task_status(self, task_id: int, status: str) -> bool:\n        \"\"\"Update task status\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            cursor.execute(\"UPDATE tasks SET status = ? WHERE id = ?\", (status, task_id))\n            conn.commit()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Status yangilashda xato: {e}\")\n            return False\n    \n    def get_tasks_in_date_range(self, employee: str, start_date: str, end_date: str, status: str = \"‚úÖ Bajarildi\") -> List[Dict]:\n        \"\"\"Get tasks in date range\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            SELECT vazifa, manzil, summa, sana FROM tasks\n            WHERE xodim = ? AND status = ? AND sana BETWEEN ? AND ?\n        \"\"\", (employee, status, start_date, end_date))\n        rows = cursor.fetchall()\n        conn.close()\n        \n        tasks = []\n        for row in rows:\n            tasks.append({\n                'description': row[0],\n                'location': row[1],\n                'amount': row[2],\n                'date': row[3]\n            })\n        return tasks\n\nclass DebtModel(DatabaseModel):\n    def __init__(self, db_path: str = \"qarzdorlik.db\"):\n        super().__init__(db_path)\n    \n    def init_database(self):\n        \"\"\"Initialize debt database\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS debts (\n                id INTEGER PRIMARY KEY AUTOINCREMENT,\n                employee_name TEXT NOT NULL,\n                amount REAL NOT NULL,\n                reason TEXT NOT NULL,\n                date TEXT NOT NULL\n            )\n        \"\"\")\n        conn.commit()\n        conn.close()\n    \n    def add_debt(self, employee_name: str, amount: float, reason: str) -> bool:\n        \"\"\"Add debt record\"\"\"\n        try:\n            conn = self.get_connection()\n            cursor = conn.cursor()\n            date = datetime.now().strftime(\"%Y-%m-%d\")\n            cursor.execute(\"\"\"\n                INSERT INTO debts (employee_name, amount, reason, date)\n                VALUES (?, ?, ?, ?)\n            \"\"\", (employee_name, amount, reason, date))\n            conn.commit()\n            conn.close()\n            return True\n        except Exception as e:\n            print(f\"Qarz qo'shishda xato: {e}\")\n            return False\n    \n    def get_debts_by_employee(self, employee_name: str) -> List[Dict]:\n        \"\"\"Get debts for specific employee\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            SELECT amount, reason, date FROM debts WHERE employee_name = ?\n        \"\"\", (employee_name,))\n        rows = cursor.fetchall()\n        conn.close()\n        \n        debts = []\n        for row in rows:\n            debts.append({\n                'amount': row[0],\n                'reason': row[1],\n                'date': row[2]\n            })\n        return debts\n    \n    def get_total_debt(self, employee_name: str) -> float:\n        \"\"\"Get total debt for employee\"\"\"\n        conn = self.get_connection()\n        cursor = conn.cursor()\n        cursor.execute(\"\"\"\n            SELECT SUM(amount) FROM debts WHERE employee_name = ?\n        \"\"\", (employee_name,))\n        result = cursor.fetchone()\n        conn.close()\n        return result[0] if result[0] else 0.0\n","size_bytes":6548},"pyproject.toml":{"content":"[project]\nname = \"repl-nix-workspace\"\nversion = \"0.1.0\"\ndescription = \"Add your description here\"\nrequires-python = \">=3.11\"\ndependencies = [\n    \"flask>=3.1.1\",\n    \"openpyxl>=3.1.5\",\n    \"pytelegrambotapi>=4.28.0\",\n    \"requests>=2.32.4\",\n    \"trafilatura>=2.0.0\",\n]\n","size_bytes":269},"replit.md":{"content":"# Overview\n\nThis project is an Enhanced Telegram Task Management Bot built in Python. Its main purpose is to facilitate comprehensive task assignment and tracking between administrators and employees. Key capabilities include creating tasks, assigning them, tracking completion status with media, and generating detailed reports. The bot supports advanced features like location sharing, real-time employee tracking, Excel-based reporting, debt management (including a \"Boshqalar\" category), handling various media files (photos, videos, voice), direct employee management, comprehensive data management, and multi-step task completion workflows. The system is designed for small to medium-sized teams needing sophisticated work assignment management through Telegram with professional reporting capabilities.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\nTask completion flow: Employees should return to main menu (employee panel) after completing tasks, not task list.\n\n# System Architecture\n\n## Bot Framework and Communication\n- **Framework**: pyTelegramBotAPI (telebot)\n- **Architecture Pattern**: Single-file comprehensive design with advanced state management\n- **Session Management**: Database-persistent user state tracking with JSON serialization\n- **Multi-step Conversations**: Advanced conversation flows with context preservation\n\n## Data Storage\n- **Database**: Single SQLite database (`task_management.db`) with normalized schema\n- **Database Tables**: `tasks`, `debts`, `messages`, `user_states`\n- **File Storage**: Organized `media/` and `reports/` directories with automatic creation\n- **Media Management**: Advanced file handling for photos, videos, voice messages with unique naming\n\n## Authentication and Authorization\n- **Admin Authentication**: Environment-variable based secure admin code verification\n- **Employee Identification**: Chat ID-based recognition with employee roster\n- **Role-based Access**: Permission system with admin-only features\n- **State Persistence**: Database-backed session management\n\n## Core Features Architecture\n- **Task Management**: Complete lifecycle tracking (pending ‚Üí in_progress ‚Üí completed) with optional payment amounts\n- **Media Integration**: Support for task completion with photo/video proof and voice reports\n- **Location Services**: GPS location sharing for task assignments and employee tracking; includes animated cards with Google Maps/Yandex Maps integration, distance calculation, and navigation links.\n- **Reporting System**: Professional Excel generation with multi-sheet reports and statistics\n- **Debt Management**: Integrated debt tracking with task completion workflows, supporting employees and \"Boshqalar\" (Others) category\n- **Employee Management**: Direct employee addition by admins with name and Telegram ID\n- **Data Management**: Comprehensive data viewing, insertion, and deletion capabilities\n- **Real-time Notifications**: Admin notification system for task updates and completions\n- **Customer Inquiry System**: Comprehensive management system for inquiries from website and Telegram, with admin response capabilities and real-time notifications.\n- **Payment Processing System**: Three-way payment method (card, cash, debt) with detailed admin notifications.\n- **Streamlined Employee Experience**: Focused work environment without entertainment distractions.\n\n## File and Data Management\n- **Excel Integration**: `openpyxl` for multi-sheet report generation\n- **Directory Structure**: Organized `reports/` and `media/` directories\n- **Media Handling**: Secure file download, storage, and admin forwarding\n- **Data Serialization**: JSON-based complex data storage for conversation states\n\n# External Dependencies\n\n## Core Libraries\n- **pyTelegramBotAPI**: Telegram Bot API wrapper\n- **openpyxl**: Excel file creation\n- **sqlite3**: Built-in Python SQLite interface\n- **json**: Data serialization\n\n## Telegram Bot API Features\n- **Bot Token**: Environment variable-based authentication\n- **Webhook/Polling**: Enhanced polling with error recovery\n- **Message Types**: Support for text, location, photos, videos, voice messages\n- **Interactive Elements**: Inline keyboards, callback queries, and custom reply keyboards\n- **File Handling**: Media download, processing, and forwarding\n\n## Configuration Management\n- **Environment Variables**: `BOT_TOKEN`, `ADMIN_CODE`, `ADMIN_CHAT_ID`\n- **Static Configuration**: Employee roster in `config.py`\n- **Runtime Configuration**: Automatic database and directory initialization\n- **Dynamic Employee Management**: Real-time employee addition updating `config.py`\n\n## External Services/APIs\n- **Google Maps / Yandex Maps**: For location sharing and navigation links\n- **Website API Integration**: RESTful API (`website_api.py`) for submitting and managing customer inquiries from an external website.","size_bytes":4860},"utils.py":{"content":"import os\nimport json\nimport openpyxl\nfrom datetime import datetime, timedelta\nfrom typing import List, Tuple, Optional, Dict, Any\nfrom config import REPORTS_DIR, MEDIA_DIR\nfrom database import get_employee_tasks, get_debts, get_task_statistics\n\ndef ensure_directories():\n    \"\"\"Ensure required directories exist\"\"\"\n    os.makedirs(REPORTS_DIR, exist_ok=True)\n    os.makedirs(MEDIA_DIR, exist_ok=True)\n\ndef save_media_file(file_info, bot, media_type: str) -> str:\n    \"\"\"Save media file and return file path\"\"\"\n    ensure_directories()\n    \n    # Download file\n    downloaded_file = bot.download_file(file_info.file_path)\n    \n    # Generate filename\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    file_extension = os.path.splitext(file_info.file_path)[1]\n    filename = f\"{media_type}_{timestamp}{file_extension}\"\n    \n    # Save file\n    filepath = os.path.join(MEDIA_DIR, filename)\n    with open(filepath, 'wb') as f:\n        f.write(downloaded_file)\n    \n    return filepath\n\ndef format_task_info(task: Tuple) -> str:\n    \"\"\"Format task information for display\"\"\"\n    (task_id, description, location_lat, location_lon, location_address,\n     payment_amount, assigned_to, assigned_by, status, created_at,\n     started_at, completed_at, completion_report, completion_media, received_amount) = task\n    \n    # Format creation time\n    try:\n        created_time = datetime.fromisoformat(created_at).strftime(\"%d.%m.%Y %H:%M\")\n    except:\n        created_time = created_at\n    \n    # Status emoji\n    status_emoji = {\n        \"pending\": \"‚è≥\",\n        \"in_progress\": \"üîÑ\",\n        \"completed\": \"‚úÖ\"\n    }.get(status, \"‚ùì\")\n    \n    # Safe status formatting\n    status_text = status.title() if status else \"Noma'lum\"\n    \n    task_text = f\"\"\"\nüÜî Vazifa ID: {task_id}\n{status_emoji} Holat: {status_text}\n\nüìù Tavsif: {description}\nüí∞ To'lov: {f\"{payment_amount:,.0f} so'm\" if payment_amount else \"Belgilanmagan\"}\nüìÖ Yaratilgan: {created_time}\n\"\"\"\n    \n    if location_lat and location_lon:\n        task_text += f\"üìç Lokatsiya: {location_lat:.6f}, {location_lon:.6f}\\n\"\n    \n    if status == \"completed\" and received_amount is not None:\n        task_text += f\"üíµ Olingan: {received_amount:,.0f} so'm\\n\"\n    \n    if completion_report:\n        task_text += f\"üìã Hisobot: {completion_report[:100]}{'...' if len(completion_report) > 100 else ''}\\n\"\n    \n    return task_text.strip()\n\ndef generate_employee_report(employee_name: str, days: int = 30) -> Optional[str]:\n    \"\"\"Generate Excel report for employee\"\"\"\n    ensure_directories()\n    \n    # Get completed tasks\n    end_date = datetime.now()\n    start_date = end_date - timedelta(days=days)\n    \n    tasks = get_employee_tasks(employee_name, \"completed\")\n    if not tasks:\n        return None\n    \n    # Filter by date\n    filtered_tasks = []\n    for task in tasks:\n        try:\n            task_date = datetime.fromisoformat(task[9])  # created_at\n            if start_date <= task_date <= end_date:\n                filtered_tasks.append(task)\n        except:\n            continue\n    \n    if not filtered_tasks:\n        return None\n    \n    # Create workbook\n    wb = openpyxl.Workbook()\n    ws = wb.active\n    ws.title = f\"{employee_name} Hisoboti\"\n    \n    # Headers\n    headers = [\n        \"ID\", \"Tavsif\", \"To'lov (so'm)\", \"Olingan (so'm)\", \n        \"Yaratilgan\", \"Yakunlangan\", \"Hisobot\"\n    ]\n    ws.append(headers)\n    \n    # Data\n    total_payment = 0\n    total_received = 0\n    \n    for task in filtered_tasks:\n        (task_id, description, location_lat, location_lon, location_address,\n         payment_amount, assigned_to, assigned_by, status, created_at,\n         started_at, completed_at, completion_report, completion_media, received_amount) = task\n        \n        total_payment += payment_amount or 0\n        total_received += received_amount or 0\n        \n        # Format dates\n        try:\n            created_formatted = datetime.fromisoformat(created_at).strftime(\"%d.%m.%Y\")\n        except:\n            created_formatted = created_at\n        \n        try:\n            completed_formatted = datetime.fromisoformat(completed_at).strftime(\"%d.%m.%Y\") if completed_at else \"\"\n        except:\n            completed_formatted = completed_at or \"\"\n        \n        ws.append([\n            task_id,\n            description[:50] + (\"...\" if len(description) > 50 else \"\"),\n            payment_amount or 0,\n            received_amount or 0,\n            created_formatted,\n            completed_formatted,\n            (completion_report[:30] + \"...\") if completion_report and len(completion_report) > 30 else (completion_report or \"\")\n        ])\n    \n    # Summary\n    ws.append([])\n    ws.append([\"JAMI:\", \"\", total_payment, total_received, \"\", \"\", \"\"])\n    \n    # Save file\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = f\"{employee_name}_hisobot_{timestamp}.xlsx\"\n    filepath = os.path.join(REPORTS_DIR, filename)\n    \n    wb.save(filepath)\n    return filepath\n\ndef generate_admin_report() -> Optional[str]:\n    \"\"\"Generate comprehensive admin report\"\"\"\n    ensure_directories()\n    \n    # Get statistics\n    stats = get_task_statistics()\n    \n    # Create workbook\n    wb = openpyxl.Workbook()\n    \n    # Tasks summary sheet\n    ws1 = wb.active\n    ws1.title = \"Umumiy ma'lumot\"\n    \n    ws1.append([\"Vazifalar statistikasi\"])\n    ws1.append([])\n    ws1.append([\"Jami vazifalar:\", stats[\"total_tasks\"]])\n    ws1.append([\"Jami to'lovlar:\", f\"{stats['total_payments']:,.0f} so'm\"])\n    ws1.append([\"Jami qarzlar:\", f\"{stats['total_debts']:,.0f} so'm\"])\n    ws1.append([])\n    \n    ws1.append([\"Holat bo'yicha:\"])\n    for status, count in stats[\"status_counts\"].items():\n        status_name = {\n            \"pending\": \"Kutilayotgan\",\n            \"in_progress\": \"Bajarilmoqda\",\n            \"completed\": \"Yakunlangan\"\n        }.get(status, status)\n        ws1.append([status_name, count])\n    \n    # Tasks details sheet\n    ws2 = wb.create_sheet(\"Vazifalar\")\n    from database import DATABASE_PATH\n    import sqlite3\n    \n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    cursor.execute(\"\"\"\n        SELECT id, description, assigned_to, payment_amount, received_amount, \n               status, created_at, completed_at\n        FROM tasks\n        ORDER BY created_at DESC\n    \"\"\")\n    \n    tasks_data = cursor.fetchall()\n    conn.close()\n    \n    # Headers\n    ws2.append([\"ID\", \"Tavsif\", \"Xodim\", \"To'lov\", \"Olingan\", \"Holat\", \"Yaratilgan\", \"Yakunlangan\"])\n    \n    for task in tasks_data:\n        task_id, description, assigned_to, payment_amount, received_amount, status, created_at, completed_at = task\n        \n        # Format dates\n        try:\n            created_formatted = datetime.fromisoformat(created_at).strftime(\"%d.%m.%Y\")\n        except:\n            created_formatted = created_at\n        \n        try:\n            completed_formatted = datetime.fromisoformat(completed_at).strftime(\"%d.%m.%Y\") if completed_at else \"\"\n        except:\n            completed_formatted = \"\"\n        \n        status_name = {\n            \"pending\": \"Kutilayotgan\",\n            \"in_progress\": \"Bajarilmoqda\", \n            \"completed\": \"Yakunlangan\"\n        }.get(status, status)\n        \n        ws2.append([\n            task_id,\n            description[:50] + (\"...\" if len(description) > 50 else \"\"),\n            assigned_to,\n            payment_amount,\n            received_amount or 0,\n            status_name,\n            created_formatted,\n            completed_formatted\n        ])\n    \n    # Debts sheet\n    ws3 = wb.create_sheet(\"Qarzlar\")\n    debts = get_debts()\n    \n    ws3.append([\"ID\", \"Xodim\", \"Miqdor\", \"Sabab\", \"To'lov sanasi\", \"Yaratilgan\"])\n    \n    for debt in debts:\n        debt_id, employee_name, employee_chat_id, task_id, amount, reason, payment_date, created_at, status = debt\n        \n        try:\n            created_formatted = datetime.fromisoformat(created_at).strftime(\"%d.%m.%Y\")\n        except:\n            created_formatted = created_at\n        \n        ws3.append([\n            debt_id,\n            employee_name,\n            amount,\n            reason,\n            payment_date,\n            created_formatted\n        ])\n    \n    # Save file\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = f\"admin_hisobot_{timestamp}.xlsx\"\n    filepath = os.path.join(REPORTS_DIR, filename)\n    \n    wb.save(filepath)\n    return filepath\n\ndef serialize_json_data(data: Dict[str, Any]) -> str:\n    \"\"\"Serialize data to JSON string\"\"\"\n    return json.dumps(data, ensure_ascii=False)\n\ndef parse_json_data(data_str: str) -> Dict[str, Any]:\n    \"\"\"Parse JSON string to data\"\"\"\n    try:\n        return json.loads(data_str) if data_str else {}\n    except:\n        return {}\n\ndef generate_debts_report_excel() -> Optional[str]:\n    \"\"\"Generate Excel report for debts\"\"\"\n    from database import get_debts\n    from datetime import datetime\n    import openpyxl\n    \n    ensure_directories()\n    \n    # Get all debts\n    debts = get_debts()\n    if not debts:\n        return None\n    \n    # Create workbook\n    wb = openpyxl.Workbook()\n    ws = wb.active\n    ws.title = \"Qarzlar Hisoboti\"\n    \n    # Headers\n    headers = [\n        \"ID\", \"Xodim\", \"Miqdor (so'm)\", \"Sabab\", \"To'lov sanasi\", \n        \"Yaratilgan\", \"Holat\"\n    ]\n    ws.append(headers)\n    \n    # Data\n    total_debt = 0\n    paid_debt = 0\n    \n    for debt in debts:\n        debt_id, employee_name, employee_chat_id, task_id, amount, reason, payment_date, created_at, status = debt\n        \n        if status == 'unpaid':\n            total_debt += amount\n        else:\n            paid_debt += amount\n        \n        # Format dates\n        try:\n            created_formatted = datetime.fromisoformat(created_at).strftime(\"%d.%m.%Y\")\n        except:\n            created_formatted = created_at\n        \n        status_text = \"To'lanmagan\" if status == 'unpaid' else \"To'langan\"\n        \n        ws.append([\n            debt_id,\n            employee_name,\n            amount,\n            reason,\n            payment_date,\n            created_formatted,\n            status_text\n        ])\n    \n    # Summary\n    ws.append([])\n    ws.append([\"JAMI:\", \"\", total_debt + paid_debt, \"\", \"\", \"\", \"\"])\n    ws.append([\"To'lanmagan:\", \"\", total_debt, \"\", \"\", \"\", \"\"])\n    ws.append([\"To'langan:\", \"\", paid_debt, \"\", \"\", \"\", \"\"])\n    \n    # Save file\n    timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n    filename = f\"qarzlar_hisoboti_{timestamp}.xlsx\"\n    filepath = os.path.join(REPORTS_DIR, filename)\n    \n    wb.save(filepath)\n    return filepath\n\ndef generate_custom_export(export_type: str) -> Optional[str]:\n    \"\"\"Generate custom data export based on type\"\"\"\n    ensure_directories()\n    \n    from database import DATABASE_PATH\n    import sqlite3\n    \n    conn = sqlite3.connect(DATABASE_PATH)\n    cursor = conn.cursor()\n    \n    wb = openpyxl.Workbook()\n    \n    try:\n        if export_type == \"üìä Barcha ma'lumotlar\":\n            # Tasks sheet\n            ws_tasks = wb.active\n            ws_tasks.title = \"Vazifalar\"\n            ws_tasks.append([\"ID\", \"Tavsif\", \"Xodim\", \"Holat\", \"To'lov\", \"Olingan\", \"Yaratilgan\", \"Yakunlangan\"])\n            \n            cursor.execute(\"SELECT * FROM tasks ORDER BY created_at DESC\")\n            for task in cursor.fetchall():\n                ws_tasks.append([\n                    task[0], task[1], task[6], task[8], task[5] or 0, \n                    task[14] or 0, task[9], task[11] or \"\"\n                ])\n            \n            # Debts sheet\n            ws_debts = wb.create_sheet(\"Qarzlar\")\n            ws_debts.append([\"Xodim\", \"Miqdor\", \"Sabab\", \"To'lov sanasi\", \"Yaratilgan\"])\n            \n            cursor.execute(\"SELECT * FROM debts ORDER BY created_at DESC\")\n            for debt in cursor.fetchall():\n                ws_debts.append([debt[1], debt[3], debt[4], debt[5], debt[6]])\n            \n            # Locations sheet\n            ws_locations = wb.create_sheet(\"Lokatsiyalar\")\n            ws_locations.append([\"Xodim\", \"Latitude\", \"Longitude\", \"Tur\", \"Vaqt\"])\n            \n            cursor.execute(\"SELECT * FROM employee_locations ORDER BY created_at DESC LIMIT 1000\")\n            for loc in cursor.fetchall():\n                ws_locations.append([loc[1], loc[3], loc[4], loc[5], loc[6]])\n        \n        elif export_type == \"üìù Faqat vazifalar\":\n            ws = wb.active\n            ws.title = \"Barcha Vazifalar\"\n            ws.append([\"ID\", \"Tavsif\", \"Xodim\", \"Holat\", \"To'lov (so'm)\", \"Olingan (so'm)\", \n                      \"Joylashuv\", \"Yaratilgan\", \"Boshlangan\", \"Yakunlangan\", \"Hisobot\"])\n            \n            cursor.execute(\"SELECT * FROM tasks ORDER BY created_at DESC\")\n            for task in cursor.fetchall():\n                ws.append([\n                    task[0], task[1], task[6], task[8], task[5] or 0, task[14] or 0,\n                    task[4] or \"Belgilanmagan\", task[9], task[10] or \"\", task[11] or \"\", \n                    task[12][:100] if task[12] else \"\"\n                ])\n        \n        elif export_type == \"üí∏ Faqat qarzlar\":\n            ws = wb.active\n            ws.title = \"Barcha Qarzlar\"\n            ws.append([\"Xodim\", \"Chat ID\", \"Vazifa ID\", \"Miqdor (so'm)\", \"Sabab\", \n                      \"To'lov sanasi\", \"Yaratilgan\"])\n            \n            cursor.execute(\"SELECT * FROM debts ORDER BY created_at DESC\")\n            for debt in cursor.fetchall():\n                ws.append([debt[1], debt[2], debt[3] or \"\", debt[4], debt[5], debt[6], debt[7]])\n        \n        elif export_type == \"üìç Lokatsiya tarixi\":\n            ws = wb.active\n            ws.title = \"Lokatsiya Tarixi\"\n            ws.append([\"Xodim\", \"Chat ID\", \"Latitude\", \"Longitude\", \"Tur\", \"Vaqt\", \"Live\"])\n            \n            cursor.execute(\"SELECT * FROM employee_locations ORDER BY created_at DESC\")\n            for loc in cursor.fetchall():\n                ws.append([loc[1], loc[2], loc[3], loc[4], loc[5], loc[6], loc[7]])\n        \n        conn.close()\n        \n        # Save file\n        timestamp = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n        safe_type = export_type.replace(\"üìä\", \"\").replace(\"üìù\", \"\").replace(\"üí∏\", \"\").replace(\"üìç\", \"\").strip()\n        filename = f\"export_{safe_type.replace(' ', '_')}_{timestamp}.xlsx\"\n        filepath = os.path.join(REPORTS_DIR, filename)\n        \n        wb.save(filepath)\n        return filepath\n        \n    except Exception as e:\n        print(f\"Export error: {e}\")\n        return None","size_bytes":14475},"attached_assets/bot_1754292071736.py":{"content":"import telebot\r\nfrom telebot import types\r\nfrom datetime import datetime , timedelta\r\nimport openpyxl\r\nimport os\r\nimport sqlite3\r\n\r\nBOT_TOKEN = \"8056968914:AAGmHd9MNUnSSxMJC-mvfztzwB5BuqWeH6Q\"\r\nbot = telebot.TeleBot(BOT_TOKEN)\r\n\r\nADMIN_CODE = \"1234\"\r\nADMIN_CHAT_ID = 7792775986  # ‚úÖ vergul olib tashlandi\r\n\r\nmsg_list = []\r\nadmin_task_data = {}\r\nemployee_states = {}\r\nemployee_tasks = {}\r\n\r\nemployees = {\r\n    \"üë®‚Äçüîß Kamol\": 7442895800,\r\n    \"üë®‚Äçüîß Fozil\": 747368650,\r\n    \"üë®‚Äçüîß Asomiddin\": 1894259641,\r\n    \"üë®‚Äçüîß Farruh\": 1037206796,\r\n}\r\n\r\ndef save_task_to_excel(description, location, employees_list, payment, status=\"‚è≥ Davom etmoqda\"):\r\n    file_name = \"topshiriqlar.xlsx\"\r\n    headers = [\"Sana\", \"Vaqt\", \"Topshiriq\", \"Lokatsiya\", \"Hodimlar\", \"Pul miqdori\", \"Holat\"]\r\n\r\n    now = datetime.now()\r\n    date_str = now.strftime(\"%Y-%m-%d\")\r\n    time_str = now.strftime(\"%H:%M:%S\")\r\n\r\n    if not os.path.exists(file_name):\r\n        wb = openpyxl.Workbook()\r\n        sheet = wb.active\r\n        sheet.append(headers)\r\n    else:\r\n        wb = openpyxl.load_workbook(file_name)\r\n        sheet = wb.active\r\n\r\n    loc_str = f\"{location.latitude}, {location.longitude}\"\r\n    emp_str = \", \".join(employees_list)\r\n\r\n    sheet.append([date_str, time_str, description, loc_str, emp_str, payment, status])\r\n    wb.save(file_name)\r\n\r\n@bot.message_handler(commands=['start'])\r\ndef start_message(message):\r\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n    markup.add(\"üîê Admin\", \"üë§ Xodim\")\r\n    bot.send_message(message.chat.id, \"Assalomu alaykum!\\nIltimos, rolingizni tanlang:\", reply_markup=markup)\r\n\r\n@bot.message_handler(commands=['getid'])\r\ndef send_admin_id(message):\r\n    bot.reply_to(message, f\"üÜî Sizning chat ID'ingiz: {message.chat.id}\")\r\n\r\n@bot.message_handler(func=lambda message: message.text == \"üîê Admin\")\r\ndef ask_code(message):\r\n    msg = bot.send_message(message.chat.id, \"üîë Iltimos, admin kodini kiriting:\")\r\n    bot.register_next_step_handler(msg, verify_code)\r\n\r\ndef verify_code(message):\r\n    if message.text == ADMIN_CODE:\r\n        bot.send_message(message.chat.id, \"‚úÖ Xush kelibsiz, admin!\")\r\n        show_admin_panel(message)\r\n    else:\r\n        msg = bot.send_message(message.chat.id, \"‚ùå Kod noto‚Äòg‚Äòri. Qaytadan urinib ko‚Äòring:\")\r\n        bot.register_next_step_handler(msg, verify_code)\r\n\r\ndef show_admin_panel(message):\r\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n    markup.add(\"üìù Topshiriqlar\", \"üìä Qarzdorlik\", \"üìã Hisobot\", \"‚¨ÖÔ∏è Ortga\")\r\n    msg = bot.send_message(message.chat.id, \"Admin panelga xush kelibsiz!\", reply_markup=markup)\r\n    msg_list.append(msg)\r\n\r\ndef delete_old_messages():\r\n    for msg in msg_list:\r\n        try:\r\n            bot.delete_message(msg.chat.id, msg.message_id)\r\n        except Exception as e:\r\n            print(f\"Xabar o‚Äòchirilmadi: {e}\")\r\n    msg_list.clear()\r\n\r\n\r\n    # Har bir topshiriqni alohida yuborish:\r\n    for msg in msg_list:\r\n        bot.send_message(message.chat.id, msg)\r\n\r\n\r\n@bot.message_handler(func=lambda message: message.text == \"üìù Topshiriqlar\")\r\ndef start_task_creation(message):\r\n    chat_id = message.chat.id\r\n    admin_task_data[chat_id] = {}\r\n    msg = bot.send_message(chat_id, \"üìù Topshiriq matnini kiriting:\")\r\n    bot.register_next_step_handler(msg, get_task_text)\r\n\r\ndef get_task_text(message):\r\n    chat_id = message.chat.id\r\n    admin_task_data[chat_id][\"description\"] = message.text\r\n\r\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n    loc_btn = types.KeyboardButton(\"üìç Lokatsiyani yuborish\", request_location=True)\r\n    markup.add(loc_btn)\r\n    bot.send_message(chat_id, \"üìç Lokatsiyani yuboring:\", reply_markup=markup)\r\n\r\n@bot.message_handler(content_types=['location'])\r\ndef receive_location(message):\r\n    chat_id = message.chat.id\r\n    lat = message.location.latitude\r\n    lon = message.location.longitude\r\n    admin_task_data[chat_id][\"location\"] = message.location\r\n\r\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n    markup.add(\"üí∞ Pul miqdori\")\r\n    bot.send_message(chat_id, \"‚úÖ Lokatsiya qabul qilindi.\\nüí∞ Endi pul miqdorini kiriting:\", reply_markup=markup)\r\n\r\n@bot.message_handler(func=lambda message: message.text == \"üí∞ Pul miqdori\")\r\ndef ask_payment(message):\r\n    msg = bot.send_message(message.chat.id, \"üí∏ Pul miqdorini kiriting:\")\r\n    bot.register_next_step_handler(msg, save_payment)\r\n\r\ndef save_payment(message):\r\n    chat_id = message.chat.id\r\n    admin_task_data[chat_id][\"payment\"] = message.text\r\n\r\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n    markup.add(\"üë• Kerakli hodimlar\")\r\n    bot.send_message(chat_id, \"üë• Endi kerakli hodimlarni tanlang:\", reply_markup=markup)\r\n\r\n@bot.message_handler(func=lambda message: message.text == \"üë• Kerakli hodimlar\")\r\ndef choose_employees(message):\r\n    chat_id = message.chat.id\r\n    admin_task_data[chat_id][\"selected\"] = []\r\n\r\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\r\n    for name in employees:\r\n        markup.add(name)\r\n    markup.add(\"üì® Yuborish\")\r\n    bot.send_message(chat_id, \"Tanlang (bir nechta hodim tanlashingiz mumkin):\", reply_markup=markup)\r\n    bot.register_next_step_handler(message, select_employee)\r\n\r\ndef select_employee(message):\r\n    chat_id = message.chat.id\r\n    name = message.text\r\n\r\n    if name == \"üì® Yuborish\":\r\n        send_task_to_employees(message)\r\n        return\r\n\r\n    if name in employees:\r\n        if name not in admin_task_data.get(chat_id, {}).get(\"selected\", []):\r\n            admin_task_data[chat_id][\"selected\"].append(name)\r\n            bot.send_message(chat_id, f\"‚úÖ {name} tanlandi.\")\r\n        else:\r\n            bot.send_message(chat_id, f\"‚ö†Ô∏è {name} allaqachon tanlangan.\")\r\n    else:\r\n        bot.send_message(chat_id, \"‚ùå Tugmalardan birini tanlang.\")\r\n\r\n    bot.register_next_step_handler(message, select_employee)\r\n\r\ndef send_task_to_employees(message):\r\n    chat_id = message.chat.id\r\n    data = admin_task_data.get(chat_id)\r\n\r\n    if not data or \"location\" not in data or \"description\" not in data or \"payment\" not in data or not data.get(\"selected\"):\r\n        bot.send_message(chat_id, \"‚ùå Ma'lumotlar to‚Äòliq emas. Iltimos, qaytadan boshlang.\")\r\n        return\r\n\r\n    lat, lon = data[\"location\"].latitude, data[\"location\"].longitude\r\n    task_text = f\"üì¢ Sizga yangi topshiriq:\\n\\nüìù {data['description']}\\nüìç Lokatsiya: xaritada\\nüí∞ Pul: {data['payment']} so‚Äòm\"\r\n\r\n    for name in data[\"selected\"]:\r\n        user_id = employees.get(name)\r\n        if not user_id:\r\n            continue\r\n        try:\r\n            bot.send_message(user_id, task_text)\r\n            bot.send_location(user_id, latitude=lat, longitude=lon)\r\n\r\n            # ‚úÖ Hodimga topshiriq qo‚Äòshish\r\n            short_name = name.split()[-1]\r\n            employee_tasks.setdefault(short_name, []).append({\r\n                'description': data['description'],\r\n                'location': f\"{lat}, {lon}\",\r\n                'payment': data['payment'],\r\n                'phone': \"Telefon yo‚Äòq\",\r\n                'status': \"‚è≥ Davom etmoqda\"\r\n            \r\n                \r\n            })\r\n\r\n        except Exception as e:\r\n            bot.send_message(chat_id, f\"‚ö†Ô∏è {name} ga yuborilmadi.\\nXato: {e}\")\r\n\r\n    save_task_to_excel(data['description'], data['location'], data['selected'], data['payment'])\r\n    bot.send_message(chat_id, \"‚úÖ Topshiriq yuborildi. Bajarilishini kuting.\")\r\n    show_admin_panel(message)\r\n\r\n@bot.message_handler(func=lambda message: message.text == \"üìã Hisobot\")\r\ndef show_report_menu(message):\r\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n    markup.add(\"üìÖ 30 kunlik hisobot\", \"üóì 1 haftalik hisobot\")\r\n    markup.add(\"üì§ Excel faylga chop etish\", \"üîô Ortga\")\r\n    bot.send_message(message.chat.id, \"Quyidagilardan birini tanlang:\", reply_markup=markup)\r\n\r\n@bot.message_handler(func=lambda message: message.text == \"üìÖ 30 kunlik hisobot\")\r\ndef report_30_days(message):\r\n    chat_id = message.chat.id\r\n    name = employee_states.get(chat_id, {}).get(\"name\", \"Noma'lum\")\r\n    today = datetime.now()\r\n    start_date = today - timedelta(days=30)\r\n\r\n    conn = sqlite3.connect(\"tasks.db\")\r\n    cursor = conn.cursor()\r\n    cursor.execute(\"\"\"\r\n        SELECT vazifa, manzil, summa, sana FROM tasks\r\n        WHERE xodim = ? AND status = 'Bajarildi' AND sana BETWEEN ? AND ?\r\n    \"\"\", (name, start_date.strftime(\"%Y-%m-%d\"), today.strftime(\"%Y-%m-%d\")))\r\n    rows = cursor.fetchall()\r\n    conn.close()\r\n\r\n    if not rows:\r\n        bot.send_message(chat_id, \"Oxirgi 30 kunda bajarilgan vazifalar yo‚Äòq.\")\r\n    else:\r\n        total = sum(row[2] for row in rows)\r\n        bot.send_message(chat_id, f\"‚úÖ 30 kun ichida {len(rows)} ta vazifa bajarilgan.\\nüí∞ Umumiy to‚Äòlov: {total} so‚Äòm.\")\r\n\r\n@bot.message_handler(func=lambda message: message.text == \"üóì 1 haftalik hisobot\")\r\ndef report_7_days(message):\r\n    chat_id = message.chat.id\r\n    name = employee_states.get(chat_id, {}).get(\"name\", \"Noma'lum\")\r\n    today = datetime.now()\r\n    start_date = today - timedelta(days=7)\r\n\r\n    conn = sqlite3.connect(\"tasks.db\")\r\n    cursor = conn.cursor()\r\n    cursor.execute(\"\"\"\r\n        SELECT vazifa, manzil, summa, sana FROM tasks\r\n        WHERE xodim = ? AND status = 'Bajarildi' AND sana BETWEEN ? AND ?\r\n    \"\"\", (name, start_date.strftime(\"%Y-%m-%d\"), today.strftime(\"%Y-%m-%d\")))\r\n    rows = cursor.fetchall()\r\n    conn.close()\r\n\r\n    if not rows:\r\n        bot.send_message(chat_id, \"Oxirgi 7 kunda bajarilgan vazifalar yo‚Äòq.\")\r\n    else:\r\n        total = sum(row[2] for row in rows)\r\n        bot.send_message(chat_id, f\"‚úÖ 1 hafta ichida {len(rows)} ta vazifa bajarilgan.\\nüí∞ Umumiy to‚Äòlov: {total} so‚Äòm.\")\r\n\r\n\r\n@bot.message_handler(func=lambda message: message.text == \"üì§ Excel faylga chop etish\")\r\ndef export_excel_report(message):\r\n    chat_id = message.chat.id\r\n    name = employee_states.get(chat_id, {}).get(\"name\", \"Noma'lum\")\r\n    today = datetime.now()\r\n    start_date = today - timedelta(days=30)\r\n\r\n    conn = sqlite3.connect(\"tasks.db\")\r\n    cursor = conn.cursor()\r\n    cursor.execute(\"\"\"\r\n        SELECT vazifa, manzil, summa, sana FROM tasks\r\n        WHERE xodim = ? AND status = 'Bajarildi' AND sana BETWEEN ? AND ?\r\n    \"\"\", (name, start_date.strftime(\"%Y-%m-%d\"), today.strftime(\"%Y-%m-%d\")))\r\n    rows = cursor.fetchall()\r\n    conn.close()\r\n\r\n    if not rows:\r\n        bot.send_message(chat_id, \"Excelga chop etiladigan vazifalar yo‚Äòq.\")\r\n        return\r\n\r\n    filename = f\"{name}_hisobot_{today.strftime('%Y%m%d')}.xlsx\"\r\n    path = os.path.join(\"hisobotlar\", filename)\r\n    os.makedirs(\"hisobotlar\", exist_ok=True)\r\n\r\n    wb = openpyxl.Workbook()\r\n    ws = wb.active\r\n    ws.append([\"Vazifa\", \"Manzil\", \"Summa\", \"Sana\"])\r\n\r\n    for row in rows:\r\n        ws.append(row)\r\n\r\n    wb.save(path)\r\n    with open(path, \"rb\") as f:\r\n        bot.send_document(chat_id, f, caption=\"üì§ Excel hisobotingiz tayyor!\")\r\n\r\n@bot.message_handler(func=lambda message: message.text == \"üîô Ortga\")\r\ndef go_back(message):\r\n    # Xodim paneliga qaytish kodi shu yerda bo‚Äòlishi kerak\r\n    show_employee_panel(message)\r\n\r\nimport sqlite3\r\nfrom telebot import types\r\n\r\n# Baza yaratish\r\ndef init_debt_db():\r\n    conn = sqlite3.connect(\"qarzdorlik.db\")\r\n    cursor = conn.cursor()\r\n    cursor.execute(\"\"\"\r\n        CREATE TABLE IF NOT EXISTS debts (\r\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\r\n            employee_name TEXT,\r\n            amount REAL,\r\n            reason TEXT,\r\n            date TEXT\r\n        )\r\n    \"\"\")\r\n    conn.commit()\r\n    conn.close()\r\n\r\n# Qarz qo‚Äòshish\r\ndef add_debt(employee_name, amount, reason, date):\r\n    conn = sqlite3.connect(\"qarzdorlik.db\")\r\n    cursor = conn.cursor()\r\n    cursor.execute(\"INSERT INTO debts (employee_name, amount, reason, date) VALUES (?, ?, ?, ?)\",\r\n                   (employee_name, amount, reason, date))\r\n    conn.commit()\r\n    conn.close()\r\n\r\n# Qarzlarni ko‚Äòrish\r\ndef get_debts_by_employee(employee_name):\r\n    conn = sqlite3.connect(\"qarzdorlik.db\")\r\n    cursor = conn.cursor()\r\n    cursor.execute(\"SELECT amount, reason, date FROM debts WHERE employee_name=?\", (employee_name,))\r\n    rows = cursor.fetchall()\r\n    conn.close()\r\n    return rows\r\n\r\n# Admin tugmasi orqali qarzlarni chiqarish\r\n@bot.message_handler(func=lambda message: message.text == \"üìä Qarzdorlik\")\r\ndef show_debt_menu(message):\r\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n    markup.add(\"‚ûï Qarz qo‚Äòshish\", \"üìã Qarzlarni ko‚Äòrish\", \"üîô Orqaga\")\r\n    bot.send_message(message.chat.id, \"Qarzdorlik bo‚Äòlimi:\", reply_markup=markup)\r\n\r\n# Qarz qo‚Äòshish bosqichi\r\n@bot.message_handler(func=lambda message: message.text == \"‚ûï Qarz qo‚Äòshish\")\r\ndef start_adding_debt(message):\r\n    bot.send_message(message.chat.id, \"Xodim ismini kiriting:\")\r\n    bot.register_next_step_handler(message, get_debt_name)\r\n\r\ndef get_debt_name(message):\r\n    employee_name = message.text\r\n    bot.send_message(message.chat.id, f\"{employee_name} uchun qarz summasini kiriting:\")\r\n    bot.register_next_step_handler(message, lambda msg: get_debt_amount(msg, employee_name))\r\n\r\ndef get_debt_amount(message, employee_name):\r\n    try:\r\n        amount = float(message.text)\r\n        bot.send_message(message.chat.id, \"Qarz sababini yozing:\")\r\n        bot.register_next_step_handler(message, lambda msg: get_debt_reason(msg, employee_name, amount))\r\n    except ValueError:\r\n        bot.send_message(message.chat.id, \"Iltimos, faqat raqam kiriting!\")\r\n\r\ndef get_debt_reason(message, employee_name, amount):\r\n    reason = message.text\r\n    from datetime import datetime\r\n    date = datetime.now().strftime(\"%Y-%m-%d\")\r\n    add_debt(employee_name, amount, reason, date)\r\n    bot.send_message(message.chat.id, f\"‚úÖ {employee_name} uchun {amount} so‚Äòm qarz qo‚Äòshildi.\")\r\n\r\n# Qarzlarni ko‚Äòrish\r\n@bot.message_handler(func=lambda message: message.text == \"üìã Qarzlarni ko‚Äòrish\")\r\ndef view_debts(message):\r\n    bot.send_message(message.chat.id, \"Xodim ismini kiriting:\")\r\n    bot.register_next_step_handler(message, show_debt_for_employee)\r\n\r\ndef show_debt_for_employee(message):\r\n    employee_name = message.text\r\n    debts = get_debts_by_employee(employee_name)\r\n    if not debts:\r\n        bot.send_message(message.chat.id, f\"{employee_name} uchun qarz topilmadi.\")\r\n        return\r\n    msg = f\"üìã {employee_name} uchun qarzdorlik ro‚Äòyxati:\\n\\n\"\r\n    for amount, reason, date in debts:\r\n        msg += f\"üí∞ {amount} so‚Äòm | üìù {reason} | üìÖ {date}\\n\"\r\n    bot.send_message(message.chat.id, msg)\r\n\r\n# Orqaga qaytish\r\n@bot.message_handler(func=lambda message: message.text == \"üîô Orqaga\")\r\ndef go_back(message):\r\n    from_panel = types.ReplyKeyboardMarkup(resize_keyboard=True)\r\n    from_panel.add(\"üè† Asosiy menyu\")\r\n    bot.send_message(message.chat.id, \"Asosiy menyuga qaytdingiz.\", reply_markup=from_panel)\r\n\r\n\r\n# üë§ Xodim login\r\n@bot.message_handler(func=lambda message: message.text == \"üë§ Xodim\")\r\ndef start_employee(message):\r\n    bot.send_message(message.chat.id, \"üë§ Ismingizni kiriting:\")\r\n    employee_states[message.chat.id] = {'step': 'ask_name'}\r\n\r\n@bot.message_handler(func=lambda message: employee_states.get(message.chat.id, {}).get('step') == 'ask_name')\r\ndef step_name(message):\r\n    employee_states[message.chat.id] = {'step': 'ask_password', 'name': message.text}\r\n    bot.send_message(message.chat.id, \"üîê Maxfiy parolingizni kiriting:\")\r\n\r\n@bot.message_handler(func=lambda message: employee_states.get(message.chat.id, {}).get('step') == 'ask_password')\r\ndef step_password(message):\r\n    chat_id = message.chat.id\r\n    name = employee_states[chat_id]['name']\r\n    entered_password = message.text\r\n\r\n    employee_passwords = {\r\n        \"Kamol\": \"1234\",\r\n        \"Fozil\": \"5678\",\r\n        \"Asomiddin\": \"abcd\",\r\n        \"Farruh\": \"f455\",\r\n    }\r\n\r\n    if employee_passwords.get(name) == entered_password:\r\n        employee_states[chat_id] = {'name': name, 'step': None}\r\n        keyboard = types.InlineKeyboardMarkup()\r\n        keyboard.add(types.InlineKeyboardButton(\"üìù Topshiriqlar\", callback_data=\"view_tasks\"))\r\n        keyboard.add(types.InlineKeyboardButton(\"üí∞ Hisob\", callback_data=\"view_balance\"))\r\n        keyboard.add(types.InlineKeyboardButton(\"üìú Tarix\", callback_data=\"task_history\"))\r\n        bot.send_message(chat_id, f\"Xush kelibsiz, {name}!\", reply_markup=keyboard)\r\n    else:\r\n        bot.send_message(chat_id, \"‚ùå Notog‚Äòri parol! Qaytadan urinib ko‚Äòring.\")\r\n\r\n# üë®‚Äçüîß Xodim paneli tugmalari\r\n\r\n@bot.callback_query_handler(func=lambda call: call.data.startswith(\"accept_\"))\r\ndef accept_task(call):\r\n    name = call.data.split(\"_\")[1]\r\n    chat_id = call.message.chat.id\r\n    bot.answer_callback_query(call.id)\r\n\r\n    if name in employee_tasks:\r\n        for task in reversed(employee_tasks[name]):\r\n            if task['status'] == \"Yuborilgan\":\r\n                task['status'] = \"Qabul qilingan\"\r\n                break\r\n\r\n\r\n@bot.callback_query_handler(func=lambda call: call.data.startswith(\"complete_\"))\r\ndef complete_task(call):\r\n    name = call.data.split(\"_\")[1]\r\n    chat_id = call.message.chat.id\r\n    employee_states[chat_id] = {\r\n        \"step\": \"ask_desc\",\r\n        \"name\": name\r\n    }\r\n    bot.send_message(chat_id, \"üìù Topshiriq bajarganingiz haqida tavsif yuboring:\")\r\n\r\n@bot.message_handler(func=lambda m: employee_states.get(m.chat.id, {}).get(\"step\") == \"ask_desc\")\r\ndef get_desc(m):\r\n    employee_states[m.chat.id][\"desc\"] = m.text\r\n    employee_states[m.chat.id][\"step\"] = \"ask_photo\"\r\n    bot.send_message(m.chat.id, \"üì∑ Endi topshiriqdan rasm yuboring:\")\r\n\r\n@bot.message_handler(content_types=['photo'])\r\ndef get_photo(m):\r\n    if employee_states.get(m.chat.id, {}).get(\"step\") != \"ask_photo\":\r\n        return\r\n    name = employee_states[m.chat.id][\"name\"]\r\n    desc = employee_states[m.chat.id][\"desc\"]\r\n    photo = m.photo[-1].file_id\r\n\r\n    # Topshiriqni bajarilgan deb belgilash\r\n    for task in reversed(employee_tasks.get(name, [])):\r\n        if task[\"status\"] in [\"Qabul qilingan\", \"Yuborilgan\"]:\r\n            task[\"status\"] = \"‚úÖ Bajarildi\"\r\n            break\r\n\r\n    text = f\"üì• *Yangi xabar*\\n\\n\" \\\r\n           f\"üë∑‚Äç‚ôÇÔ∏è {name} topshiriqni bajardi.\\n\" \\\r\n           f\"üìù {desc}\\n\" \\\r\n           f\"üí∞ {task['payment']} so‚Äòm\"\r\n    bot.send_photo(ADMIN_CHAT_ID, photo, caption=text, parse_mode='Markdown')\r\n    bot.send_message(m.chat.id, \"‚úÖ Rahmat! Ma'lumot yuborildi.\")\r\n    employee_states[m.chat.id] = {}\r\n\r\n# ADMIN: 24 soat ichidagi xabarlar\r\n@bot.message_handler(func=lambda msg: msg.text == \"üì© Xabarlar\")\r\ndef show_recent_reports(msg):\r\n    now = datetime.now()\r\n    one_day_ago = now -timedelta(days=1)\r\n    found = False\r\n    for name, tasks in employee_tasks.items():\r\n        for task in tasks:\r\n            if task.get(\"status\") == \"‚úÖ Bajarildi\" and task[\"time\"] >= one_day_ago:\r\n                text = f\"üë∑‚Äç‚ôÇÔ∏è {name} | üìù {task['description']} | üí∞ {task['payment']} so‚Äòm\"\r\n                bot.send_message(msg.chat.id, text)\r\n                found = True\r\n    if not found:\r\n        bot.send_message(msg.chat.id, \"‚è±Ô∏è So‚Äònggi 24 soatda hech qanday topshiriq bajarilmagan.\")\r\n\r\n@bot.callback_query_handler(func=lambda call: call.data == \"view_tasks\")\r\ndef view_tasks(call):\r\n    chat_id = call.message.chat.id\r\n    name = employee_states.get(chat_id, {}).get(\"name\")\r\n    if not name:\r\n        return bot.send_message(chat_id, \"Avval tizimga kiring.\")\r\n    tasks = employee_tasks.get(name, [])\r\n    if not tasks:\r\n        return bot.send_message(chat_id, \"Sizda hozircha topshiriq yo‚Äòq.\")\r\n    for i, task in enumerate(tasks):\r\n        msg = (\r\n            f\"üìå *Topshiriq:*\\n{task['description']}\\n\\n\"\r\n            f\"üìç *Joy:* {task['location']}\\n\"\r\n            f\"üìû *Tel:* {task['phone']}\\n\"\r\n            f\"üí∞ *Pul:* {task['payment']} so‚Äòm\"\r\n        )\r\n        keyboard = types.InlineKeyboardMarkup()\r\n        keyboard.add(\r\n            types.InlineKeyboardButton(\"‚úÖ Bajarildi\", callback_data=f\"task_done_{i}\"),\r\n            types.InlineKeyboardButton(\"‚ùå Bajarilmadi\", callback_data=f\"task_fail_{i}\")\r\n        )\r\n        bot.send_message(chat_id, msg, parse_mode='Markdown', reply_markup=keyboard)\r\n\r\n@bot.callback_query_handler(func=lambda call: call.data.startswith(\"task_done_\"))\r\ndef done_task(call):\r\n    index = int(call.data.split(\"_\")[-1])\r\n    chat_id = call.message.chat.id\r\n    employee_states[chat_id]['step'] = 'task_done_desc'\r\n    employee_states[chat_id]['task_index'] = index\r\n    bot.send_message(chat_id, \"üìù Topshiriq bajarganingiz haqida qisqacha tavsif yozing:\")\r\n\r\n@bot.message_handler(func=lambda message: employee_states.get(message.chat.id, {}).get('step') == 'task_done_desc')\r\ndef get_task_desc(message):\r\n    chat_id = message.chat.id\r\n    employee_states[chat_id]['task_desc'] = message.text\r\n    employee_states[chat_id]['step'] = 'task_done_photo'\r\n    bot.send_message(chat_id, \"üì∑ Topshiriqdan rasm yuboring:\")\r\n\r\n@bot.message_handler(content_types=['photo'])\r\ndef get_task_photo(message):\r\n    chat_id = message.chat.id\r\n    if employee_states.get(chat_id, {}).get('step') != 'task_done_photo':\r\n        return\r\n    photo = message.photo[-1].file_id\r\n    desc = employee_states[chat_id]['task_desc']\r\n    index = employee_states[chat_id]['task_index']\r\n    name = employee_states[chat_id]['name']\r\n    task = employee_tasks[name][index]\r\n    task['status'] = \"‚úÖ Bajarildi\"\r\n    msg = (\r\n        f\"üë∑‚Äç‚ôÇÔ∏è *{name}* topshiriqni bajardi!\\n\"\r\n        f\"üìù Tavsif: {desc}\\n\"\r\n        f\"üìç Joy: {task['location']}\\n\"\r\n        f\"üí∞ Pul: {task['payment']} so‚Äòm\\n\"\r\n        f\"üìû Tel: {task['phone']}\"\r\n    )\r\n    bot.send_photo(ADMIN_CHAT_ID, photo, caption=msg, parse_mode='Markdown')\r\n    bot.send_message(chat_id, \"‚úÖ Rahmat! Ma'lumotlar yuborildi.\")\r\n    employee_states[chat_id]['step'] = None\r\n\r\n@bot.callback_query_handler(func=lambda call: call.data.startswith(\"task_fail_\"))\r\ndef fail_task(call):\r\n    index = int(call.data.split(\"_\")[-1])\r\n    chat_id = call.message.chat.id\r\n    name = employee_states.get(chat_id, {}).get(\"name\")\r\n    if not name:\r\n        return\r\n    employee_tasks[name][index]['status'] = \"‚ùå Bajarilmadi\"\r\n    bot.send_message(chat_id, \"‚ùå Topshiriq bajarilmagan deb belgilandi.\")\r\n\r\n@bot.callback_query_handler(func=lambda call: call.data == \"view_balance\")\r\ndef show_balance(call):\r\n    name = employee_states.get(call.message.chat.id, {}).get(\"name\")\r\n    if not name:\r\n        return\r\n    total = sum(int(task['payment']) for task in employee_tasks.get(name, []) if task.get('status') == \"‚úÖ Bajarildi\")\r\n    bot.send_message(call.message.chat.id, f\"üíµ Jami daromadingiz: {total} so‚Äòm\")\r\n\r\n@bot.callback_query_handler(func=lambda call: call.data == \"task_history\")\r\ndef history(call):\r\n    name = employee_states.get(call.message.chat.id, {}).get(\"name\")\r\n    if not name:\r\n        return\r\n    messages = []\r\n    for task in employee_tasks.get(name, []):\r\n        status = task.get('status', '‚è≥ Davom etmoqda')\r\n        messages.append(\r\n            f\"üìù {task['description']} | üí∞ {task['payment']} | üìç {task['location']} | {status}\"\r\n        )\r\n    text = \"\\n\\n\".join(messages) if messages else \"Sizda hali tarix yo‚Äòq.\"\r\n    bot.send_message(call.message.chat.id, text)\r\n\r\nprint(\"ü§ñ Bot ishga tushdi...\")\r\nbot.infinity_polling()\r\n","size_bytes":23430},"attached_assets/main_1754292314391.py":{"content":"import telebot\nfrom telebot import types\nimport json\nimport os\nfrom datetime import datetime, timedelta\n\nfrom config import BOT_TOKEN, ADMIN_CODE, ADMIN_CHAT_ID, EMPLOYEES\nfrom database import (\n    add_task, get_employee_tasks, update_task_status, add_debt, get_debts,\n    add_message, get_user_state, set_user_state, clear_user_state\n)\nfrom utils import (\n    save_media_file, generate_employee_report, generate_admin_report,\n    format_task_info, parse_json_data, serialize_json_data\n)\n\n# Initialize bot\nbot = telebot.TeleBot(BOT_TOKEN)\n\n# Global variables for conversation states\nadmin_data = {}\n\n@bot.message_handler(commands=['start'])\ndef start_message(message):\n    \"\"\"Handle /start command\"\"\"\n    clear_user_state(message.chat.id)\n    \n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    markup.add(\"üîê Admin\", \"üë§ Xodim\")\n    \n    bot.send_message(\n        message.chat.id,\n        \"ü§ñ Vazifa boshqaruv botiga xush kelibsiz!\\n\\n\"\n        \"Iltimos, rolingizni tanlang:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(commands=['getid'])\ndef send_chat_id(message):\n    \"\"\"Get user's chat ID\"\"\"\n    bot.reply_to(message, f\"üÜî Sizning chat ID'ingiz: `{message.chat.id}`\", parse_mode='Markdown')\n\n# ADMIN SECTION\n@bot.message_handler(func=lambda message: message.text == \"üîê Admin\")\ndef admin_login(message):\n    \"\"\"Admin login process\"\"\"\n    set_user_state(message.chat.id, \"admin_login\")\n    \n    markup = types.ReplyKeyboardRemove()\n    msg = bot.send_message(\n        message.chat.id,\n        \"üîë Admin kodini kiriting:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"admin_login\")\ndef verify_admin_code(message):\n    \"\"\"Verify admin code\"\"\"\n    if message.text == ADMIN_CODE:\n        clear_user_state(message.chat.id)\n        bot.send_message(message.chat.id, \"‚úÖ Muvaffaqiyatli kirildi!\")\n        show_admin_panel(message)\n    else:\n        bot.send_message(message.chat.id, \"‚ùå Noto'g'ri kod. Qaytadan urinib ko'ring:\")\n\ndef show_admin_panel(message):\n    \"\"\"Show admin panel\"\"\"\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n    markup.add(\"‚ûï Yangi xodim qo'shish\", \"üì§ Vazifa berish\")\n    markup.add(\"üìç Xodimlarni kuzatish\", \"üì© Xabarlar\")\n    markup.add(\"üí∏ Qarzlar\", \"üìä Ma'lumotlar\")\n    markup.add(\"üîô Ortga\")\n    \n    bot.send_message(\n        message.chat.id,\n        \"üõ† Admin panelga xush kelibsiz!\\n\\nKerakli bo'limni tanlang:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: message.text == \"üì§ Vazifa berish\")\ndef start_task_assignment(message):\n    \"\"\"Start task assignment process\"\"\"\n    if len(EMPLOYEES) == 0:\n        bot.send_message(message.chat.id, \"‚ùå Hech qanday xodim topilmadi!\")\n        return\n    \n    set_user_state(message.chat.id, \"assign_task_description\")\n    admin_data[message.chat.id] = {}\n    \n    markup = types.ReplyKeyboardRemove()\n    bot.send_message(\n        message.chat.id,\n        \"üìù Vazifa tavsifini kiriting:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"assign_task_description\")\ndef get_task_description(message):\n    \"\"\"Get task description\"\"\"\n    admin_data[message.chat.id][\"description\"] = message.text\n    set_user_state(message.chat.id, \"assign_task_location\")\n    \n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    location_btn = types.KeyboardButton(\"üìç Lokatsiyani yuborish\", request_location=True)\n    markup.add(location_btn)\n    \n    bot.send_message(\n        message.chat.id,\n        \"üìç Vazifa uchun lokatsiyani yuboring:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(content_types=['location'])\ndef receive_task_location(message):\n    \"\"\"Receive task location\"\"\"\n    state, _ = get_user_state(message.chat.id)\n    \n    if state == \"assign_task_location\":\n        admin_data[message.chat.id][\"location\"] = {\n            \"latitude\": message.location.latitude,\n            \"longitude\": message.location.longitude\n        }\n        \n        set_user_state(message.chat.id, \"assign_task_payment\")\n        \n        markup = types.ReplyKeyboardRemove()\n        bot.send_message(\n            message.chat.id,\n            \"‚úÖ Lokatsiya qabul qilindi.\\n\\nüí∞ To'lov miqdorini kiriting (so'mda):\",\n            reply_markup=markup\n        )\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"assign_task_payment\")\ndef get_task_payment(message):\n    \"\"\"Get task payment amount\"\"\"\n    try:\n        payment = float(message.text.replace(\" \", \"\").replace(\",\", \"\"))\n        admin_data[message.chat.id][\"payment\"] = payment\n        \n        set_user_state(message.chat.id, \"assign_task_employee\")\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        for employee_name in EMPLOYEES.keys():\n            markup.add(employee_name)\n        markup.add(\"üîô Bekor qilish\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"üë• Vazifani bajaradigan xodimni tanlang:\",\n            reply_markup=markup\n        )\n        \n    except ValueError:\n        bot.send_message(message.chat.id, \"‚ùå Noto'g'ri format. Raqam kiriting (masalan: 50000):\")\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"assign_task_employee\")\ndef select_task_employee(message):\n    \"\"\"Select employee for task\"\"\"\n    if message.text == \"üîô Bekor qilish\":\n        clear_user_state(message.chat.id)\n        show_admin_panel(message)\n        return\n    \n    if message.text in EMPLOYEES:\n        admin_data[message.chat.id][\"employee\"] = message.text\n        \n        # Create task in database\n        data = admin_data[message.chat.id]\n        task_id = add_task(\n            description=data[\"description\"],\n            location_lat=data[\"location\"][\"latitude\"],\n            location_lon=data[\"location\"][\"longitude\"],\n            location_address=None,\n            payment_amount=data[\"payment\"],\n            assigned_to=data[\"employee\"],\n            assigned_by=message.chat.id\n        )\n        \n        # Send task to employee\n        employee_chat_id = EMPLOYEES[data[\"employee\"]]\n        task_text = f\"\"\"\nüîî Sizga yangi vazifa tayinlandi!\n\nüìù Vazifa: {data['description']}\nüí∞ To'lov: {data['payment']} so'm\nüìÖ Vaqt: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n\nVazifani boshlash uchun \"üë§ Xodim\" tugmasini bosing va vazifalar ro'yxatini ko'ring.\n\"\"\"\n        \n        try:\n            bot.send_message(employee_chat_id, task_text)\n            bot.send_location(\n                employee_chat_id,\n                data[\"location\"][\"latitude\"],\n                data[\"location\"][\"longitude\"]\n            )\n            \n            bot.send_message(\n                message.chat.id,\n                f\"‚úÖ Vazifa muvaffaqiyatli yuborildi!\\n\\n\"\n                f\"üë§ Xodim: {data['employee']}\\n\"\n                f\"üÜî Vazifa ID: {task_id}\"\n            )\n            \n        except Exception as e:\n            bot.send_message(\n                message.chat.id,\n                f\"‚ùå Xodimga vazifa yetkazib berishda xatolik:\\n{str(e)}\"\n            )\n        \n        clear_user_state(message.chat.id)\n        admin_data.pop(message.chat.id, None)\n        show_admin_panel(message)\n        \n    else:\n        bot.send_message(message.chat.id, \"‚ùå Iltimos, ro'yxatdan xodim tanlang!\")\n\n@bot.message_handler(func=lambda message: message.text == \"üìä Ma'lumotlar\")\ndef show_data_menu(message):\n    \"\"\"Show data/reports menu\"\"\"\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    markup.add(\"üìà Umumiy hisobot\", \"üìã Xodimlar hisoboti\")\n    markup.add(\"üì• Excel yuklab olish\", \"üîô Ortga\")\n    \n    bot.send_message(\n        message.chat.id,\n        \"üìä Ma'lumotlar bo'limi:\\n\\nKerakli variantni tanlang:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: message.text == \"üì• Excel yuklab olish\")\ndef generate_excel_report(message):\n    \"\"\"Generate and send Excel report\"\"\"\n    bot.send_message(message.chat.id, \"üìä Hisobot tayyorlanmoqda...\")\n    \n    try:\n        filepath = generate_admin_report()\n        if filepath and os.path.exists(filepath):\n            with open(filepath, 'rb') as f:\n                bot.send_document(\n                    message.chat.id,\n                    f,\n                    caption=\"üìä Umumiy hisobot Excel fayli\"\n                )\n            # Clean up file\n            os.remove(filepath)\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Hisobot yaratishda xatolik yuz berdi.\")\n    except Exception as e:\n        bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n@bot.message_handler(func=lambda message: message.text == \"üí∏ Qarzlar\")\ndef show_debts_menu(message):\n    \"\"\"Show debts menu\"\"\"\n    if message.chat.id != ADMIN_CHAT_ID:\n        return\n        \n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    markup.add(\"üëÅ Qarzlarni ko'rish\", \"‚ûï Qarz qo'shish\")\n    markup.add(\"‚ùå Qarzni o'chirish\", \"üîô Ortga\")\n    \n    bot.send_message(\n        message.chat.id,\n        \"üí∏ Qarzlar bo'limi:\\n\\nKerakli amalni tanlang:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: message.text == \"‚ûï Qarz qo'shish\")\ndef start_manual_debt_addition(message):\n    \"\"\"Start manual debt addition process\"\"\"\n    if message.chat.id != ADMIN_CHAT_ID:\n        return\n        \n    set_user_state(message.chat.id, \"manual_debt_employee\")\n    \n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n    for employee_name in EMPLOYEES.keys():\n        markup.add(employee_name)\n    markup.add(\"üîô Bekor qilish\")\n    \n    bot.send_message(\n        message.chat.id,\n        \"üë• Qarz qo'shiladigan xodimni tanlang:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"manual_debt_employee\")\ndef get_manual_debt_employee(message):\n    \"\"\"Get employee for manual debt addition\"\"\"\n    if message.text == \"üîô Bekor qilish\":\n        clear_user_state(message.chat.id)\n        show_admin_panel(message)\n        return\n        \n    if message.text in EMPLOYEES:\n        admin_data[message.chat.id] = {\"debt_employee\": message.text}\n        set_user_state(message.chat.id, \"manual_debt_amount\")\n        \n        markup = types.ReplyKeyboardRemove()\n        bot.send_message(\n            message.chat.id,\n            f\"üí∞ {message.text} uchun qarz miqdorini kiriting (so'mda):\",\n            reply_markup=markup\n        )\n    else:\n        bot.send_message(message.chat.id, \"‚ùå Iltimos, ro'yxatdan xodim tanlang!\")\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"manual_debt_amount\")\ndef get_manual_debt_amount(message):\n    \"\"\"Get manual debt amount\"\"\"\n    try:\n        amount = float(message.text.replace(\" \", \"\").replace(\",\", \"\"))\n        admin_data[message.chat.id][\"debt_amount\"] = amount\n        set_user_state(message.chat.id, \"manual_debt_reason\")\n        \n        bot.send_message(message.chat.id, \"üìù Qarz sababini kiriting:\")\n        \n    except ValueError:\n        bot.send_message(message.chat.id, \"‚ùå Noto'g'ri format. Raqam kiriting:\")\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"manual_debt_reason\")\ndef get_manual_debt_reason(message):\n    \"\"\"Get manual debt reason\"\"\"\n    admin_data[message.chat.id][\"debt_reason\"] = message.text\n    set_user_state(message.chat.id, \"manual_debt_date\")\n    \n    bot.send_message(\n        message.chat.id,\n        \"üìÖ Qachon to'lanishi kerak? (masalan: 2025-02-15):\"\n    )\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"manual_debt_date\")\ndef finalize_manual_debt(message):\n    \"\"\"Finalize manual debt addition\"\"\"\n    data = admin_data.get(message.chat.id, {})\n    employee_name = data.get(\"debt_employee\")\n    employee_chat_id = EMPLOYEES.get(employee_name)\n    \n    # Add debt record\n    add_debt(\n        employee_name=employee_name,\n        employee_chat_id=employee_chat_id,\n        task_id=None,\n        amount=data[\"debt_amount\"],\n        reason=data[\"debt_reason\"],\n        payment_date=message.text\n    )\n    \n    bot.send_message(\n        message.chat.id,\n        f\"‚úÖ Qarz qo'shildi!\\n\\n\"\n        f\"üë§ Xodim: {employee_name}\\n\"\n        f\"üí∞ Miqdor: {data['debt_amount']} so'm\\n\"\n        f\"üìù Sabab: {data['debt_reason']}\\n\"\n        f\"üìÖ To'lov sanasi: {message.text}\"\n    )\n    \n    # Notify employee\n    try:\n        bot.send_message(\n            employee_chat_id,\n            f\"‚ö†Ô∏è Sizga yangi qarz qo'shildi:\\n\\n\"\n            f\"üí∞ Miqdor: {data['debt_amount']} so'm\\n\"\n            f\"üìù Sabab: {data['debt_reason']}\\n\"\n            f\"üìÖ To'lov sanasi: {message.text}\"\n        )\n    except:\n        pass\n    \n    clear_user_state(message.chat.id)\n    admin_data.pop(message.chat.id, None)\n    show_admin_panel(message)\n\n@bot.message_handler(func=lambda message: message.text == \"üëÅ Qarzlarni ko'rish\")\ndef view_all_debts(message):\n    \"\"\"View all debts\"\"\"\n    if message.chat.id != ADMIN_CHAT_ID:\n        return\n        \n    try:\n        debts = get_debts()\n        \n        if not debts:\n            bot.send_message(message.chat.id, \"‚úÖ Hech qanday qarz mavjud emas!\")\n            return\n        \n        debt_text = \"üí∏ Barcha qarzlar:\\n\\n\"\n        total_debt = 0\n        \n        for i, debt in enumerate(debts, 1):\n            debt_id, employee_name, amount, reason, payment_date, created_at, status = debt\n            total_debt += amount\n            \n            debt_text += f\"{i}. üë§ {employee_name} (ID: {debt_id})\\n\"\n            debt_text += f\"   üí∞ {amount:,.0f} so'm\\n\"\n            debt_text += f\"   üìù {reason}\\n\"\n            debt_text += f\"   üìÖ To'lov sanasi: {payment_date}\\n\"\n            status_text = \"To'lanmagan\" if status == 'unpaid' else \"To'langan\"\n            debt_text += f\"   üìä Holat: {status_text}\\n\\n\"\n        \n        debt_text += f\"üí∏ Jami qarz: {total_debt} so'm\"\n        \n        # Split long messages\n        if len(debt_text) > 4000:\n            parts = [debt_text[i:i+4000] for i in range(0, len(debt_text), 4000)]\n            for part in parts:\n                bot.send_message(message.chat.id, part)\n        else:\n            bot.send_message(message.chat.id, debt_text)\n            \n    except Exception as e:\n        bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n@bot.message_handler(func=lambda message: message.text == \"üì© Xabarlar\")\ndef show_messages_menu(message):\n    \"\"\"Show admin messages and notifications\"\"\"\n    if message.chat.id != ADMIN_CHAT_ID:\n        return\n    \n    try:\n        from database import DATABASE_PATH\n        import sqlite3\n        \n        # Get recent task completions (last 24 hours)\n        conn = sqlite3.connect(DATABASE_PATH)\n        cursor = conn.cursor()\n        \n        yesterday = (datetime.now() - timedelta(days=1)).isoformat()\n        \n        cursor.execute(\"\"\"\n            SELECT t.id, t.assigned_to, t.description, t.completed_at, t.received_amount\n            FROM tasks t\n            WHERE t.status = 'completed' AND t.completed_at > ?\n            ORDER BY t.completed_at DESC\n        \"\"\", (yesterday,))\n        \n        recent_completions = cursor.fetchall()\n        conn.close()\n        \n        if not recent_completions:\n            bot.send_message(\n                message.chat.id,\n                \"üì≠ So'nggi 24 soatda bajarilgan vazifalar yo'q.\"\n            )\n            return\n        \n        message_text = \"üì© So'nggi 24 soat ichidagi bajarilgan vazifalar:\\n\\n\"\n        \n        for task_id, employee, description, completed_at, amount in recent_completions:\n            try:\n                completion_time = datetime.fromisoformat(completed_at).strftime(\"%d.%m.%Y %H:%M\")\n            except:\n                completion_time = completed_at\n            \n            message_text += f\"‚úÖ Vazifa #{task_id}\\n\"\n            message_text += f\"üë§ {employee}\\n\"\n            message_text += f\"üìù {description[:50]}{'...' if len(description) > 50 else ''}\\n\"\n            message_text += f\"üí∞ {amount or 0} so'm\\n\"\n            message_text += f\"üïê {completion_time}\\n\\n\"\n        \n        # Split long messages\n        if len(message_text) > 4000:\n            parts = [message_text[i:i+4000] for i in range(0, len(message_text), 4000)]\n            for part in parts:\n                bot.send_message(message.chat.id, part)\n        else:\n            bot.send_message(message.chat.id, message_text)\n            \n    except Exception as e:\n        bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n@bot.message_handler(func=lambda message: message.text == \"‚ûï Yangi xodim qo'shish\")  \ndef add_new_employee_info(message):\n    \"\"\"Show information about adding new employees\"\"\"\n    if message.chat.id != ADMIN_CHAT_ID:\n        return\n        \n    info_text = \"\"\"\n‚ÑπÔ∏è **Yangi xodim qo'shish**\n\nHozirda yangi xodim qo'shish config.py faylida qo'lda amalga oshiriladi.\n\n**Qadamlar:**\n1. Xodimdan Telegram username yoki chat ID olish\n2. config.py faylidagi EMPLOYEES ro'yxatiga qo'shish\n3. Botni qayta ishga tushirish\n\n**Joriy xodimlar:**\n\"\"\"\n    \n    for i, (name, chat_id) in enumerate(EMPLOYEES.items(), 1):\n        info_text += f\"{i}. {name} - {chat_id}\\n\"\n    \n    info_text += \"\\nüí° Yangi xodim qo'shish uchun admin bilan bog'laning.\"\n    \n    bot.send_message(message.chat.id, info_text, parse_mode='Markdown')\n\n# EMPLOYEE SECTION\n@bot.message_handler(func=lambda message: message.text == \"üë§ Xodim\")\ndef employee_login(message):\n    \"\"\"Employee panel access\"\"\"\n    # Check if user is in employee list\n    employee_name = None\n    for name, chat_id in EMPLOYEES.items():\n        if chat_id == message.chat.id:\n            employee_name = name\n            break\n    \n    if not employee_name:\n        bot.send_message(\n            message.chat.id,\n            \"‚ùå Sizning profilingiz topilmadi.\\n\"\n            \"Admin bilan bog'laning.\"\n        )\n        return\n    \n    show_employee_panel(message, employee_name)\n\ndef show_employee_panel(message, employee_name=None):\n    \"\"\"Show employee panel\"\"\"\n    if not employee_name:\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n    \n    if not employee_name:\n        bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n        return\n    \n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    markup.add(\"üìå Mening vazifalarim\", \"üìÇ Vazifalar tarixi\")\n    markup.add(\"üìä Hisobotlar\", \"üîô Ortga\")\n    \n    bot.send_message(\n        message.chat.id,\n        f\"üë§ Xodim paneli\\n\\nSalom, {employee_name}!\\n\\nKerakli bo'limni tanlang:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: message.text == \"üìå Mening vazifalarim\")\ndef show_employee_tasks(message):\n    \"\"\"Show employee's current tasks\"\"\"\n    employee_name = None\n    for name, chat_id in EMPLOYEES.items():\n        if chat_id == message.chat.id:\n            employee_name = name\n            break\n    \n    if not employee_name:\n        bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n        return\n    \n    # Get pending and in-progress tasks\n    pending_tasks = get_employee_tasks(employee_name, \"pending\")\n    active_tasks = get_employee_tasks(employee_name, \"in_progress\")\n    \n    if not pending_tasks and not active_tasks:\n        bot.send_message(message.chat.id, \"üì≠ Sizda hozircha vazifa yo'q.\")\n        return\n    \n    # Show pending tasks\n    if pending_tasks:\n        bot.send_message(message.chat.id, \"‚è≥ Kutilayotgan vazifalar:\")\n        for task in pending_tasks:\n            task_info = format_task_info(task)\n            \n            markup = types.InlineKeyboardMarkup()\n            markup.add(types.InlineKeyboardButton(\"‚ñ∂Ô∏è Boshlash\", callback_data=f\"start_task_{task[0]}\"))\n            \n            bot.send_message(message.chat.id, task_info, reply_markup=markup)\n    \n    # Show active tasks\n    if active_tasks:\n        bot.send_message(message.chat.id, \"üîÑ Bajarilayotgan vazifalar:\")\n        for task in active_tasks:\n            task_info = format_task_info(task)\n            \n            markup = types.InlineKeyboardMarkup()\n            markup.add(types.InlineKeyboardButton(\"‚úÖ Yakunlash\", callback_data=f\"complete_task_{task[0]}\"))\n            \n            bot.send_message(message.chat.id, task_info, reply_markup=markup)\n\n@bot.callback_query_handler(func=lambda call: call.data.startswith(\"start_task_\"))\ndef start_task(call):\n    \"\"\"Start a task\"\"\"\n    task_id = int(call.data.split(\"_\")[-1])\n    \n    try:\n        update_task_status(task_id, \"in_progress\")\n        \n        bot.edit_message_reply_markup(\n            call.message.chat.id,\n            call.message.message_id,\n            reply_markup=None\n        )\n        \n        bot.send_message(\n            call.message.chat.id,\n            \"‚úÖ Vazifa boshlandi!\\n\\n\"\n            \"Vazifani yakunlash uchun 'üìå Mening vazifalarim' bo'limiga o'ting.\"\n        )\n        \n        # Notify admin\n        add_message(\n            call.from_user.id,\n            ADMIN_CHAT_ID,\n            f\"Vazifa #{task_id} boshlandi\",\n            \"task_started\",\n            task_id\n        )\n        \n        user_name = call.from_user.first_name or \"Noma'lum\"\n        bot.send_message(\n            ADMIN_CHAT_ID,\n            f\"üîî Vazifa #{task_id} boshlandi\\n\"\n            f\"üë§ Xodim: {user_name}\"\n        )\n        \n    except Exception as e:\n        bot.send_message(call.message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n@bot.callback_query_handler(func=lambda call: call.data.startswith(\"complete_task_\"))\ndef complete_task_start(call):\n    \"\"\"Start task completion process\"\"\"\n    task_id = int(call.data.split(\"_\")[-1])\n    \n    set_user_state(call.message.chat.id, \"complete_task_report\", str(task_id))\n    \n    markup = types.ReplyKeyboardRemove()\n    bot.send_message(\n        call.message.chat.id,\n        \"üìù Vazifa qanday bajarilganini tavsiflab bering:\\n\\n\"\n        \"(Matn yoki ovozli xabar yuborishingiz mumkin)\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"complete_task_report\")\ndef get_completion_report(message):\n    \"\"\"Get task completion report\"\"\"\n    state, task_id = get_user_state(message.chat.id)\n    \n    # Save report (text or voice)\n    report_text = \"\"\n    if message.content_type == 'text':\n        report_text = message.text\n    elif message.content_type == 'voice':\n        # Save voice file\n        file_info = bot.get_file(message.voice.file_id)\n        voice_path = save_media_file(file_info, bot, \"voice\")\n        report_text = f\"Ovozli hisobot: {voice_path}\"\n    \n    # Store report temporarily\n    temp_data = {\n        \"task_id\": int(task_id) if task_id else 0,\n        \"report\": report_text\n    }\n    set_user_state(message.chat.id, \"complete_task_media\", serialize_json_data(temp_data))\n    \n    bot.send_message(\n        message.chat.id,\n        \"üì∏ Endi vazifa bajarilganligini tasdiqlovchi rasm yoki video yuboring:\"\n    )\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"complete_task_media\", \n                    content_types=['photo', 'video'])\ndef get_completion_media(message):\n    \"\"\"Get task completion media\"\"\"\n    state, data_str = get_user_state(message.chat.id)\n    temp_data = parse_json_data(data_str)\n    \n    # Save media file\n    media_path = None\n    if message.content_type == 'photo':\n        file_info = bot.get_file(message.photo[-1].file_id)\n        media_path = save_media_file(file_info, bot, \"photo\")\n    elif message.content_type == 'video':\n        file_info = bot.get_file(message.video.file_id)\n        media_path = save_media_file(file_info, bot, \"video\")\n    \n    temp_data[\"media\"] = media_path\n    set_user_state(message.chat.id, \"complete_task_payment\", serialize_json_data(temp_data))\n    \n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    markup.add(\"‚ùå To'lov olinmadi (qarzga qo'shish)\")\n    \n    bot.send_message(\n        message.chat.id,\n        \"üí∞ Qancha pul oldingiz? (so'mda kiriting)\\n\\n\"\n        \"Agar to'lov olinmagan bo'lsa, pastdagi tugmani bosing:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"complete_task_payment\")\ndef get_completion_payment(message):\n    \"\"\"Get payment information\"\"\"\n    state, data_str = get_user_state(message.chat.id)\n    temp_data = parse_json_data(data_str)\n    \n    if message.text == \"‚ùå To'lov olinmadi (qarzga qo'shish)\":\n        # Start debt process\n        set_user_state(message.chat.id, \"add_debt_amount\", serialize_json_data(temp_data))\n        \n        markup = types.ReplyKeyboardRemove()\n        bot.send_message(\n            message.chat.id,\n            \"üí∏ Qarz miqdorini kiriting (so'mda):\",\n            reply_markup=markup\n        )\n        return\n    \n    # Regular payment\n    try:\n        received_amount = float(message.text.replace(\" \", \"\").replace(\",\", \"\"))\n        \n        # Complete the task\n        update_task_status(\n            temp_data[\"task_id\"],\n            \"completed\",\n            completion_report=temp_data[\"report\"],\n            completion_media=temp_data.get(\"media\"),\n            received_amount=received_amount\n        )\n        \n        # Send completion notification to admin\n        employee_name = None\n        for name, chat_id in EMPLOYEES.items():\n            if chat_id == message.chat.id:\n                employee_name = name\n                break\n        \n        admin_message = f\"\"\"\n‚úÖ Vazifa yakunlandi!\n\nüÜî Vazifa ID: {temp_data[\"task_id\"]}\nüë§ Xodim: {employee_name or \"Noma'lum\"}\nüí∞ Olingan to'lov: {received_amount} so'm\n\nüìù Hisobot: {temp_data[\"report\"]}\n\"\"\"\n        \n        bot.send_message(ADMIN_CHAT_ID, admin_message)\n        \n        # Send media if available\n        if temp_data.get(\"media\") and os.path.exists(temp_data[\"media\"]):\n            try:\n                with open(temp_data[\"media\"], 'rb') as f:\n                    if \"photo\" in temp_data[\"media\"]:\n                        bot.send_photo(ADMIN_CHAT_ID, f, caption=\"üì∏ Vazifa rasmi\")\n                    elif \"video\" in temp_data[\"media\"]:\n                        bot.send_video(ADMIN_CHAT_ID, f, caption=\"üé• Vazifa videosi\")\n                    elif \"voice\" in temp_data[\"media\"]:\n                        bot.send_voice(ADMIN_CHAT_ID, f, caption=\"üé§ Ovozli hisobot\")\n            except Exception as e:\n                print(f\"Error sending media to admin: {e}\")\n        \n        clear_user_state(message.chat.id)\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìå Mening vazifalarim\", \"üìÇ Vazifalar tarixi\")\n        markup.add(\"üîô Ortga\")\n        \n        bot.send_message(\n            message.chat.id,\n            \"‚úÖ Vazifa muvaffaqiyatli yakunlandi!\\n\\n\"\n            \"Admin sizning hisobotingizni oldi.\",\n            reply_markup=markup\n        )\n        \n    except ValueError:\n        bot.send_message(message.chat.id, \"‚ùå Noto'g'ri format. Raqam kiriting (masalan: 50000):\")\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"add_debt_amount\")\ndef get_debt_amount(message):\n    \"\"\"Get debt amount\"\"\"\n    state, data_str = get_user_state(message.chat.id)\n    temp_data = parse_json_data(data_str)\n    \n    try:\n        debt_amount = float(message.text.replace(\" \", \"\").replace(\",\", \"\"))\n        temp_data[\"debt_amount\"] = debt_amount\n        \n        set_user_state(message.chat.id, \"add_debt_reason\", serialize_json_data(temp_data))\n        bot.send_message(message.chat.id, \"üìù To'lov olinmaganligining sababini kiriting:\")\n        \n    except ValueError:\n        bot.send_message(message.chat.id, \"‚ùå Noto'g'ri format. Raqam kiriting:\")\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"add_debt_reason\")\ndef get_debt_reason(message):\n    \"\"\"Get debt reason\"\"\"\n    state, data_str = get_user_state(message.chat.id)\n    temp_data = parse_json_data(data_str)\n    \n    temp_data[\"debt_reason\"] = message.text\n    set_user_state(message.chat.id, \"add_debt_date\", serialize_json_data(temp_data))\n    \n    bot.send_message(\n        message.chat.id,\n        \"üìÖ Qachon to'lanishi kerak? (masalan: 2025-01-15):\"\n    )\n\n@bot.message_handler(func=lambda message: get_user_state(message.chat.id)[0] == \"add_debt_date\")\ndef get_debt_date(message):\n    \"\"\"Get debt payment date and finalize\"\"\"\n    state, data_str = get_user_state(message.chat.id)\n    temp_data = parse_json_data(data_str)\n    \n    # Get employee name\n    employee_name = None\n    for name, chat_id in EMPLOYEES.items():\n        if chat_id == message.chat.id:\n            employee_name = name\n            break\n    \n    # Add debt record\n    add_debt(\n        employee_name=employee_name or \"Noma'lum\",\n        employee_chat_id=message.chat.id,\n        task_id=temp_data[\"task_id\"],\n        amount=temp_data[\"debt_amount\"],\n        reason=temp_data[\"debt_reason\"],\n        payment_date=message.text\n    )\n    \n    # Complete task with debt info\n    update_task_status(\n        temp_data[\"task_id\"],\n        \"completed\",\n        completion_report=temp_data[\"report\"],\n        completion_media=temp_data.get(\"media\"),\n        received_amount=0\n    )\n    \n    # Notify admin\n    admin_message = f\"\"\"\n‚ö†Ô∏è Vazifa yakunlandi (QARZ bilan)\n\nüÜî Vazifa ID: {temp_data[\"task_id\"]}\nüë§ Xodim: {employee_name or \"Noma'lum\"}\nüí∏ Qarz miqdori: {temp_data[\"debt_amount\"]} so'm\nüìù Sabab: {temp_data[\"debt_reason\"]}\nüìÖ To'lov sanasi: {message.text}\n\nüìù Hisobot: {temp_data[\"report\"]}\n\"\"\"\n    \n    bot.send_message(ADMIN_CHAT_ID, admin_message)\n    \n    clear_user_state(message.chat.id)\n    \n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    markup.add(\"üìå Mening vazifalarim\", \"üìÇ Vazifalar tarixi\")\n    markup.add(\"üîô Ortga\")\n    \n    bot.send_message(\n        message.chat.id,\n        \"‚úÖ Vazifa yakunlandi va qarz ro'yxatiga qo'shildi.\\n\\n\"\n        \"Admin xabardor qilindi.\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: message.text == \"üìÇ Vazifalar tarixi\")\ndef show_task_history(message):\n    \"\"\"Show employee task history\"\"\"\n    employee_name = None\n    for name, chat_id in EMPLOYEES.items():\n        if chat_id == message.chat.id:\n            employee_name = name\n            break\n    \n    if not employee_name:\n        bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n        return\n    \n    completed_tasks = get_employee_tasks(employee_name, \"completed\")\n    \n    if not completed_tasks:\n        bot.send_message(message.chat.id, \"üì≠ Bajarilgan vazifalar tarixi bo'sh.\")\n        return\n    \n    bot.send_message(message.chat.id, \"üìÇ Bajarilgan vazifalar tarixi:\")\n    \n    for task in completed_tasks[-10:]:  # Show last 10 tasks\n        task_info = format_task_info(task)\n        bot.send_message(message.chat.id, task_info)\n\n@bot.message_handler(func=lambda message: message.text == \"üìä Hisobotlar\")\ndef show_employee_reports(message):\n    \"\"\"Show employee reports menu\"\"\"\n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n    markup.add(\"üìÖ 30 kunlik hisobot\", \"üóì 1 haftalik hisobot\")\n    markup.add(\"üì§ Excel yuklab olish\", \"üîô Ortga\")\n    \n    bot.send_message(\n        message.chat.id,\n        \"üìä Hisobotlar bo'limi:\\n\\nKerakli variantni tanlang:\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: message.text == \"üì§ Excel yuklab olish\" and message.chat.id in EMPLOYEES.values())\ndef generate_employee_excel(message):\n    \"\"\"Generate employee Excel report\"\"\"\n    employee_name = None\n    for name, chat_id in EMPLOYEES.items():\n        if chat_id == message.chat.id:\n            employee_name = name\n            break\n    \n    if not employee_name:\n        bot.send_message(message.chat.id, \"‚ùå Profil topilmadi.\")\n        return\n    \n    bot.send_message(message.chat.id, \"üìä Hisobot tayyorlanmoqda...\")\n    \n    try:\n        filepath = generate_employee_report(employee_name, 30)\n        if filepath and os.path.exists(filepath):\n            with open(filepath, 'rb') as f:\n                bot.send_document(\n                    message.chat.id,\n                    f,\n                    caption=f\"üìä {employee_name} - 30 kunlik hisobot\"\n                )\n            os.remove(filepath)\n        else:\n            bot.send_message(message.chat.id, \"‚ùå Hisobot yaratishda xatolik yuz berdi.\")\n    except Exception as e:\n        bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n# COMMON HANDLERS\n@bot.message_handler(func=lambda message: message.text == \"üîô Ortga\")\ndef go_back(message):\n    \"\"\"Go back to main menu\"\"\"\n    clear_user_state(message.chat.id)\n    start_message(message)\n\n# GPS tracking handler\n@bot.message_handler(func=lambda message: message.text == \"üìç Xodimlarni kuzatish\")\ndef track_employees(message):\n    \"\"\"Track employees location\"\"\"\n    if message.chat.id != ADMIN_CHAT_ID:\n        return\n    \n    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n    for employee_name in EMPLOYEES.keys():\n        markup.add(f\"üìç {employee_name}\")\n    markup.add(\"üîô Ortga\")\n    \n    bot.send_message(\n        message.chat.id,\n        \"üìç Qaysi xodimning lokatsiyasini so'raysiz?\",\n        reply_markup=markup\n    )\n\n@bot.message_handler(func=lambda message: message.text.startswith(\"üìç üë®‚Äçüîß\"))\ndef request_employee_location(message):\n    \"\"\"Request specific employee location\"\"\"\n    if message.chat.id != ADMIN_CHAT_ID:\n        return\n    \n    employee_name = message.text.replace(\"üìç \", \"\")\n    employee_chat_id = EMPLOYEES.get(employee_name)\n    \n    if not employee_chat_id:\n        bot.send_message(message.chat.id, \"‚ùå Xodim topilmadi.\")\n        return\n    \n    try:\n        # Request location from employee\n        location_markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)\n        location_btn = types.KeyboardButton(\"üìç Lokatsiyamni yuborish\", request_location=True)\n        location_markup.add(location_btn)\n        location_markup.add(\"‚ùå Rad etish\")\n        \n        bot.send_message(\n            employee_chat_id,\n            f\"üìç Admin sizning joylashuvingizni so'ramoqda.\\n\\n\"\n            f\"Lokatsiyangizni yuboring:\",\n            reply_markup=location_markup\n        )\n        \n        bot.send_message(\n            message.chat.id,\n            f\"üì§ {employee_name}ga lokatsiya so'rovi yuborildi.\\n\"\n            f\"Javobni kutib turing...\"\n        )\n        \n    except Exception as e:\n        bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n# Handle location sharing for tracking\n@bot.message_handler(content_types=['location'])\ndef handle_location_sharing(message):\n    \"\"\"Handle location sharing from employees\"\"\"\n    # Check if this is from an employee\n    employee_name = None\n    for name, chat_id in EMPLOYEES.items():\n        if chat_id == message.chat.id:\n            employee_name = name\n            break\n    \n    if employee_name:\n        # Send location to admin\n        try:\n            bot.send_message(\n                ADMIN_CHAT_ID,\n                f\"üìç {employee_name} lokatsiyasi:\"\n            )\n            bot.send_location(\n                ADMIN_CHAT_ID,\n                message.location.latitude,\n                message.location.longitude\n            )\n            \n            # Confirm to employee\n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            markup.add(\"üìå Mening vazifalarim\", \"üìÇ Vazifalar tarixi\")\n            markup.add(\"üîô Ortga\")\n            \n            bot.send_message(\n                message.chat.id,\n                \"‚úÖ Lokatsiya adminga yuborildi.\",\n                reply_markup=markup\n            )\n            \n        except Exception as e:\n            bot.send_message(message.chat.id, f\"‚ùå Xatolik: {str(e)}\")\n\n# Error handler\n@bot.message_handler(func=lambda message: True)\ndef handle_unknown(message):\n    \"\"\"Handle unknown messages\"\"\"\n    bot.send_message(\n        message.chat.id,\n        \"‚ùì Tushunmadim. Iltimos, menyudan tanlang yoki /start bosing.\"\n    )\n\nif __name__ == \"__main__\":\n    print(\"ü§ñ Bot ishga tushmoqda...\")\n    print(f\"üì± Bot token: {BOT_TOKEN[:10]}...\")\n    print(f\"üëë Admin chat ID: {ADMIN_CHAT_ID}\")\n    print(f\"üë• Xodimlar soni: {len(EMPLOYEES)}\")\n    \n    try:\n        bot.infinity_polling(none_stop=True, interval=0, timeout=60)\n    except Exception as e:\n        print(f\"‚ùå Bot xatosi: {e}\")\n        import time\n        time.sleep(5)\n        bot.infinity_polling(none_stop=True, interval=0, timeout=60)\n","size_bytes":36846},"handlers/admin_handlers.py":{"content":"import telebot\nfrom telebot import types\nfrom datetime import datetime\nfrom utils.database import get_task_db, get_debt_db\nfrom utils.excel_handler import ExcelHandler\nfrom config import EMPLOYEES, ADMIN_CHAT_ID\n\nclass AdminHandler:\n    def __init__(self, bot: telebot.TeleBot):\n        self.bot = bot\n        self.task_db = get_task_db()\n        self.debt_db = get_debt_db()\n        self.excel_handler = ExcelHandler()\n        self.admin_task_data = {}\n        self.admin_debt_data = {}\n    \n    def show_admin_panel(self, message):\n        \"\"\"Show main admin panel\"\"\"\n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìù Topshiriqlar\", \"üìä Qarzdorlik\", \"üìã Hisobot\", \"‚¨ÖÔ∏è Ortga\")\n        self.bot.send_message(message.chat.id, \"Admin panelga xush kelibsiz!\", reply_markup=markup)\n    \n    def start_task_creation(self, message):\n        \"\"\"Start task creation process\"\"\"\n        chat_id = message.chat.id\n        self.admin_task_data[chat_id] = {}\n        msg = self.bot.send_message(chat_id, \"üìù Topshiriq matnini kiriting:\")\n        self.bot.register_next_step_handler(msg, self.get_task_text)\n    \n    def get_task_text(self, message):\n        \"\"\"Get task description\"\"\"\n        chat_id = message.chat.id\n        self.admin_task_data[chat_id][\"description\"] = message.text\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        loc_btn = types.KeyboardButton(\"üìç Lokatsiyani yuborish\", request_location=True)\n        markup.add(loc_btn)\n        self.bot.send_message(chat_id, \"üìç Lokatsiyani yuboring:\", reply_markup=markup)\n    \n    def receive_location(self, message):\n        \"\"\"Handle location reception\"\"\"\n        chat_id = message.chat.id\n        if chat_id in self.admin_task_data:\n            self.admin_task_data[chat_id][\"location\"] = message.location\n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            markup.add(\"üí∞ Pul miqdori\")\n            self.bot.send_message(chat_id, \"‚úÖ Lokatsiya qabul qilindi.\\nüí∞ Endi pul miqdorini kiriting:\", reply_markup=markup)\n    \n    def ask_payment(self, message):\n        \"\"\"Ask for payment amount\"\"\"\n        msg = self.bot.send_message(message.chat.id, \"üí∏ Pul miqdorini kiriting:\")\n        self.bot.register_next_step_handler(msg, self.save_payment)\n    \n    def save_payment(self, message):\n        \"\"\"Save payment amount\"\"\"\n        chat_id = message.chat.id\n        try:\n            # Validate payment amount\n            amount = float(message.text.replace(',', '').replace(' ', ''))\n            self.admin_task_data[chat_id][\"payment\"] = amount\n            \n            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n            markup.add(\"üë• Kerakli hodimlar\")\n            self.bot.send_message(chat_id, \"üë• Endi kerakli hodimlarni tanlang:\", reply_markup=markup)\n        except ValueError:\n            msg = self.bot.send_message(chat_id, \"‚ùå Iltimos, to'g'ri raqam kiriting:\")\n            self.bot.register_next_step_handler(msg, self.save_payment)\n    \n    def choose_employees(self, message):\n        \"\"\"Show employee selection menu\"\"\"\n        chat_id = message.chat.id\n        self.admin_task_data[chat_id][\"selected\"] = []\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        for name in EMPLOYEES:\n            markup.add(name)\n        markup.add(\"üì® Yuborish\")\n        self.bot.send_message(chat_id, \"Tanlang (bir nechta hodim tanlashingiz mumkin):\", reply_markup=markup)\n        self.bot.register_next_step_handler(message, self.select_employee)\n    \n    def select_employee(self, message):\n        \"\"\"Handle employee selection\"\"\"\n        chat_id = message.chat.id\n        name = message.text\n        \n        if name == \"üì® Yuborish\":\n            self.send_task_to_employees(message)\n            return\n        \n        if name in EMPLOYEES:\n            if name not in self.admin_task_data.get(chat_id, {}).get(\"selected\", []):\n                self.admin_task_data[chat_id][\"selected\"].append(name)\n                self.bot.send_message(chat_id, f\"‚úÖ {name} tanlandi.\")\n            else:\n                self.bot.send_message(chat_id, f\"‚ö†Ô∏è {name} allaqachon tanlangan.\")\n        else:\n            self.bot.send_message(chat_id, \"‚ùå Tugmalardan birini tanlang.\")\n        \n        self.bot.register_next_step_handler(message, self.select_employee)\n    \n    def send_task_to_employees(self, message):\n        \"\"\"Send task to selected employees\"\"\"\n        chat_id = message.chat.id\n        data = self.admin_task_data.get(chat_id)\n        \n        if not data or \"location\" not in data or \"description\" not in data or \"payment\" not in data or not data.get(\"selected\"):\n            self.bot.send_message(chat_id, \"‚ùå Ma'lumotlar to'liq emas. Iltimos, qaytadan boshlang.\")\n            return\n        \n        lat, lon = data[\"location\"].latitude, data[\"location\"].longitude\n        task_text = f\"üì¢ Sizga yangi topshiriq:\\n\\nüìù {data['description']}\\nüìç Lokatsiya: xaritada\\nüí∞ Pul: {data['payment']} so'm\"\n        \n        # Send to each selected employee\n        success_count = 0\n        for name in data[\"selected\"]:\n            user_id = EMPLOYEES.get(name)\n            if not user_id:\n                continue\n            \n            try:\n                # Send task message and location\n                self.bot.send_message(user_id, task_text)\n                self.bot.send_location(user_id, latitude=lat, longitude=lon)\n                \n                # Save to database\n                short_name = name.split()[-1]\n                location_str = f\"{lat}, {lon}\"\n                self.task_db.add_task(\n                    description=data['description'],\n                    location=location_str,\n                    employee=short_name,\n                    amount=data['payment']\n                )\n                success_count += 1\n                \n            except Exception as e:\n                self.bot.send_message(chat_id, f\"‚ö†Ô∏è {name} ga yuborilmadi.\\nXato: {e}\")\n        \n        # Save to Excel\n        self.excel_handler.save_task_to_excel(\n            data['description'], \n            data['location'], \n            data['selected'], \n            str(data['payment'])\n        )\n        \n        if success_count > 0:\n            self.bot.send_message(chat_id, f\"‚úÖ Topshiriq {success_count} ta hodimga yuborildi.\")\n        \n        self.show_admin_panel(message)\n    \n    def show_debt_menu(self, message):\n        \"\"\"Show debt management menu\"\"\"\n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"‚ûï Qarz qo'shish\", \"üìã Qarzlarni ko'rish\", \"üîô Orqaga\")\n        self.bot.send_message(message.chat.id, \"Qarzdorlik bo'limi:\", reply_markup=markup)\n    \n    def start_add_debt(self, message):\n        \"\"\"Start debt addition process\"\"\"\n        chat_id = message.chat.id\n        self.admin_debt_data[chat_id] = {}\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)\n        for name in EMPLOYEES:\n            markup.add(name)\n        \n        msg = self.bot.send_message(chat_id, \"Hodimni tanlang:\", reply_markup=markup)\n        self.bot.register_next_step_handler(msg, self.select_debt_employee)\n    \n    def select_debt_employee(self, message):\n        \"\"\"Select employee for debt\"\"\"\n        chat_id = message.chat.id\n        employee_name = message.text\n        \n        if employee_name not in EMPLOYEES:\n            msg = self.bot.send_message(chat_id, \"‚ùå Iltimos, ro'yxatdagi hodimni tanlang:\")\n            self.bot.register_next_step_handler(msg, self.select_debt_employee)\n            return\n        \n        self.admin_debt_data[chat_id][\"employee\"] = employee_name\n        msg = self.bot.send_message(chat_id, \"üí∏ Qarz miqdorini kiriting:\")\n        self.bot.register_next_step_handler(msg, self.get_debt_amount)\n    \n    def get_debt_amount(self, message):\n        \"\"\"Get debt amount\"\"\"\n        chat_id = message.chat.id\n        try:\n            amount = float(message.text.replace(',', '').replace(' ', ''))\n            self.admin_debt_data[chat_id][\"amount\"] = amount\n            msg = self.bot.send_message(chat_id, \"üìù Qarz sababini kiriting:\")\n            self.bot.register_next_step_handler(msg, self.get_debt_reason)\n        except ValueError:\n            msg = self.bot.send_message(chat_id, \"‚ùå Iltimos, to'g'ri raqam kiriting:\")\n            self.bot.register_next_step_handler(msg, self.get_debt_amount)\n    \n    def get_debt_reason(self, message):\n        \"\"\"Get debt reason and save\"\"\"\n        chat_id = message.chat.id\n        reason = message.text\n        \n        data = self.admin_debt_data.get(chat_id)\n        if not data:\n            self.bot.send_message(chat_id, \"‚ùå Ma'lumotlar yo'qoldi. Qaytadan boshlang.\")\n            return\n        \n        # Save debt to database\n        employee_name = data[\"employee\"].split()[-1]  # Get short name\n        if self.debt_db.add_debt(employee_name, data[\"amount\"], reason):\n            self.bot.send_message(chat_id, f\"‚úÖ {data['employee']} uchun qarz qo'shildi:\\nüí∞ {data['amount']} so'm\\nüìù {reason}\")\n        else:\n            self.bot.send_message(chat_id, \"‚ùå Qarz qo'shishda xato yuz berdi.\")\n        \n        self.show_debt_menu(message)\n    \n    def show_all_debts(self, message):\n        \"\"\"Show debts for all employees\"\"\"\n        chat_id = message.chat.id\n        total_debt = 0\n        debt_info = []\n        \n        for name, user_id in EMPLOYEES.items():\n            short_name = name.split()[-1]\n            debts = self.debt_db.get_debts_by_employee(short_name)\n            if debts:\n                employee_total = sum(debt['amount'] for debt in debts)\n                debt_info.append(f\"{name}: {employee_total} so'm\")\n                total_debt += employee_total\n        \n        if debt_info:\n            message_text = \"üìä Barcha hodimlar qarzi:\\n\\n\" + \"\\n\".join(debt_info)\n            message_text += f\"\\n\\nüí∞ Umumiy qarz: {total_debt} so'm\"\n        else:\n            message_text = \"‚úÖ Hech qanday qarz yo'q.\"\n        \n        self.bot.send_message(chat_id, message_text)\n","size_bytes":10139},"handlers/employee_handlers.py":{"content":"import telebot\nfrom telebot import types\nfrom datetime import datetime, timedelta\nfrom utils.database import get_task_db\nfrom utils.excel_handler import ExcelHandler\nfrom config import EMPLOYEES\n\nclass EmployeeHandler:\n    def __init__(self, bot: telebot.TeleBot):\n        self.bot = bot\n        self.task_db = get_task_db()\n        self.excel_handler = ExcelHandler()\n        self.employee_states = {}\n    \n    def show_employee_panel(self, message):\n        \"\"\"Show employee main panel\"\"\"\n        chat_id = message.chat.id\n        \n        # Find employee name by chat ID\n        employee_name = None\n        for name, emp_id in EMPLOYEES.items():\n            if emp_id == chat_id:\n                employee_name = name.split()[-1]  # Get short name\n                break\n        \n        if not employee_name:\n            self.bot.send_message(chat_id, \"‚ùå Siz ro'yxatda yo'qsiz.\")\n            return\n        \n        # Store employee info\n        self.employee_states[chat_id] = {\"name\": employee_name}\n        \n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìã Mening vazifalarim\", \"‚úÖ Bajarilgan vazifalar\")\n        markup.add(\"üìä Hisobot\", \"‚¨ÖÔ∏è Ortga\")\n        \n        self.bot.send_message(chat_id, f\"Xush kelibsiz, {employee_name}!\", reply_markup=markup)\n    \n    def show_my_tasks(self, message):\n        \"\"\"Show employee's current tasks\"\"\"\n        chat_id = message.chat.id\n        employee_name = self.employee_states.get(chat_id, {}).get(\"name\")\n        \n        if not employee_name:\n            self.bot.send_message(chat_id, \"‚ùå Hodim ma'lumotlari topilmadi.\")\n            return\n        \n        # Get pending tasks\n        tasks = self.task_db.get_tasks_by_employee(employee_name, \"‚è≥ Davom etmoqda\")\n        \n        if not tasks:\n            self.bot.send_message(chat_id, \"üìã Sizda hozircha vazifalar yo'q.\")\n            return\n        \n        for task in tasks:\n            task_text = f\"üìù Vazifa: {task['description']}\\n\"\n            task_text += f\"üìç Manzil: {task['location']}\\n\"\n            task_text += f\"üí∞ To'lov: {task['amount']} so'm\\n\"\n            task_text += f\"üìÖ Sana: {task['date']} {task['time']}\\n\"\n            task_text += f\"üìû Telefon: {task['phone']}\"\n            \n            # Create inline keyboard for task actions\n            markup = types.InlineKeyboardMarkup()\n            markup.add(\n                types.InlineKeyboardButton(\"‚úÖ Bajarildi\", callback_data=f\"complete_{task['id']}\"),\n                types.InlineKeyboardButton(\"üîÑ Jarayonda\", callback_data=f\"progress_{task['id']}\")\n            )\n            \n            self.bot.send_message(chat_id, task_text, reply_markup=markup)\n    \n    def show_completed_tasks(self, message):\n        \"\"\"Show employee's completed tasks\"\"\"\n        chat_id = message.chat.id\n        employee_name = self.employee_states.get(chat_id, {}).get(\"name\")\n        \n        if not employee_name:\n            self.bot.send_message(chat_id, \"‚ùå Hodim ma'lumotlari topilmadi.\")\n            return\n        \n        # Get completed tasks\n        tasks = self.task_db.get_tasks_by_employee(employee_name, \"‚úÖ Bajarildi\")\n        \n        if not tasks:\n            self.bot.send_message(chat_id, \"üìã Bajarilgan vazifalar yo'q.\")\n            return\n        \n        total_amount = sum(task['amount'] for task in tasks)\n        task_count = len(tasks)\n        \n        message_text = f\"‚úÖ Bajarilgan vazifalar: {task_count} ta\\n\"\n        message_text += f\"üí∞ Umumiy to'lov: {total_amount} so'm\\n\\n\"\n        \n        # Show last 5 tasks\n        for task in tasks[-5:]:\n            message_text += f\"üìù {task['description']}\\n\"\n            message_text += f\"üí∞ {task['amount']} so'm - {task['date']}\\n\\n\"\n        \n        if task_count > 5:\n            message_text += f\"... va yana {task_count - 5} ta vazifa\"\n        \n        self.bot.send_message(chat_id, message_text)\n    \n    def show_report_menu(self, message):\n        \"\"\"Show report menu\"\"\"\n        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)\n        markup.add(\"üìÖ 30 kunlik hisobot\", \"üóì 1 haftalik hisobot\")\n        markup.add(\"üì§ Excel faylga chop etish\", \"üîô Ortga\")\n        self.bot.send_message(message.chat.id, \"Quyidagilardan birini tanlang:\", reply_markup=markup)\n    \n    def report_30_days(self, message):\n        \"\"\"Generate 30-day report\"\"\"\n        chat_id = message.chat.id\n        employee_name = self.employee_states.get(chat_id, {}).get(\"name\", \"Noma'lum\")\n        \n        today = datetime.now()\n        start_date = today - timedelta(days=30)\n        \n        tasks = self.task_db.get_tasks_in_date_range(\n            employee_name, \n            start_date.strftime(\"%Y-%m-%d\"), \n            today.strftime(\"%Y-%m-%d\")\n        )\n        \n        if not tasks:\n            self.bot.send_message(chat_id, \"Oxirgi 30 kunda bajarilgan vazifalar yo'q.\")\n        else:\n            total = sum(task['amount'] for task in tasks)\n            self.bot.send_message(\n                chat_id, \n                f\"‚úÖ 30 kun ichida {len(tasks)} ta vazifa bajarilgan.\\nüí∞ Umumiy to'lov: {total} so'm.\"\n            )\n    \n    def report_7_days(self, message):\n        \"\"\"Generate 7-day report\"\"\"\n        chat_id = message.chat.id\n        employee_name = self.employee_states.get(chat_id, {}).get(\"name\", \"Noma'lum\")\n        \n        today = datetime.now()\n        start_date = today - timedelta(days=7)\n        \n        tasks = self.task_db.get_tasks_in_date_range(\n            employee_name, \n            start_date.strftime(\"%Y-%m-%d\"), \n            today.strftime(\"%Y-%m-%d\")\n        )\n        \n        if not tasks:\n            self.bot.send_message(chat_id, \"Oxirgi 7 kunda bajarilgan vazifalar yo'q.\")\n        else:\n            total = sum(task['amount'] for task in tasks)\n            self.bot.send_message(\n                chat_id, \n                f\"‚úÖ 1 hafta ichida {len(tasks)} ta vazifa bajarilgan.\\nüí∞ Umumiy to'lov: {total} so'm.\"\n            )\n    \n    def export_excel_report(self, message):\n        \"\"\"Export Excel report\"\"\"\n        chat_id = message.chat.id\n        employee_name = self.employee_states.get(chat_id, {}).get(\"name\", \"Noma'lum\")\n        \n        today = datetime.now()\n        start_date = today - timedelta(days=30)\n        \n        tasks = self.task_db.get_tasks_in_date_range(\n            employee_name, \n            start_date.strftime(\"%Y-%m-%d\"), \n            today.strftime(\"%Y-%m-%d\")\n        )\n        \n        if not tasks:\n            self.bot.send_message(chat_id, \"Excelga chop etiladigan vazifalar yo'q.\")\n            return\n        \n        # Create Excel file\n        filepath = self.excel_handler.create_employee_report(employee_name, tasks)\n        \n        if filepath:\n            try:\n                with open(filepath, \"rb\") as f:\n                    self.bot.send_document(chat_id, f, caption=\"üì§ Excel hisobotingiz tayyor!\")\n            except Exception as e:\n                self.bot.send_message(chat_id, f\"‚ùå Fayl yuborishda xato: {e}\")\n        else:\n            self.bot.send_message(chat_id, \"‚ùå Excel fayl yaratishda xato.\")\n    \n    def handle_task_callback(self, call):\n        \"\"\"Handle task status update callbacks\"\"\"\n        try:\n            action, task_id = call.data.split('_')\n            task_id = int(task_id)\n            \n            if action == \"complete\":\n                status = \"‚úÖ Bajarildi\"\n                message = \"‚úÖ Vazifa bajarildi deb belgilandi!\"\n            elif action == \"progress\":\n                status = \"üîÑ Jarayonda\"\n                message = \"üîÑ Vazifa jarayonda deb belgilandi!\"\n            else:\n                return\n            \n            # Update task status\n            if self.task_db.update_task_status(task_id, status):\n                self.bot.answer_callback_query(call.id, message)\n                self.bot.edit_message_reply_markup(\n                    call.message.chat.id, \n                    call.message.message_id, \n                    reply_markup=None\n                )\n            else:\n                self.bot.answer_callback_query(call.id, \"‚ùå Status yangilanmadi!\")\n                \n        except Exception as e:\n            self.bot.answer_callback_query(call.id, f\"‚ùå Xato: {e}\")\n","size_bytes":8264},"utils/database.py":{"content":"from models import TaskModel, DebtModel\nimport os\n\ndef init_all_databases():\n    \"\"\"Initialize all databases\"\"\"\n    # Create directories if they don't exist\n    os.makedirs(\"hisobotlar\", exist_ok=True)\n    \n    # Initialize databases\n    task_db = TaskModel()\n    debt_db = DebtModel()\n    \n    return task_db, debt_db\n\ndef get_task_db():\n    \"\"\"Get task database instance\"\"\"\n    return TaskModel()\n\ndef get_debt_db():\n    \"\"\"Get debt database instance\"\"\"\n    return DebtModel()\n","size_bytes":479},"utils/excel_handler.py":{"content":"import openpyxl\nimport os\nfrom datetime import datetime\nfrom typing import List, Dict\n\nclass ExcelHandler:\n    def __init__(self, file_path: str = \"topshiriqlar.xlsx\"):\n        self.file_path = file_path\n    \n    def save_task_to_excel(self, description: str, location, employees_list: List[str], \n                          payment: str, status: str = \"‚è≥ Davom etmoqda\"):\n        \"\"\"Save task to Excel file\"\"\"\n        headers = [\"Sana\", \"Vaqt\", \"Topshiriq\", \"Lokatsiya\", \"Hodimlar\", \"Pul miqdori\", \"Holat\"]\n        \n        now = datetime.now()\n        date_str = now.strftime(\"%Y-%m-%d\")\n        time_str = now.strftime(\"%H:%M:%S\")\n        \n        # Create or load workbook\n        if not os.path.exists(self.file_path):\n            wb = openpyxl.Workbook()\n            sheet = wb.active\n            sheet.append(headers)\n        else:\n            wb = openpyxl.load_workbook(self.file_path)\n            sheet = wb.active\n        \n        # Format location and employees\n        if hasattr(location, 'latitude') and hasattr(location, 'longitude'):\n            loc_str = f\"{location.latitude}, {location.longitude}\"\n        else:\n            loc_str = str(location)\n        \n        emp_str = \", \".join(employees_list)\n        \n        # Add row\n        sheet.append([date_str, time_str, description, loc_str, emp_str, payment, status])\n        wb.save(self.file_path)\n    \n    def create_employee_report(self, employee_name: str, tasks: List[Dict]) -> str:\n        \"\"\"Create Excel report for employee\"\"\"\n        if not tasks:\n            return None\n        \n        # Create reports directory\n        os.makedirs(\"hisobotlar\", exist_ok=True)\n        \n        # Generate filename\n        today = datetime.now()\n        filename = f\"{employee_name}_hisobot_{today.strftime('%Y%m%d')}.xlsx\"\n        filepath = os.path.join(\"hisobotlar\", filename)\n        \n        # Create workbook\n        wb = openpyxl.Workbook()\n        ws = wb.active\n        ws.title = f\"{employee_name} Hisoboti\"\n        \n        # Add headers\n        headers = [\"Vazifa\", \"Manzil\", \"Summa\", \"Sana\"]\n        ws.append(headers)\n        \n        # Add data\n        total_amount = 0\n        for task in tasks:\n            ws.append([\n                task.get('description', ''),\n                task.get('location', ''),\n                task.get('amount', 0),\n                task.get('date', '')\n            ])\n            total_amount += task.get('amount', 0)\n        \n        # Add total row\n        ws.append([])\n        ws.append([\"JAMI:\", \"\", total_amount, \"\"])\n        \n        # Save file\n        wb.save(filepath)\n        return filepath\n    \n    def create_debt_report(self, employee_name: str, debts: List[Dict]) -> str:\n        \"\"\"Create debt report for employee\"\"\"\n        if not debts:\n            return None\n        \n        # Create reports directory\n        os.makedirs(\"hisobotlar\", exist_ok=True)\n        \n        # Generate filename\n        today = datetime.now()\n        filename = f\"{employee_name}_qarz_hisoboti_{today.strftime('%Y%m%d')}.xlsx\"\n        filepath = os.path.join(\"hisobotlar\", filename)\n        \n        # Create workbook\n        wb = openpyxl.Workbook()\n        ws = wb.active\n        ws.title = f\"{employee_name} Qarz Hisoboti\"\n        \n        # Add headers\n        headers = [\"Summa\", \"Sabab\", \"Sana\"]\n        ws.append(headers)\n        \n        # Add data\n        total_debt = 0\n        for debt in debts:\n            ws.append([\n                debt.get('amount', 0),\n                debt.get('reason', ''),\n                debt.get('date', '')\n            ])\n            total_debt += debt.get('amount', 0)\n        \n        # Add total row\n        ws.append([])\n        ws.append([\"JAMI QARZ:\", \"\", total_debt])\n        \n        # Save file\n        wb.save(filepath)\n        return filepath\n","size_bytes":3807},"movie_downloader.py":{"content":"#!/usr/bin/env python3\n\"\"\"\nMovie Download Helper for Telegram Bot\nProvides movie file handling and download capabilities\n\"\"\"\n\nimport os\nimport requests\nfrom typing import Dict, List, Optional\n\nclass MovieDownloader:\n    \"\"\"Handle movie downloads and file management\"\"\"\n    \n    def __init__(self):\n        self.movie_directory = \"movies\"\n        self.ensure_movie_directory()\n    \n    def ensure_movie_directory(self):\n        \"\"\"Create movies directory if it doesn't exist\"\"\"\n        if not os.path.exists(self.movie_directory):\n            os.makedirs(self.movie_directory)\n    \n    def get_sample_movies(self) -> List[Dict]:\n        \"\"\"Get list of sample movies with download info\"\"\"\n        return [\n            {\n                \"title\": \"Big Buck Bunny\",\n                \"description\": \"Open source animated short film\",\n                \"file_path\": \"big_buck_bunny_480p.mp4\",\n                \"size\": \"64 MB\",\n                \"duration\": \"10 min\",\n                \"download_url\": \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\"\n            },\n            {\n                \"title\": \"Sintel\",\n                \"description\": \"Open source fantasy short film\",\n                \"file_path\": \"sintel_480p.mp4\", \n                \"size\": \"31 MB\",\n                \"duration\": \"15 min\",\n                \"download_url\": \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/Sintel.mp4\"\n            },\n            {\n                \"title\": \"Tears of Steel\",\n                \"description\": \"Open source sci-fi short film\",\n                \"file_path\": \"tears_of_steel_480p.mp4\",\n                \"size\": \"45 MB\", \n                \"duration\": \"12 min\",\n                \"download_url\": \"http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/TearsOfSteel.mp4\"\n            }\n        ]\n    \n    def download_movie(self, movie_info: Dict) -> Optional[str]:\n        \"\"\"Download a movie file\"\"\"\n        try:\n            file_path = os.path.join(self.movie_directory, movie_info[\"file_path\"])\n            \n            # Check if file already exists\n            if os.path.exists(file_path):\n                return file_path\n            \n            # Download the file\n            response = requests.get(movie_info[\"download_url\"], stream=True)\n            response.raise_for_status()\n            \n            with open(file_path, 'wb') as f:\n                for chunk in response.iter_content(chunk_size=8192):\n                    f.write(chunk)\n            \n            return file_path\n        except Exception as e:\n            print(f\"Error downloading movie: {e}\")\n            return None\n    \n    def get_movie_info(self, movie_name: str) -> Optional[Dict]:\n        \"\"\"Get movie info by name\"\"\"\n        movies = self.get_sample_movies()\n        \n        for movie in movies:\n            if movie_name.lower() in movie[\"title\"].lower():\n                return movie\n        \n        return None\n    \n    def send_movie_download_options(self, movie_name: str) -> str:\n        \"\"\"Generate download options message for a movie\"\"\"\n        movie_info = self.get_movie_info(movie_name)\n        \n        if movie_info:\n            return f\"\"\"\nüé¨ **{movie_info['title']}**\n\nüìù **Tavsif:** {movie_info['description']}\nüìè **Davomiyligi:** {movie_info['duration']}\nüíæ **Hajmi:** {movie_info['size']}\n\n‚úÖ **Bu kinoni to'g'ridan-to'g'ri yuklab olishingiz mumkin!**\n\nYuklab olish uchun \"üì• Yuklab olish\" tugmasini bosing.\n\"\"\"\n        else:\n            return f\"\"\"\nüé¨ **{movie_name}** kinosi uchun qidiruv...\n\nüì± **Telegram kanallar:**\n‚Ä¢ @MoviesChannelUz\n‚Ä¢ @KinoDownloadUz  \n‚Ä¢ @FilmCollectionUz\n\nüíæ **Fayl saqlash xizmatlari:**\n‚Ä¢ Google Drive\n‚Ä¢ Mega.nz\n‚Ä¢ MediaFire\n\nüîç **Qidiruv maslahatlar:**\n‚Ä¢ Kino nomini ingliz tilida ham sinab ko'ring\n‚Ä¢ Yil qo'shib qidiring (masalan: \"{movie_name} 2023\")\n‚Ä¢ HD, 1080p, 720p so'zlarini qo'shing\n\n‚ö†Ô∏è **Eslatma:** Faqat ochiq manbali yoki egalik huquqi tugagan kinolarni yuklab oling.\n\"\"\"\n\ndef get_movie_downloader():\n    \"\"\"Get movie downloader instance\"\"\"\n    return MovieDownloader()","size_bytes":4097}}}